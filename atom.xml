<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[叶帆的技术博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yeziahehe.com/"/>
  <updated>2015-12-16T15:45:10.000Z</updated>
  <id>http://yeziahehe.com/</id>
  
  <author>
    <name><![CDATA[叶帆]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用Travis CI自动构建Hexo静态博客]]></title>
    <link href="http://yeziahehe.com/2015/12/13/2015-12-13-%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAHexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yeziahehe.com/2015/12/13/2015-12-13-使用Travis CI自动构建Hexo静态博客/</id>
    <published>2015-12-13T15:35:55.000Z</published>
    <updated>2015-12-16T15:45:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>随着现在open source越来越火，更多的人开始注重技术知识的获取。不可否认，目前的信息传播速度非常之快，渠道也非常之多，对于知识获取的整理和理解是很多人都在做的一件事情。在这种情况下更多的人开始选择写博客，把自己认知记录下来，一是为了检验自己对于技术的理解，二是为了让更多的人去从你的博客中获取到有用的信息。</p>
<p>我2014年的时候自己买了域名，用<code>jekyll + GitHub Pages</code>搭建了自己的博客（目前正在考虑换到Hexo，而Coryphaei技术博客就是采用的Hexo）。我同样也了搭建我们公司的<a href="http://blog.coryphaei.com/" target="_blank" rel="external">技术博客</a>，大家有兴趣可以访问，我的很多干货也将发表到那边。</p>
<h1 id="u6280_u672F"><a href="#u6280_u672F" class="headerlink" title="技术"></a>技术</h1><p>Coryphaei技术博客采用的是<code>Hexo + GitHub Pages + Travis CI</code>的技术方案，实现了多人同时更新博客并且自动化构建。</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>是一款高效、简洁的静态博客框架，目前整个项目都开源在<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">GitHub</a>上。因为部署极其简单，而且不需要数据库的支持，纯静态的模式，使得目前静态博客被越来越多的选择。关注与文章本身，创造出更有价值的文章才是每个写博客的人的初衷。</p>
<p>Hexo是由<a href="nodejs.org">Node.js</a>完成，需要集成Node.js的开发环境，这里不再赘述。接下来开始集成Hexo的开发环境，因为我是OS X，所以一下所有的均是基于OS X环境的搭建教程。</p>
<p>首先，需要配置基本的环境。</p>
<h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><blockquote>
<p>注意：npm因为qiang的原因，经常会出问题，我换成了taobao的cmpn镜像，taobao的cnpm镜像这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>
</blockquote>
<p>安装方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<h3 id="Hexo_u57FA_u672C_u73AF_u5883"><a href="#Hexo_u57FA_u672C_u73AF_u5883" class="headerlink" title="Hexo基本环境"></a>Hexo基本环境</h3><p>Hexo基本环境的配置，步骤比较简单。</p>
<h4 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>启动本地的服务器看下是否安装成功<code>hexo s</code>，浏览器打开<code>http://localhost:4000</code>。</p>
<h4 id="u4E3B_u9898_Next"><a href="#u4E3B_u9898_Next" class="headerlink" title="主题 Next"></a>主题 Next</h4><p>我采用的是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next</a>主题，这个主题是国人写的，因为其简洁的特点，深受大家的喜欢。Next有官方出的<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">使用说明</a>，大家有问题可以先去浏览使用说明。</p>
<p>安装非常简单<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
<p>启用 NexT 主题<br>克隆/下载 完成后，打开根目录下的_config.yml，找到<code>theme</code>字段，并将其值更改为<code>next</code>。<br>启动本地的服务器看下是否安装成功<code>hexo s</code>，浏览器打开<code>http://localhost:4000</code>。</p>
<h4 id="u57FA_u672C_u914D_u7F6E_u7684_u4E00_u4E9B_u4FEE_u6539"><a href="#u57FA_u672C_u914D_u7F6E_u7684_u4E00_u4E9B_u4FEE_u6539" class="headerlink" title="基本配置的一些修改"></a>基本配置的一些修改</h4><p>对于博客的基本配置的个性化定制，完全可以参照Next官方出的<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">使用说明</a>，我也附上我的 <a href="https://github.com/Coryphaei/coryphaei.github.io/blob/blog/_config.yml" target="_blank" rel="external">_config.yml</a> 和theme目录下的<a href="https://github.com/Coryphaei/coryphaei.github.io/blob/blog/themes/next/_config.yml" target="_blank" rel="external">themes/next/_config.yml</a>供大家参考。</p>
<p>到目前为止，整个Hexo的博客就搭建完毕。</p>
<h2 id="GitHub_Pages"><a href="#GitHub_Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>有关于GitHub Pages的问题，网上教程太多，大家可以自行google，这边就不在赘述。</p>
<h2 id="Travis_CI"><a href="#Travis_CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>目前，自动化构建、持续集成的理念在整个计算行业非常的流行，大家更愿意去使用自动化代替手动，从而提高效率。</p>
<p><code>持续集成</code>的概念</p>
<blockquote>
<p>持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，每人每天可能集成一次，甚至多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。</p>
</blockquote>
<p>自动构建工具则是持续集成的一种出色实践。代码提交后，由软件自动完成代码的测试、构建，并将过程中状态与构建物产出才是持续集成的意义。</p>
<p><a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a>就是一个在线的、分布式的持续集成服务，用来构建及测试在GitHub托管的代码。利用Travis CI 会在每一次push后生成一个虚拟机来执行事先安排好的自动构建任务，从来进行发布。</p>
<h3 id="u4E3A_u4EC0_u4E48_u4F7F_u7528"><a href="#u4E3A_u4EC0_u4E48_u4F7F_u7528" class="headerlink" title="为什么使用"></a>为什么使用</h3><p>Travis CI本身已经是很好的自动构建的工具，而这里使用的原因，本质上是因为Hexo本身并不能进行多人合作。Hexo的<code>hexo generate</code>和<code>hexo deploy</code>会自动渲染并提交到GitHub上，所以当你从别的电脑上clone的时候，clone下来的是渲染好的html的文章。就算我在两个电脑上同时搭建了环境，但是每次渲染的时候只会渲染本地的markdown文章，依然不能进行同步。有些人选择了使用百度云进行同步，每次写之前下载下来并覆盖，就能进行同步。不否认，这个方法对于一个人写博客，在工作和家的电脑还算是比较方便的，因为始终是一个人进行操作。而我们的博客是多人共同写的，所以说会存在各种冲突问题，于是想到了用Travis CI。</p>
<h3 id="u539F_u7406"><a href="#u539F_u7406" class="headerlink" title="原理"></a>原理</h3><p><img src="http://7xp57v.com1.z0.glb.clouddn.com/coryphaei/travis-hexo-flowing.png" alt="travis-hexo-flowing"></p>
<blockquote>
<p>图片引用自v2cc的<a href="http://v2cc.github.io/2015/09/02/unbelievable-workflow-autodeploy-hexo-by-travis/" target="_blank" rel="external">博客</a>，并且其对于流程的讲解也对我产生了很大的帮助，非常感谢。</p>
</blockquote>
<p>分析下思路：<br>前提：我们在之前博客搭建的repo下面，新建一个blog的分支，这个分支用来进行环境代码的备份，并且配置出<code>.travis.yml</code>进行自动化构建。</p>
<h4 id="User_-_push_-_26gt_3B_branch_blog"><a href="#User_-_push_-_26gt_3B_branch_blog" class="headerlink" title="User - push -&gt; branch blog"></a>User - push -&gt; branch blog</h4><p>将代码push到在GitHub上的博客中的blog分支。</p>
<h4 id="Dev_repo_-_sync_-_26gt_3B_Travis_CI"><a href="#Dev_repo_-_sync_-_26gt_3B_Travis_CI" class="headerlink" title="Dev repo - sync -&gt; Travis CI"></a>Dev repo - sync -&gt; Travis CI</h4><p>在branch blog中配置<code>.travis.yml</code>文件，在Travis CI中开启branch blog的同步开关，并启用<code>Build only if .travis.yml is present</code>项，这样能在repo中有多个branch时，让Travis CI只构建放置了<code>.travis.yml</code>文件的branch。</p>
<h4 id="Travis_CI_-_build_and_push_-_26gt_3B_Pages_repo"><a href="#Travis_CI_-_build_and_push_-_26gt_3B_Pages_repo" class="headerlink" title="Travis CI - build and push -&gt; Pages repo"></a>Travis CI - build and push -&gt; Pages repo</h4><p>Travis CI 的自动化构建完全依靠唯一的<code>.travis.yml</code>脚本文件。需要在此文件中添加构建环境、构建Hexo、生成博客及后续push到Pages repo的全部脚本。</p>
<h5 id="u751F_u6210SSH_Key"><a href="#u751F_u6210SSH_Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h5><p>要做到Travis CI向Pages repo自动推送就必须用到Github SSH Key，这样做的目的是免去Hexo部署时候输入密码的步骤。生成SSH Key的操作参照GitHub的官网即可：<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Github SSH Key</a>。</p>
<p>这样会得到<code>id_rsa.pub</code>和<code>id_rsa</code>两个秘钥，我们将<code>id_rsa.pub</code>添加到了github，下面要加密<code>id_rsa</code>这个私钥并且上传到Travis。</p>
<blockquote>
<p>注意：这个SSH key不应该是你账号的全局SSH Key，这样Travis CI就获得了你所有代码库的提交权限。仅仅只需要把SSH Key添加到当前repo的setting中的key下面即可。</p>
</blockquote>
<h5 id="Travis_CI__u73AF_u5883"><a href="#Travis_CI__u73AF_u5883" class="headerlink" title="Travis CI 环境"></a>Travis CI 环境</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp ~/.ssh/id_rsa / <span class="comment">#将上一步得到的`id_rsa`复制到根目录下</span></span><br><span class="line">$ vim .travis.yml <span class="comment">#创建.travis.yml</span></span><br><span class="line">$ gem install travis <span class="comment">#安装Travis CI</span></span><br><span class="line">$ travis login --auto <span class="comment">#登录Travis CI，需要输入GitHub的账号密码</span></span><br><span class="line">$ travis encrypt-file ssh_key --add <span class="comment">#加密私钥并上传至Travis</span></span><br></pre></td></tr></table></figure>
<p>生成加密过得新秘钥<code>id_rsa.enc</code>, 并自动将branch blog中git的信息及解密秘钥的相关信息添加到<code>.travis.yml</code>中。然后手动删除私钥文件<code>id_rsa</code>， 以保证代码仓库的安全。</p>
<h5 id="SSH_u7684_u8BBE_u7F6E"><a href="#SSH_u7684_u8BBE_u7F6E" class="headerlink" title="SSH的设置"></a>SSH的设置</h5><p>在当前目录下新建文件<code>ssh_config</code>，内容为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  User git</span><br><span class="line">  StrictHostKeyChecking no</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure></p>
<p>修改<code>.travis.yml</code>中的命令，指定openssl解密后的生成位置，xxxxxxxxxx部分就是你的解密参数，不要去改动它。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- openssl aes-<span class="number">256</span>-cbc -K <span class="variable">$encrypted_xxxxxxxxxx_key</span> -iv <span class="variable">$encrypted_xxxxxxxxxx_iv</span></span><br><span class="line">  -in travis.enc -out ~/.ssh/id_rsa <span class="operator">-d</span></span><br></pre></td></tr></table></figure></p>
<h5 id="u4FEE_u6539_u76EE_u5F55_u6743_u9650"><a href="#u4FEE_u6539_u76EE_u5F55_u6743_u9650" class="headerlink" title="修改目录权限"></a>修改目录权限</h5><p>紧接着在<code>.travis.yml</code>中修改目录权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- chmod <span class="number">600</span> ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>
<h5 id="u5C06_u5BC6_u94A5_u52A0_u5165_u7CFB_u7EDF"><a href="#u5C06_u5BC6_u94A5_u52A0_u5165_u7CFB_u7EDF" class="headerlink" title="将密钥加入系统"></a>将密钥加入系统</h5><p>紧接着在<code>.travis.yml</code>中将密钥加入系统<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">eval</span> $(ssh-agent)</span><br><span class="line">- ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>
<h5 id="u4FEE_u6539git_u4FE1_u606F"><a href="#u4FEE_u6539git_u4FE1_u606F" class="headerlink" title="修改git信息"></a>修改git信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- cp ssh_config ~/.ssh/config</span><br><span class="line">- git config --global user.name <span class="string">"username"</span></span><br><span class="line">- git config --global user.email username@example.com</span><br></pre></td></tr></table></figure>
<h5 id="u6DFB_u52A0_u5206_u652F_u4FE1_u606F"><a href="#u6DFB_u52A0_u5206_u652F_u4FE1_u606F" class="headerlink" title="添加分支信息"></a>添加分支信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - blog</span><br></pre></td></tr></table></figure>
<h5 id="u914D_u7F6EHexo"><a href="#u914D_u7F6EHexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">install:</span><br><span class="line">- npm install hexo-cli -g</span><br><span class="line">- npm install hexo --save</span><br><span class="line">- npm install</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo d</span><br><span class="line">- hexo g</span><br></pre></td></tr></table></figure>
<p>这样就完成了<code>.travis.yml</code>的设置，这里是我的源文件<a href="https://github.com/Coryphaei/coryphaei.github.io/blob/blog/.travis.yml" target="_blank" rel="external">.travis.yml</a>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- <span class="string">'0.12'</span></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - blog</span><br><span class="line">before_install:</span><br><span class="line">- openssl aes-<span class="number">256</span>-cbc -K <span class="variable">$encrypted_b83a281ef741_key</span> -iv <span class="variable">$encrypted_b83a281ef741_iv</span></span><br><span class="line">  -in id_rsa.enc -out ~/.ssh/id_rsa <span class="operator">-d</span></span><br><span class="line">- chmod <span class="number">600</span> ~/.ssh/id_rsa</span><br><span class="line">- <span class="built_in">eval</span> $(ssh-agent)</span><br><span class="line">- ssh-add ~/.ssh/id_rsa</span><br><span class="line">- cp ssh_config ~/.ssh/config</span><br><span class="line">- git config --global user.name <span class="string">"叶帆"</span></span><br><span class="line">- git config --global user.email yeziahehe@gmail.com</span><br><span class="line">- git <span class="built_in">clone</span> -b master git@github.com:Coryphaei/coryphaei.github.io.git .deploy_git</span><br><span class="line">install:</span><br><span class="line">- npm install hexo-cli -g</span><br><span class="line">- npm install</span><br><span class="line">- npm install hexo-generator-feed --save</span><br><span class="line">- npm install hexo-deployer-git --save</span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo g</span><br><span class="line">- hexo g</span><br><span class="line">- hexo d</span><br></pre></td></tr></table></figure>
<p>这个时候应该将其push到blog分支。</p>
<blockquote>
<p>注意，要删除themes/next/.git文件，否则会导致主题传不上去，渲染后首页空白的问题。</p>
</blockquote>
<h4 id="View_the_pages"><a href="#View_the_pages" class="headerlink" title="View the pages"></a>View the pages</h4><p>打开首页，就能看到已经发布的最新博客。</p>
<h1 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h1><p>上述的所有步骤完成后，应该就已经成功了。我这边列举下我遇到的一些问题，希望能帮到大家。大家有任何问题也可以直接评论，我会第一时间回复。</p>
<ul>
<li><p><code>.travis.yml</code>中的注释问题<br><img src="http://7xp57v.com1.z0.glb.clouddn.com/coryphaei/travis_yml_comment.png" alt="travis_yml_comment"><br>一开始的时候我在<code>.travis.yml</code>中的注释用的是<code>//</code>，结果一直导致<code>missing config</code>。后来才知道YAML中注释应该用<code>#</code>。</p>
</li>
<li><p>首页无内容<br>一开始的时候我的首页一片空白，index.html中也是空的，原因就是因为主题Next是从GitHub上clone下来的，里面会存在<code>.git</code>文件，所以push到blog分支的时候千万要注意删除掉next文件夹中的<code>.git</code>文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog/themes/next <span class="comment">#到next主题文件夹下</span></span><br><span class="line">ls <span class="operator">-a</span> <span class="comment">#显示所有文件</span></span><br><span class="line">rm .git <span class="comment">#删除.git文件</span></span><br><span class="line">ls <span class="operator">-a</span> <span class="comment">#确认删除</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>next主题会导致首页只显示最新的文章<br>很多人遇到发布后首页只显示最新的一篇文章，next主题<a href="https://github.com/iissnan/hexo-theme-next/issues/535" target="_blank" rel="external">issue</a>中也有提到这个。</p>
</li>
</ul>
<p>解决办法就是<code>hexo g</code>命令做两遍，这个也是为什么我<code>.travis.yml</code>中的Hexo配置命令写了两遍的原因。被这个问题纠缠了很久，希望写出来能帮到大家，如果你没有问题就不需要在<code>.travis.yml</code>中写两遍命令。</p>
<h1 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h1><p>这个是我搭建这个博客写的第一篇文章，我也发现我这次解决问题回去弄个明白，回想之前写的博客，其实干货真的很少，知识也很肤浅，这次搭建博客-发现问题-解决问题给了我很好的体验，也让我学到了很多，我会尽可能的去写很多的干货去和大家分享！共勉！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>随着现在open source越来越火，更多的人开始注重技术知识的获取。不可否认，目前的信息传播速度非常]]>
    </summary>
    
      <category term="Travis CI" scheme="http://yeziahehe.com/tags/Travis-CI/"/>
    
      <category term="hexo" scheme="http://yeziahehe.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://yeziahehe.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客迁移]]></title>
    <link href="http://yeziahehe.com/2015/12/12/2015-12-12-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    <id>http://yeziahehe.com/2015/12/12/2015-12-12-博客迁移/</id>
    <published>2015-12-12T15:45:56.000Z</published>
    <updated>2015-12-16T15:54:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u7F18_u7531"><a href="#u7F18_u7531" class="headerlink" title="缘由"></a>缘由</h1><p>最近开始搭建公司的<a href="http://blog.coryphaei.com" target="_blank" rel="external">博客</a>，了解到了<a href="http://hexo.io" target="_blank" rel="external">Hexo</a>，一款非常优雅的静态博客。我之前的博客就是使用<code>jekyll</code>静态博客，但是jekyll的theme实在是不和我的胃口，自己也没有好好经营，再加上自己做了修改后Bug百出，所以催生了我转向Hexo的阵营。</p>
<h1 id="u5173_u4E8E_u535A_u5BA2"><a href="#u5173_u4E8E_u535A_u5BA2" class="headerlink" title="关于博客"></a>关于博客</h1><p>最近搭建完了公司的博客后，突然开始注重博客的质量，几个小伙伴一起写难免会认真起来。我花了很久写了<a href="">使用Travis CI自动构建Hexo静态博客</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u7F18_u7531"><a href="#u7F18_u7531" class="headerlink" title="缘由"></a>缘由</h1><p>最近开始搭建公司的<a href="http://blog.coryphaei.com" target=]]>
    </summary>
    
      <category term="随想" scheme="http://yeziahehe.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="blog" scheme="http://yeziahehe.com/categories/blog/"/>
    
      <category term="随想" scheme="http://yeziahehe.com/categories/blog/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS面试题整理]]></title>
    <link href="http://yeziahehe.com/2015/11/06/2015-11-06-iOS%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>http://yeziahehe.com/2015/11/06/2015-11-06-iOS面试题整理/</id>
    <published>2015-11-06T15:34:44.000Z</published>
    <updated>2015-12-16T15:35:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="iOS_u9762_u8BD5_u9898_u6574_u7406"><a href="#iOS_u9762_u8BD5_u9898_u6574_u7406" class="headerlink" title="iOS面试题整理"></a>iOS面试题整理</h3><h4 id="1-__u98CE_u683C_u7EA0_u9519_u9898"><a href="#1-__u98CE_u683C_u7EA0_u9519_u9898" class="headerlink" title="1. 风格纠错题"></a>1. 风格纠错题</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;</span><br><span class="line">    UserSex_Man,</span><br><span class="line">    UserSex_Woman</span><br><span class="line">&#125;UserSex;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UserModel</span> :<span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) UserSex sex;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">id</span>)initUserModelWithUserName: (<span class="built_in">NSString</span> *)name withAge:(<span class="keyword">int</span>)age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)doLogIn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>修改完的代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// .h文件</span></span><br><span class="line"><span class="comment">// http://weibo.com/luohanchenyilong/</span></span><br><span class="line"><span class="comment">// https://github.com/ChenYilong</span></span><br><span class="line"><span class="comment">// 修改完的代码，这是第一种修改方法，后面会给出第二种修改方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, CYLSex) &#123;</span><br><span class="line">    CYLSexMan,</span><br><span class="line">    CYLSexWoman</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CYLUser</span> : <span class="title">NSObject</span>&lt;<span class="title">NSCopying</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">assign</span>) CYLSex sex;</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithName:(<span class="built_in">NSString</span> *)name age:(<span class="built_in">NSUInteger</span>)age sex:(CYLSex)sex;</span><br><span class="line">+ (instancetype)userWithName:(<span class="built_in">NSString</span> *)name age:(<span class="built_in">NSUInteger</span>)age sex:(CYLSex)sex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>[※]@property中有哪些属性关键字？</li>
</ul>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.sunnyxx.com/2015/07/04/ios-interview/" target="_blank" rel="external">招聘一个靠谱的 iOS </a></p>
<p><a href="https://github.com/ChenYilong/iOSInterviewQuestions" target="_blank" rel="external">iOSInterviewQuestions</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="iOS_u9762_u8BD5_u9898_u6574_u7406"><a href="#iOS_u9762_u8BD5_u9898_u6574_u7406" class="headerlink" title="iOS面试题整理"></a>iOS面试题整理</h3]]>
    </summary>
    
      <category term="iOS，面试题" scheme="http://yeziahehe.com/tags/iOS%EF%BC%8C%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义库封装思路和Cocoapods发布]]></title>
    <link href="http://yeziahehe.com/2015/10/22/2015-10-22-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%93%E5%B0%81%E8%A3%85%E6%80%9D%E8%B7%AF%E5%92%8CCocoapods%E5%8F%91%E5%B8%83/"/>
    <id>http://yeziahehe.com/2015/10/22/2015-10-22-自定义库封装思路和Cocoapods发布/</id>
    <published>2015-10-22T15:32:23.000Z</published>
    <updated>2015-12-16T15:34:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h2><p>近期自己封装了iOS客户端启动页的自定义库，在封装的过程中学习了很多，包括封装的思想以及Cocoapods发布。</p>
<h2 id="u539F_u56E0"><a href="#u539F_u56E0" class="headerlink" title="原因"></a>原因</h2><p>首先是因为千篇一律的使用图片进行启动页，在用户体验上确实引起了审美疲劳，然后是收到了Coding的启发，于是准备进行启动页的封装。</p>
<p>PS：不会设计的程序员不是好程序员！</p>
<h2 id="YFStartView"><a href="#YFStartView" class="headerlink" title="YFStartView"></a>YFStartView</h2><p>目前<a href="https://github.com/yeziahehe/YFStartView" target="_blank" rel="external">YFStartView</a>已经开源，效果图如下。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/github/YFStartViewbuttom.gif" alt="效果图1"></p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/github/YFStartViewcenter.gif" alt="效果图2"></p>
<p>几点说明：</p>
<ul>
<li><p>尽量不要使用三方库（后来发现Cocoapods中有的库是可以的，因为发布到Cocoapods可以添加依赖，那么就不存在问题），因为手动添加了三方库，可能导致重复添加。</p>
</li>
<li><p>尽可能的暴露出属性，让用户去选择使用的属性。</p>
</li>
</ul>
<h2 id="u4F7F_u7528Cocoapods"><a href="#u4F7F_u7528Cocoapods" class="headerlink" title="使用Cocoapods"></a>使用Cocoapods</h2><p>初始化一个Podspec文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create YFStartView</span><br></pre></td></tr></table></figure>
<p>要像github仓库中添加.podspec文件，代码内容如下</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Be sure to run `pod spec lint YFStartView.podspec' to ensure this is a</span></span><br><span class="line"><span class="comment">#  valid spec and to remove all comments including this before submitting the spec.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  To learn more about Podspec attributes see http://docs.cocoapods.org/specification.html</span></span><br><span class="line"><span class="comment">#  To see working Podspecs in the CocoaPods repo see https://github.com/CocoaPods/Specs/</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Pod::Spec</span>.new <span class="keyword">do</span> |s|</span><br><span class="line"></span><br><span class="line">  <span class="comment"># ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  These will help people to find your library, and whilst it</span></span><br><span class="line">  <span class="comment">#  can feel like a chore to fill in it's definitely to your advantage. The</span></span><br><span class="line">  <span class="comment">#  summary should be tweet-length, and the description more in depth.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  s.name         = <span class="string">"YFStartView"</span></span><br><span class="line">  s.version      = <span class="string">"0.0.1"</span></span><br><span class="line">  s.summary      = <span class="string">"YFStartView is an custom view for start image."</span></span><br><span class="line"></span><br><span class="line">  s.homepage     = <span class="string">"https://github.com/yeziahehe/YFStartView"</span></span><br><span class="line">  <span class="comment"># s.screenshots  = "www.example.com/screenshots_1.gif", "www.example.com/screenshots_2.gif"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ―――  Spec License  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  Licensing your code is important. See http://choosealicense.com for more info.</span></span><br><span class="line">  <span class="comment">#  CocoaPods will detect a license file if there is a named LICENSE*</span></span><br><span class="line">  <span class="comment">#  Popular ones are 'MIT', 'BSD' and 'Apache License, Version 2.0'.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  s.license      = <span class="string">"MIT"</span></span><br><span class="line">  <span class="comment"># s.license      = &#123; :type =&gt; "MIT", :file =&gt; "FILE_LICENSE" &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Author Metadata  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  Specify the authors of the library, with email addresses. Email addresses</span></span><br><span class="line">  <span class="comment">#  of the authors are extracted from the SCM log. E.g. $ git log. CocoaPods also</span></span><br><span class="line">  <span class="comment">#  accepts just a name if you'd rather not provide an email address.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  Specify a social_media_url where others can refer to, for example a twitter</span></span><br><span class="line">  <span class="comment">#  profile URL.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  s.author             = &#123; <span class="string">"Ivan"</span> =&gt; <span class="string">"yeziahehe@gmail.com"</span> &#125;</span><br><span class="line">  <span class="comment"># Or just: s.author    = "Ivan"</span></span><br><span class="line">  <span class="comment"># s.authors            = &#123; "Ivan" =&gt; "yeziahehe<span class="doctag">@gmail</span>.com" &#125;</span></span><br><span class="line">  <span class="comment"># s.social_media_url   = "http://twitter.com/Ivan"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Platform Specifics ――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  If this Pod runs only on iOS or OS X, then specify the platform and</span></span><br><span class="line">  <span class="comment">#  the deployment target. You can optionally include the target after the platform.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.platform     = :ios</span></span><br><span class="line">  s.platform     = <span class="symbol">:ios</span>, <span class="string">"8.0"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#  When using multiple platforms</span></span><br><span class="line">  <span class="comment"># s.ios.deployment_target = "5.0"</span></span><br><span class="line">  <span class="comment"># s.osx.deployment_target = "10.7"</span></span><br><span class="line">  <span class="comment"># s.watchos.deployment_target = "2.0"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  Specify the location from where the source should be retrieved.</span></span><br><span class="line">  <span class="comment">#  Supports git, hg, bzr, svn and HTTP.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  s.source       = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"https://github.com/yeziahehe/YFStartView.git"</span>, <span class="symbol">:tag</span> =&gt; <span class="string">"0.0.1"</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Source Code ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  CocoaPods is smart about how it includes source code. For source files</span></span><br><span class="line">  <span class="comment">#  giving a folder will include any swift, h, m, mm, c &amp; cpp files.</span></span><br><span class="line">  <span class="comment">#  For header files it will include any header in the folder.</span></span><br><span class="line">  <span class="comment">#  Not including the public_header_files will make all headers public.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  s.source_files  = <span class="string">"YFStartView/*.&#123;h,m&#125;"</span></span><br><span class="line">  <span class="comment"># s.exclude_files = "Classes/Exclude"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.public_header_files = "Classes/**/*.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Resources ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  A list of resources included with the Pod. These are copied into the</span></span><br><span class="line">  <span class="comment">#  target bundle with a build phase script. Anything else will be cleaned.</span></span><br><span class="line">  <span class="comment">#  You can preserve files from being cleaned, please don't preserve</span></span><br><span class="line">  <span class="comment">#  non-essential files like tests, examples and documentation.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.resource  = "icon.png"</span></span><br><span class="line">  <span class="comment"># s.resources = "Resources/*.png"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.preserve_paths = "YFStartViewDemo"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Project Linking ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  Link your library with frameworks, or libraries. Libraries do not include</span></span><br><span class="line">  <span class="comment">#  the lib prefix of their name.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.framework  = "SomeFramework"</span></span><br><span class="line">  <span class="comment"># s.frameworks = "SomeFramework", "AnotherFramework"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.library   = "iconv"</span></span><br><span class="line">  <span class="comment"># s.libraries = "iconv", "xml2"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Project Settings ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  If your library depends on compiler flags you can set them in the xcconfig hash</span></span><br><span class="line">  <span class="comment">#  where they will only apply to your library. If you depend on other Podspecs</span></span><br><span class="line">  <span class="comment">#  you can include multiple dependencies to ensure it works.</span></span><br><span class="line"></span><br><span class="line">  s.requires_arc = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.xcconfig = &#123; "HEADER_SEARCH_PATHS" =&gt; "$(SDKROOT)/usr/include/libxml2" &#125;</span></span><br><span class="line">  <span class="comment"># s.dependency "JSONKit", "~&gt; 1.4"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="string">``</span></span><br><span class="line"></span><br><span class="line">接着要注意版本号的问题</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`bash</span><br><span class="line">  git tag -a 0.0.1 -m "Tag release 0.0.1"</span><br><span class="line">  git push —tags</span><br><span class="line">  git add YFStartView.podspec</span><br><span class="line">  git commit -m "add YFStartView.podspec file"</span><br><span class="line">  git push origin master</span></span><br></pre></td></tr></table></figure>
<p>接下来很多教程里面写的fork，目前的话Cocoapods已经不支持pull request，改为trunk服务。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/github/YFStartViewcocoapods.jpg" alt="Cocoapods"></p>
<p>更新了用trunk之后，CocoaPods 需要0.33版本以上的，用 pod –version 查看，如果版本低，需要更新。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register yeziahehe@gmail.com <span class="string">'yeziahehe'</span>  --verbose</span><br></pre></td></tr></table></figure>
<p>接下来会收到一封邮件进行验证。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>
<p>会显示如下信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- Name:     yeziahehe</span><br><span class="line">- Email:    yeziahehe@gmail.com</span><br><span class="line">- Since:    October <span class="number">21</span>st, <span class="number">02</span>:<span class="number">55</span></span><br><span class="line">- Pods:     None</span><br><span class="line">- Sessions:</span><br><span class="line">- October <span class="number">21</span>st, <span class="number">02</span>:<span class="number">55</span> - February <span class="number">26</span>th, <span class="number">2016</span> <span class="number">02</span>:<span class="number">57</span>. IP:<span class="number">202.195</span>.<span class="number">129.246</span></span><br></pre></td></tr></table></figure>
<p>接下来进行提交</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push YFStartView.podspec</span><br></pre></td></tr></table></figure>
<p>大功告成，搜索一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search YFStartView</span><br></pre></td></tr></table></figure>
<p>已经发布成功！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-&gt; YFStartView (<span class="number">0.0</span>.<span class="number">1</span>)</span><br><span class="line">   YFStartView is an custom view <span class="keyword">for</span> start image.</span><br><span class="line">   pod <span class="string">'YFStartView'</span>, <span class="string">'~&gt; 0.0.1'</span></span><br><span class="line">   - Homepage: https://github.com/yeziahehe/YFStartView</span><br><span class="line">   - Source:   https://github.com/yeziahehe/YFStartView.git</span><br><span class="line">   - Versions: <span class="number">0.0</span>.<span class="number">1</span> [master repo]</span><br></pre></td></tr></table></figure>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><p><a href="http://iiiyu.com/2013/03/01/learning-ios-notes-sixteen/" target="_blank" rel="external">配置自己的CocoaPods库</a></p>
<p><a href="http://iiiyu.com/2013/12/19/learning-ios-notes-thirty-one/" target="_blank" rel="external">CocoaPods 手把手五分钟教你制作自己的podspec文件</a></p>
<p><a href="http://www.cnblogs.com/wengzilin/p/4742530.html" target="_blank" rel="external">iOS：手把手教你发布代码到CocoaPods(Trunk方式)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h2><p>近期自己封装了iOS客户端启动页的自定义库，在封]]>
    </summary>
    
      <category term="iOS，Cocoapods" scheme="http://yeziahehe.com/tags/iOS%EF%BC%8CCocoapods/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Block学习]]></title>
    <link href="http://yeziahehe.com/2015/10/10/2015-10-10-Block%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yeziahehe.com/2015/10/10/2015-10-10-Block学习/</id>
    <published>2015-10-10T15:31:24.000Z</published>
    <updated>2015-12-16T15:32:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h3><p>首先对大家的Block进行下测试，这边有<a href="http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/" target="_blank" rel="external">5道题</a>。</p>
<h3 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h3><p>Block是Objective-C对于闭包的实现，有关闭包，我正在想一个通俗的方式给大家定义下。</p>
<blockquote>
<p>闭包：函数中的函数。</p>
</blockquote>
<h3 id="Block_u7684_u57FA_u672C_u7406_u89E3"><a href="#Block_u7684_u57FA_u672C_u7406_u89E3" class="headerlink" title="Block的基本理解"></a>Block的基本理解</h3><p>Block的两种使用方式：</p>
<ol>
<li>Block变量，这种就是相当于内联函数，很简单。</li>
<li>Block函数，这个就是Block强大的地方，block外的变量可以无缝地直接在block内部使用。</li>
</ol>
<p>Block在使用时是可以调用外部变量的，Block将使用到的、作用域附近到的变量的值建立一份快照拷贝到栈上。而在ARC下就可能会出现循环引用的情况，我们等下来讲。</p>
<h3 id="Block_u7684_u5185_u5B58_u7BA1_u7406"><a href="#Block_u7684_u5185_u5B58_u7BA1_u7406" class="headerlink" title="Block的内存管理"></a>Block的内存管理</h3><p>在 Objective-C 语言中，一共有 3 种类型的 block：</p>
<ol>
<li><p>NSConcreteGlobalBlock 全局的静态 block，不会访问任何外部变量。</p>
</li>
<li><p>NSConcreteStackBlock 保存在栈中的 block，当函数返回时会被销毁。</p>
</li>
<li><p>NSConcreteMallocBlock 保存在堆中的 block，当引用计数为 0 时会被销毁。</p>
</li>
</ol>
<blockquote>
<p>在ARC下，不使用第二种内存管理方式，所有的外部变量使用时都是第三种方式。</p>
</blockquote>
<h3 id="u5FAA_u73AF_u5F15_u7528_u7684_u95EE_u9898"><a href="#u5FAA_u73AF_u5F15_u7528_u7684_u95EE_u9898" class="headerlink" title="循环引用的问题"></a>循环引用的问题</h3><p><em>循环引用</em> （retain cycle）问题的根源在于ARC中Block和obj可能会互相强引用，互相retain对方，这样就导致了retain cycle，无法释放，造成内存泄露。</p>
<p>首先看下面的代码<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="built_in">NSObject</span>* _instanceObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSObject</span>* __globalObj = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>) init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _instanceObj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) test &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSObject</span>* __staticObj = <span class="literal">nil</span>;</span><br><span class="line">    __globalObj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    __staticObj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSObject</span>* localObj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    __block <span class="built_in">NSObject</span>* blockObj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">void</span> (^MyBlock)(<span class="keyword">void</span>) ;</span><br><span class="line">    MyBlock aBlock = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, __globalObj);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, __staticObj);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, _instanceObj);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, localObj);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, blockObj);</span><br><span class="line">    &#125;;</span><br><span class="line">    aBlock = [[aBlock <span class="keyword">copy</span>] autorelease];</span><br><span class="line">    aBlock();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [__globalObj retainCount]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [__staticObj retainCount]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [_instanceObj retainCount]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [localObj retainCount]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [blockObj retainCount]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class="line">        [obj test];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果为 <code>1 1 1 2 1</code></p>
<p>localObj在Block copy时，系统自动retain对象，增加其引用计数。</p>
<ul>
<li>非ObjC对象，如GCD队列dispatch_queue_t。Block copy时并不会自动增加他的引用计数 *</li>
</ul>
<h3 id="u89E3_u51B3_u529E_u6CD5_u4F7F_u7528_u5F31_u5F15_u7528__weak"><a href="#u89E3_u51B3_u529E_u6CD5_u4F7F_u7528_u5F31_u5F15_u7528__weak" class="headerlink" title="解决办法使用弱引用 _weak"></a>解决办法使用弱引用 _weak</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ClassA* objA = [[[ClassA alloc] init] autorelease];</span><br><span class="line"></span><br><span class="line">MyClass* weakSelf = <span class="keyword">self</span>;</span><br><span class="line">objA<span class="variable">.myBlock</span> = ^&#123;</span><br><span class="line">  [weakSelf doSomething];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">self</span><span class="variable">.objA</span> = objA;</span><br></pre></td></tr></table></figure>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/" target="_blank" rel="external">谈Objective-C Block的实现</a><br><a href="http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/" target="_blank" rel="external">正确使用Block避免Cycle Retain和Crash</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h3><p>首先对大家的Block进行下测试，这边有<a h]]>
    </summary>
    
      <category term="Block" scheme="http://yeziahehe.com/tags/Block/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[fork项目同步更新]]></title>
    <link href="http://yeziahehe.com/2015/10/06/2015-10-06-fork%E9%A1%B9%E7%9B%AE%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0/"/>
    <id>http://yeziahehe.com/2015/10/06/2015-10-06-fork项目同步更新/</id>
    <published>2015-10-06T15:30:29.000Z</published>
    <updated>2015-12-16T15:30:50.000Z</updated>
    <content type="html"><![CDATA[<p>对Coding客户端进行Fork后做了注释和源码解析，<a href="https://coding.net/u/yefan/p/Coding-iOS/git" target="_blank" rel="external">Fork地址</a>。</p>
<h3 id="Fork__u540C_u6B65_u66F4_u65B0"><a href="#Fork__u540C_u6B65_u66F4_u65B0" class="headerlink" title="Fork 同步更新"></a>Fork 同步更新</h3><p>在对Coding代码学习的同时需要同步更新Coding的代码，方法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/coryphaei_code/Coding-iOS</span><br><span class="line">$ git remote add upstream git@git.coding.net:coding/Coding-iOS.git</span><br><span class="line">$ git fetch upstream</span><br><span class="line"></span><br><span class="line">$ git pull</span><br><span class="line">$ git merge upstream/master master</span><br><span class="line"></span><br><span class="line">$ git rebase upstream/master</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>对Coding客户端进行Fork后做了注释和源码解析，<a href="https://coding.net/u/yefan/p/Coding-iOS/git" target="_blank" rel="external">Fork地址</a>。</p>
<h3 id="F]]>
    </summary>
    
      <category term="Coding源码" scheme="http://yeziahehe.com/tags/Coding%E6%BA%90%E7%A0%81/"/>
    
      <category term="git" scheme="http://yeziahehe.com/tags/git/"/>
    
      <category term="git" scheme="http://yeziahehe.com/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Coding iOS客户端学习--AppDelegate(持续更新，有关Core Data的内容未来更新)]]></title>
    <link href="http://yeziahehe.com/2015/10/06/2015-10-06-Coding%20iOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%A6%E4%B9%A0--AppDelegate(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%8C%E6%9C%89%E5%85%B3Core%20Data%E7%9A%84%E5%86%85%E5%AE%B9%E6%9C%AA%E6%9D%A5%E6%9B%B4%E6%96%B0)/"/>
    <id>http://yeziahehe.com/2015/10/06/2015-10-06-Coding iOS客户端学习--AppDelegate(持续更新，有关Core Data的内容未来更新)/</id>
    <published>2015-10-06T15:28:44.000Z</published>
    <updated>2015-12-16T15:29:48.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h3><p><a href="https://coding.net/u/coding/p/Coding-iOS/git" target="_blank" rel="external">Coding客户端</a></p>
<h3 id="AppDelegate"><a href="#AppDelegate" class="headerlink" title="AppDelegate"></a>AppDelegate</h3><ul>
<li>AppDelegate.h</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  AppDelegate.h</span></span><br><span class="line"><span class="comment">//  Coding_iOS</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 王 原闯 on 14-7-29.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Coding. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span> : <span class="title">UIResponder</span> &lt;<span class="title">UIApplicationDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIWindow</span> *window;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  Core Data</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSManagedObjectContext</span> *managedObjectContext;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSManagedObjectModel</span> *managedObjectModel;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSPersistentStoreCoordinator</span> *persistentStoreCoordinator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  存储Core Data中的managedObjectContext</span><br><span class="line">            一旦出现managedObjectContext change或者error</span><br><span class="line">            则使用abort()函数[abort()代码层面进行APP的终止，在开发时用于测试使用，线上程序不使用，回引起崩溃]</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)saveContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  Core Data中To access the Documents directory of your applications sandbox</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSURL</span> *)applicationDocumentsDirectory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  根据不同的情况设置TabBar主框架，登录界面，引导页为RootViewController</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setupTabViewController;</span><br><span class="line">- (<span class="keyword">void</span>)setupLoginViewController;</span><br><span class="line">- (<span class="keyword">void</span>)setupIntroductionViewController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  注册推送</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)registerPush;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>AppDelegate.m</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  AppDelegate.m</span></span><br><span class="line"><span class="comment">//  Coding_iOS</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 王 原闯 on 14-7-29.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Coding. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define UMSYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v) ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</span></span><br><span class="line"><span class="preprocessor">#define _IPHONE80_ 80000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AppDelegate.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"RootTabViewController.h"</span>               //通用 TabBarViewController</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"LoginViewController.h"</span>                 //登录 VC</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AFNetworking.h"</span>                        //网络库</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AFNetworkActivityIndicatorManager.h"</span>   //网络小菊花</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"Login.h"</span>                               //Login Model</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"UnReadManager.h"</span>                       //未读消息 Model，同时更新应用角标</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"XGPush.h"</span>                              //信鸽推送</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"EaseStartView.h"</span>                       //启动图</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"BaseNavigationController.h"</span>            //通用 NavigationController</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"PasswordViewController.h"</span>              //用户激活或者密码 VC</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"IntroductionViewController.h"</span>          //引导 VC</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"FunctionIntroManager.h"</span>                //引导 Model</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UMengSocial/UMSocial.h&gt;</span>                //友盟统计分析组件</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UMengSocial/UMSocialWechatHandler.h&gt;</span>   //友盟WeChat分享组件</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UMengSocial/UMSocialQQHandler.h&gt;</span>       //友盟QQ分享组件</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;evernote-cloud-sdk-ios/ENSDK/ENSDK.h&gt;</span>  //印象笔记SDK</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"UMSocialSinaSSOHandler.h"</span>              //友盟Sina分享组件</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"Tweet.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"sys/utsname.h"</span>                         //Apple提供的获取设备硬件版本和系统版本</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> managedObjectContext = _managedObjectContext;</span><br><span class="line"><span class="keyword">@synthesize</span> managedObjectModel = _managedObjectModel;</span><br><span class="line"><span class="keyword">@synthesize</span> persistentStoreCoordinator = _persistentStoreCoordinator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  信鸽推送</span><br><span class="line">            区分 iOS 7, iOS 8, iOS 9 推送模式 (下个版本不支持iOS 7)</span><br><span class="line">            1. app在前台运行时，不弹出推送框，但是app通过代码可以获取到推送的消息。</span><br><span class="line">            2. app在后台运行或者杀死状态时，会弹出推送框并且可以通过代码获取到推送的消息。</span><br><span class="line">            3. app在前台和后台运行时，推送上报触发的是didReceiveRemoteNotification事件。</span><br><span class="line">            4. app在杀死状态时，推送上报触发的是didFinishLaunchingWithOptions事件。</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#pragma mark XGPush</span></span><br><span class="line">- (<span class="keyword">void</span>)registerPush&#123;</span><br><span class="line">    <span class="keyword">float</span> sysVer = [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue];</span><br><span class="line">    <span class="keyword">if</span>(sysVer &lt; <span class="number">8</span>)&#123;</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotificationTypes:(<span class="built_in">UIRemoteNotificationTypeAlert</span> | <span class="built_in">UIRemoteNotificationTypeBadge</span> | <span class="built_in">UIRemoteNotificationTypeSound</span>)];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="preprocessor">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= _IPHONE80_</span></span><br><span class="line">        <span class="built_in">UIMutableUserNotificationCategory</span> *categorys = [[<span class="built_in">UIMutableUserNotificationCategory</span> alloc] init];</span><br><span class="line">        <span class="built_in">UIUserNotificationSettings</span> *userSettings = [<span class="built_in">UIUserNotificationSettings</span> settingsForTypes:<span class="built_in">UIUserNotificationTypeBadge</span>|<span class="built_in">UIUserNotificationTypeSound</span>|<span class="built_in">UIUserNotificationTypeAlert</span></span><br><span class="line">                                                                                     categories:[<span class="built_in">NSSet</span> setWithObject:categorys]];</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerUserNotificationSettings:userSettings];</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotifications];</span><br><span class="line"><span class="preprocessor">#endif</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  UserAgent 加入版本号到header中user agent</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#pragma mark UserAgent</span></span><br><span class="line">- (<span class="keyword">void</span>)registerUserAgent&#123;</span><br><span class="line">    <span class="keyword">struct</span> utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    <span class="built_in">NSString</span> *deviceString = [<span class="built_in">NSString</span> stringWithCString:systemInfo<span class="variable">.machine</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *userAgent = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/%@ (%@; iOS %@; Scale/%0.2f)"</span>, [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:(__bridge <span class="built_in">NSString</span> *)k<span class="built_in">CFBundleExecutableKey</span>] ?: [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:(__bridge <span class="built_in">NSString</span> *)k<span class="built_in">CFBundleIdentifierKey</span>], (__bridge <span class="keyword">id</span>)<span class="built_in">CFBundleGetValueForInfoDictionaryKey</span>(<span class="built_in">CFBundleGetMainBundle</span>(), k<span class="built_in">CFBundleVersionKey</span>) ?: [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:(__bridge <span class="built_in">NSString</span> *)k<span class="built_in">CFBundleVersionKey</span>], deviceString, [[<span class="built_in">UIDevice</span> currentDevice] systemVersion], ([[<span class="built_in">UIScreen</span> mainScreen] respondsToSelector:<span class="keyword">@selector</span>(scale)] ? [[<span class="built_in">UIScreen</span> mainScreen] scale] : <span class="number">1.0</span>f)];</span><br><span class="line">    <span class="built_in">NSDictionary</span> *dictionary = @&#123;<span class="string">@"UserAgent"</span> : userAgent&#125;;<span class="comment">//User-Agent</span></span><br><span class="line">    [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] registerDefaults:dictionary];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma lifeCycle</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.window</span> = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[[<span class="built_in">UIScreen</span> mainScreen] bounds]];</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.window</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//网络</span></span><br><span class="line">    [[AFNetworkActivityIndicatorManager sharedManager] setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [[AFNetworkReachabilityManager sharedManager] startMonitoring];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sd加载的数据类型</span></span><br><span class="line">    [[[SDWebImageManager sharedManager] imageDownloader] setValue:<span class="string">@"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span> forHTTPHeaderField:<span class="string">@"Accept"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置导航条样式</span></span><br><span class="line">    [<span class="keyword">self</span> customizeInterface];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarHidden:<span class="literal">NO</span> withAnimation:<span class="built_in">UIStatusBarAnimationFade</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//UIWebView 的 User-Agent</span></span><br><span class="line">    [<span class="keyword">self</span> registerUserAgent];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([Login isLogin]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setupTabViewController];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        [<span class="built_in">UIApplication</span> sharedApplication]<span class="variable">.applicationIconBadgeNumber</span> = <span class="number">0</span>;</span><br><span class="line">        [<span class="keyword">self</span> setupIntroductionViewController];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.window</span> makeKeyAndVisible];</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     *  @author 叶帆</span><br><span class="line">     *</span><br><span class="line">     *  @brief  特殊引导页，用来显示节日或者重要的引导信息，与引导页不同，引导页所做的是登录是引导界面</span><br><span class="line">     */</span></span><br><span class="line">    [FunctionIntroManager showIntroPage];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     *  @author 叶帆</span><br><span class="line">     *</span><br><span class="line">     *  @brief  欢迎页图片的显示动画</span><br><span class="line">     */</span></span><br><span class="line">    EaseStartView *startView = [EaseStartView startView];</span><br><span class="line">    @weakify(<span class="keyword">self</span>);</span><br><span class="line">    [startView startAnimationWithCompletionBlock:^(EaseStartView *easeStartView) &#123;</span><br><span class="line">        @strongify(<span class="keyword">self</span>);</span><br><span class="line">        [<span class="keyword">self</span> completionStartAnimationWithOptions:launchOptions];</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  处理消息推送，用于固定推送的页面跳转和消息的状态</span><br><span class="line">            加入友盟统计，社会化分享组件</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)completionStartAnimationWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions&#123;</span><br><span class="line">    <span class="keyword">if</span> ([Login isLogin]) &#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *remoteNotification = [launchOptions valueForKey:<span class="built_in">UIApplicationLaunchOptionsRemoteNotificationKey</span>];</span><br><span class="line">        <span class="keyword">if</span> (remoteNotification) &#123;</span><br><span class="line">            [BaseViewController handleNotificationInfo:remoteNotification applicationState:<span class="built_in">UIApplicationStateInactive</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    UMENG 统计</span></span><br><span class="line">    [MobClick startWithAppkey:kUmeng_AppKey reportPolicy:BATCH channelId:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    UMENG Social Account</span></span><br><span class="line">    [UMSocialData setAppKey:kUmeng_AppKey];</span><br><span class="line">    [UMSocialWechatHandler setWXAppId:kSocial_WX_ID appSecret:kSocial_WX_Secret url:[<span class="built_in">NSObject</span> baseURLStr]];</span><br><span class="line">    [UMSocialQQHandler setQQWithAppId:kSocial_QQ_ID appKey:kSocial_QQ_Secret url:[<span class="built_in">NSObject</span> baseURLStr]];</span><br><span class="line">    [E<span class="built_in">NSession</span> setSharedSessionConsumerKey:kSocial_EN_Key consumerSecret:kSocial_EN_Secret optionalHost:<span class="literal">nil</span>];</span><br><span class="line">    [UMSocialSinaSSOHandler openNewSinaSSOWithRedirectURL:kSocial_Sina_RedirectURL];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    UMENG Social Config</span></span><br><span class="line">    [UMSocialConfig setFollowWeiboUids:@&#123;UMShareToSina : kSocial_Sina_OfficailAccount&#125;];<span class="comment">//设置默认关注官方账号</span></span><br><span class="line">    [UMSocialConfig setFinishToastIsHidden:<span class="literal">YES</span> position:UMSocialiToastPositionCenter];</span><br><span class="line">    [UMSocialConfig setNavigationBarConfig:^(<span class="built_in">UINavigationBar</span> *bar, <span class="built_in">UIButton</span> *closeButton, <span class="built_in">UIButton</span> *backButton, <span class="built_in">UIButton</span> *postButton, <span class="built_in">UIButton</span> *refreshButton, <span class="built_in">UINavigationItem</span> *navigationItem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bar) &#123;</span><br><span class="line">            [bar setBackgroundImage:[<span class="built_in">UIImage</span> imageWithColor:[<span class="built_in">UIColor</span> colorWithHexString:[<span class="built_in">NSObject</span> baseURLStrIsTest]? <span class="string">@"0x3bbd79"</span> : <span class="string">@"0x28303b"</span>]] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (navigationItem) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([[navigationItem titleView] isKindOfClass:[<span class="built_in">UILabel</span> class]]) &#123;</span><br><span class="line">                <span class="built_in">UILabel</span> *titleL = (<span class="built_in">UILabel</span> *)[navigationItem titleView];</span><br><span class="line">                titleL<span class="variable">.font</span> = [<span class="built_in">UIFont</span> boldSystemFontOfSize:kNavTitleFontSize];</span><br><span class="line">                titleL<span class="variable">.textColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    信鸽推送</span></span><br><span class="line">    [XGPush startApp:kXGPush_Id appKey:kXGPush_Key];</span><br><span class="line">    [Login setXGAccountWithCurUser];</span><br><span class="line">    <span class="comment">//注销之后需要再次注册前的准备</span></span><br><span class="line">    @weakify(<span class="keyword">self</span>);</span><br><span class="line">    <span class="keyword">void</span> (^successCallback)(<span class="keyword">void</span>) = ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">        <span class="comment">//如果变成需要注册状态</span></span><br><span class="line">        <span class="keyword">if</span>(![XGPush isUnRegisterStatus] &amp;&amp; [Login isLogin])&#123;</span><br><span class="line">            @strongify(<span class="keyword">self</span>);</span><br><span class="line">            [<span class="keyword">self</span> registerPush];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    [XGPush initForReregister:successCallback];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[XGPush registerPush];  //注册Push服务，注册后才能收到推送</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//推送反馈(app不在前台运行时，点击推送激活时。统计而已)</span></span><br><span class="line">    [XGPush handleLaunching:launchOptions];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillResignActive:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.</span></span><br><span class="line">    <span class="comment">// Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.</span></span><br><span class="line">    [[ImageSizeManager shareManager] save];</span><br><span class="line">    [[Tweet tweetForSend] saveSendData];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)applicationDidEnterBackground:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.</span></span><br><span class="line">    <span class="comment">// If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillEnterForeground:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  App Become Active 处理未读消息的操作</span><br><span class="line">            使用了clang push &amp; pop 用于保存和恢复编译器的状态，目的是消除当前的警告</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationDidBecomeActive:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.</span></span><br><span class="line">    <span class="keyword">if</span> ([Login isLogin]) &#123;</span><br><span class="line">        [[UnReadManager shareManager] updateUnRead];</span><br><span class="line">        <span class="built_in">UIViewController</span> *presentingVC = [BaseViewController presentingVC];</span><br><span class="line">        SEL selector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"refresh"</span>);</span><br><span class="line">        <span class="keyword">if</span> ([presentingVC isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"Message_RootViewController"</span>)]</span><br><span class="line">            &amp;&amp; [presentingVC respondsToSelector:selector]) &#123;</span><br><span class="line"><span class="preprocessor">#pragma clang diagnostic push</span></span><br><span class="line"><span class="preprocessor">#pragma clang diagnostic ignored <span class="title">"-Warc-performSelector-leaks"</span></span></span><br><span class="line">            [presentingVC performSelector:selector];</span><br><span class="line"><span class="preprocessor">#pragma clang diagnostic pop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  App终止程序是保存Core Data Context</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillTerminate:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Saves changes in the application's managed object context before the application terminates.</span></span><br><span class="line">    [<span class="keyword">self</span> saveContext];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  推送常用的函数处理</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#pragma mark - XGPush Message</span></span><br><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class="built_in">NSData</span> *)deviceToken</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> * deviceTokenStr = [XGPush registerDevice:deviceToken];</span><br><span class="line">    DebugLog(<span class="string">@"deviceTokenStr : %@"</span>, deviceTokenStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveRemoteNotification:(<span class="built_in">NSDictionary</span> *)userInfo</span><br><span class="line">&#123;</span><br><span class="line">    DebugLog(<span class="string">@"didReceiveRemoteNotification-userInfo:-----\n%@"</span>, userInfo);</span><br><span class="line">    [XGPush handleReceiveNotification:userInfo];</span><br><span class="line">    [BaseViewController handleNotificationInfo:userInfo applicationState:[application applicationState]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Methods Private</span></span><br><span class="line">- (<span class="keyword">void</span>)setupLoginViewController&#123;</span><br><span class="line">    LoginViewController *loginVC = [[LoginViewController alloc] init];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.window</span> setRootViewController:[[BaseNavigationController alloc] initWithRootViewController:loginVC]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupIntroductionViewController&#123;</span><br><span class="line">    IntroductionViewController *introductionVC = [[IntroductionViewController alloc] init];</span><br><span class="line"><span class="comment">//    [self.window setRootViewController:[[BaseNavigationController alloc] initWithRootViewController:introductionVC]];</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.window</span> setRootViewController:introductionVC];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupTabViewController&#123;</span><br><span class="line">    RootTabViewController *rootVC = [[RootTabViewController alloc] init];</span><br><span class="line">    rootVC<span class="variable">.tabBar</span><span class="variable">.translucent</span> = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.window</span> setRootViewController:rootVC];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)customizeInterface &#123;</span><br><span class="line">    <span class="comment">//设置Nav的背景色和title色</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UINavigationBar</span> *navigationBarAppearance = [<span class="built_in">UINavigationBar</span> appearance];</span><br><span class="line">    [navigationBarAppearance setBackgroundImage:[<span class="built_in">UIImage</span> imageWithColor:[<span class="built_in">UIColor</span> colorWithHexString:[<span class="built_in">NSObject</span> baseURLStrIsTest]? <span class="string">@"0x3bbd79"</span> : <span class="string">@"0x28303b"</span>]] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">    [navigationBarAppearance setTintColor:[<span class="built_in">UIColor</span> whiteColor]];<span class="comment">//返回按钮的箭头颜色</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *textAttributes = @&#123;</span><br><span class="line">                                     <span class="built_in">NSFontAttributeName</span>: [<span class="built_in">UIFont</span> boldSystemFontOfSize:kNavTitleFontSize],</span><br><span class="line">                                     <span class="built_in">NSForegroundColorAttributeName</span>: [<span class="built_in">UIColor</span> whiteColor],</span><br><span class="line">                                     &#125;;</span><br><span class="line">    [navigationBarAppearance setTitleTextAttributes:textAttributes];</span><br><span class="line"></span><br><span class="line">    [[<span class="built_in">UITextField</span> appearance] setTintColor:[<span class="built_in">UIColor</span> colorWithHexString:<span class="string">@"0x3bbc79"</span>]];<span class="comment">//设置UITextField的光标颜色</span></span><br><span class="line">    [[<span class="built_in">UITextView</span> appearance] setTintColor:[<span class="built_in">UIColor</span> colorWithHexString:<span class="string">@"0x3bbc79"</span>]];<span class="comment">//设置UITextView的光标颜色</span></span><br><span class="line">    [[<span class="built_in">UISearchBar</span> appearance] setBackgroundImage:[<span class="built_in">UIImage</span> imageWithColor:kColorTableSectionBg] forBarPosition:<span class="number">0</span> barMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  URL 模块情况分析</span><br><span class="line">            1.如果是包含coding-net:的情况且不是登录注册的链接，就是正常解析?VC:WebView</span><br><span class="line">            2.如果是包含coding-net:的情况且是登录注册的链接，那么就是从邮箱跳到Coding客户端，一种是重置密码邮件，一种是账号激活邮件</span><br><span class="line">            3.如果是包含en-:的情况是跳到Evernote的客户端</span><br><span class="line">            4.跳转到友盟客户端</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#pragma mark URL Schemes</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application openURL:(<span class="built_in">NSURL</span> *)url sourceApplication:(<span class="built_in">NSString</span> *)sourceApplication annotation:(<span class="keyword">id</span>)annotation&#123;</span><br><span class="line">    DebugLog(<span class="string">@"path: %@, params: %@"</span>, [url path], [url queryParams]);</span><br><span class="line">    <span class="keyword">if</span> ([url<span class="variable">.absoluteString</span> hasPrefix:kCodingAppScheme]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (![<span class="keyword">self</span> showPasswordWithURL:url]) &#123;<span class="comment">//如果不是登录注册的链接，就是用正常的解析模式解析</span></span><br><span class="line">            [BaseViewController presentLinkStr:url<span class="variable">.absoluteString</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([url<span class="variable">.absoluteString</span> hasPrefix:<span class="string">@"en-:"</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span> [[E<span class="built_in">NSession</span> sharedSession] handleOpenURL:url];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  [UMSocialSnsService handleOpenURL:url];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  通过对URL中的关键词分析从而启动应用，并且使用GCD占据主线程弹出临时会话的VC</span><br><span class="line">            主要实现的是对重置密码和注册后账号激活，从邮箱App跳到Coding客户端的操作</span><br><span class="line">            成功自动销毁线程回到主线程，方法很赞！</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)showPasswordWithURL:(<span class="built_in">NSURL</span> *)url&#123;</span><br><span class="line">    PasswordType type;</span><br><span class="line">    <span class="built_in">NSString</span> *email, *key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([[url lastPathComponent] isEqualToString:<span class="string">@"resetPassword"</span>]) &#123;</span><br><span class="line">        type = PasswordReset;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([[url lastPathComponent] isEqualToString:<span class="string">@"activate"</span>])&#123;</span><br><span class="line">        type = PasswordActivate;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    email = [[url queryParams] objectForKey:<span class="string">@"email"</span>];</span><br><span class="line">    key = [[url queryParams] objectForKey:<span class="string">@"key"</span>];</span><br><span class="line">    <span class="keyword">if</span> (email<span class="variable">.length</span> &lt;= <span class="number">0</span> || key<span class="variable">.length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//弹出临时会话</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">0.3</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        PasswordViewController *vc = [PasswordViewController passwordVCWithType:type email:[email URLDecoding] andKey:key];</span><br><span class="line">        vc<span class="variable">.successBlock</span> = ^(PasswordViewController *presentVC, <span class="keyword">id</span> data)&#123;</span><br><span class="line">            [presentVC dismissViewControllerAnimated:<span class="literal">YES</span> completion:^&#123;</span><br><span class="line">                <span class="built_in">NSString</span> *tipStr;</span><br><span class="line">                <span class="keyword">switch</span> (presentVC<span class="variable">.type</span>) &#123;</span><br><span class="line">                    <span class="keyword">case</span> PasswordReset:</span><br><span class="line">                        tipStr = <span class="string">@"修改密码成功～"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> PasswordActivate:</span><br><span class="line">                        tipStr = <span class="string">@"账号激活成功～"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        tipStr = <span class="string">@"操作成功"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                kTipAlert(<span class="string">@"%@"</span>, tipStr);</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;;</span><br><span class="line">        [BaseViewController presentVC:vc];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Methods Core Data</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)saveContext</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSManagedObjectContext</span> *managedObjectContext = <span class="keyword">self</span><span class="variable">.managedObjectContext</span>;</span><br><span class="line">    <span class="keyword">if</span> (managedObjectContext != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([managedObjectContext hasChanges] &amp;&amp; ![managedObjectContext save:&amp;error]) &#123;</span><br><span class="line">             <span class="comment">// Replace this implementation with code to handle the error appropriately.</span></span><br><span class="line">             <span class="comment">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span></span><br><span class="line">            DebugLog(<span class="string">@"Unresolved error %@, %@"</span>, error, [error userInfo]);</span><br><span class="line">            abort();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Core Data stack</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the managed object context for the application.</span></span><br><span class="line"><span class="comment">// If the context doesn't already exist, it is created and bound to the persistent store coordinator for the application.</span></span><br><span class="line">- (<span class="built_in">NSManagedObjectContext</span> *)managedObjectContext</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_managedObjectContext != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _managedObjectContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSPersistentStoreCoordinator</span> *coordinator = [<span class="keyword">self</span> persistentStoreCoordinator];</span><br><span class="line">    <span class="keyword">if</span> (coordinator != <span class="literal">nil</span>) &#123;</span><br><span class="line">        _managedObjectContext = [[<span class="built_in">NSManagedObjectContext</span> alloc] init];</span><br><span class="line">        [_managedObjectContext setPersistentStoreCoordinator:coordinator];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _managedObjectContext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the managed object model for the application.</span></span><br><span class="line"><span class="comment">// If the model doesn't already exist, it is created from the application's model.</span></span><br><span class="line">- (<span class="built_in">NSManagedObjectModel</span> *)managedObjectModel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_managedObjectModel != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _managedObjectModel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSURL</span> *modelURL = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"Coding_iOS"</span> withExtension:<span class="string">@"momd"</span>];</span><br><span class="line">    _managedObjectModel = [[<span class="built_in">NSManagedObjectModel</span> alloc] initWithContentsOfURL:modelURL];</span><br><span class="line">    <span class="keyword">return</span> _managedObjectModel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the persistent store coordinator for the application.</span></span><br><span class="line"><span class="comment">// If the coordinator doesn't already exist, it is created and the application's store added to it.</span></span><br><span class="line">- (<span class="built_in">NSPersistentStoreCoordinator</span> *)persistentStoreCoordinator</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_persistentStoreCoordinator != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _persistentStoreCoordinator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSURL</span> *storeURL = [[<span class="keyword">self</span> applicationDocumentsDirectory] URLByAppendingPathComponent:<span class="string">@"Coding_iOS.sqlite"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    _persistentStoreCoordinator = [[<span class="built_in">NSPersistentStoreCoordinator</span> alloc] initWithManagedObjectModel:[<span class="keyword">self</span> managedObjectModel]];</span><br><span class="line">    <span class="keyword">if</span> (![_persistentStoreCoordinator addPersistentStoreWithType:<span class="built_in">NSSQLiteStoreType</span> configuration:<span class="literal">nil</span> URL:storeURL options:<span class="literal">nil</span> error:&amp;error]) &#123;</span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         Replace this implementation with code to handle the error appropriately.</span><br><span class="line"></span><br><span class="line">         abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span><br><span class="line"></span><br><span class="line">         Typical reasons for an error here include:</span><br><span class="line">         * The persistent store is not accessible;</span><br><span class="line">         * The schema for the persistent store is incompatible with current managed object model.</span><br><span class="line">         Check the error message to determine what the actual problem was.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         If the persistent store is not accessible, there is typically something wrong with the file path. Often, a file URL is pointing into the application's resources directory instead of a writeable directory.</span><br><span class="line"></span><br><span class="line">         If you encounter schema incompatibility errors during development, you can reduce their frequency by:</span><br><span class="line">         * Simply deleting the existing store:</span><br><span class="line">         [[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]</span><br><span class="line"></span><br><span class="line">         * Performing automatic lightweight migration by passing the following dictionary as the options parameter:</span><br><span class="line">         @&#123;NSMigratePersistentStoresAutomaticallyOption:@YES, NSInferMappingModelAutomaticallyOption:@YES&#125;</span><br><span class="line"></span><br><span class="line">         Lightweight migration will only work for a limited set of schema changes; consult "Core Data Model Versioning and Data Migration Programming Guide" for details.</span><br><span class="line"></span><br><span class="line">         */</span></span><br><span class="line">        DebugLog(<span class="string">@"Unresolved error %@, %@"</span>, error, [error userInfo]);</span><br><span class="line">        abort();</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _persistentStoreCoordinator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Application's Documents directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the URL to the application's Documents directory.</span></span><br><span class="line">- (<span class="built_in">NSURL</span> *)applicationDocumentsDirectory</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">NSFileManager</span> defaultManager] URLsForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomains:<span class="built_in">NSUserDomainMask</span>] lastObject];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h3><p><a href="https://coding.]]>
    </summary>
    
      <category term="Coding源码" scheme="http://yeziahehe.com/tags/Coding%E6%BA%90%E7%A0%81/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objc中国学习--架构]]></title>
    <link href="http://yeziahehe.com/2015/09/27/2015-09-27-Objc%E5%AD%A6%E4%B9%A0--%E6%9E%B6%E6%9E%84/"/>
    <id>http://yeziahehe.com/2015/09/27/2015-09-27-Objc学习--架构/</id>
    <published>2015-09-27T15:23:51.000Z</published>
    <updated>2015-12-16T15:27:18.000Z</updated>
    <content type="html"><![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="u67B6_u6784"><a href="#u67B6_u6784" class="headerlink" title="架构"></a>架构</h3><ul>
<li><p>MVVM 介绍</p>
</li>
<li><p>避免滥用单例</p>
</li>
<li><p>iOS 中的行为</p>
</li>
<li><p>子类</p>
</li>
<li><p>使用 VIPER 构建 iOS 应用</p>
</li>
</ul>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><blockquote>
<p>mvvm是Model-View-ViewModel，将 Model 数据转换为 View 可以呈现的东西的事情。</p>
<p>通俗的讲，为<strong>胖的数值层，瘦的对象层</strong>。</p>
</blockquote>
<p>通过结合<a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">ReactiveCocoa</a>便利性，这个模式提供了一个很好的代替MVC的方案，它保证了让视图控制器的轻量性。</p>
<p>View-Model 作为一个表现视图显示自身所需数据的静态模型；但它也有收集，解释和转换那些数据的责任。这留给了 view (controller) 一个更加清晰明确的任务：呈现由 view-model 提供的数据。</p>
<p>现在视图控制器仅关注于用 view-model 的数据配置和管理各种各样的视图，并在先关用户输入时让 view-model 获知并需要向上游修改数据. 视图控制器不需要了解关于网络服务调用，Core Data，模型对象等。</p>
<p>我们一般认为可以这样来处理：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                   -<span class="ruby"> <span class="constant">View</span></span><br><span class="line"></span>Foundation - UIKit - Controller</span><br><span class="line">           -<span class="ruby"> <span class="constant">Other</span> - <span class="constant">Network</span>     -</span><br><span class="line"></span>                   -<span class="ruby"> <span class="constant">Bussiness</span>   - <span class="constant">View</span> <span class="constant">Model</span></span><br><span class="line"></span>                   -<span class="ruby"> <span class="constant">Persistence</span> -</span></span><br></pre></td></tr></table></figure>
<p>MVVM模式中的三部分比MVC更加简洁，下面是一些严格的限制</p>
<ol>
<li>View引用了ViewModel，但反过来不行。</li>
<li>ViewModel引用了Model，但反过来不行。</li>
</ol>
<p>如果我们破坏了这些规则，便无法正确地使用MVVM。</p>
<h3 id="ReactiveCocoa"><a href="#ReactiveCocoa" class="headerlink" title="ReactiveCocoa"></a>ReactiveCocoa</h3><p>在编写iOS代码时，我们的大部分代码都是在响应一些事件：按钮点击、接收网络消息、属性变化等等。但是这些事件在代码中的表现形式却不一样：(我在某一张提到过)如target-action、Delegate、KVO、Block等。ReactiveCocoa的目的就是定义一个统一的事件处理接口，这样它们可以非常简单地进行链接、过滤和组合。ReactiveCocoa被当成是函数响应编程(Functional Reactive Programming，FRP)框架。</p>
<h4 id="RACSignal__uFF08_u4FE1_u53F7_uFF09"><a href="#RACSignal__uFF08_u4FE1_u53F7_uFF09" class="headerlink" title="RACSignal （信号）"></a>RACSignal （信号）</h4><p>RACSignal (信号)就 RAC 来说是构造单元。 它代表我们最终将要收到的信息。当你能将未来某时刻收到的消息具体表示出来时， 你可以开始预先(陈述性)运用逻辑并构建你的信息流,而不是必须等到事件发生(命令式)。</p>
<p>信号类(RACSiganl)，只是表示当数据改变时，信号内部会发出数据，它本身不具备发送信号的能力，而是交给内部一个订阅者去发出。</p>
<p>默认一个信号都是冷信号，也就是值改变了，也不会触发，只有订阅了这个信号，这个信号才会变为热信号，值改变了才会触发。</p>
<p>如何订阅信号：调用信号RACSignal的subscribeNext就能订阅。</p>
<p>采用block的形式将信号发送一个事件流到它们的订阅者中。我们需要知道三种类型的事件：next，error和completed。一个信号可能由于error事件或completed事件而终止，在此之前它会发送很多个next事件。在这一部分中，我们将重点关注next事件。</p>
<p>ReactiveCocoa的核心是信号，它是一个事件流。使用ReactiveCocoa时，对于同一个问题，可能会有多种不同的方法来解决。ReactiveCocoa的目的就是为了简化我们的代码并更容易理解。</p>
<p>用 <code>@weakify/@strongify</code> 宏切换 strong 和 weak。这在创建所有这些 block 时非常重要。在 RAC 的 block 中使用 self 时将会被捕获为强引用并得到保留环， 除非你尤其意识到要破除保留环。</p>
<p>View 与 View Model 绑定</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RACSignal使用步骤：</span></span><br><span class="line">    <span class="comment">// 1.创建信号 + (RACSignal *)createSignal:(RACDisposable * (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe</span></span><br><span class="line">    <span class="comment">// 2.发送信号 - (void)sendNext:(id)value</span></span><br><span class="line">    <span class="comment">// 3.订阅信号,才会激活信号. - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RACSignal底层实现：</span></span><br><span class="line">    <span class="comment">// 1.创建信号，首先把didSubscribe保存到信号中，还不会触发。</span></span><br><span class="line">    <span class="comment">// 2.当信号被订阅，也就是调用signal的subscribeNext:nextBlock</span></span><br><span class="line">    <span class="comment">// 2.2 subscribeNext内部会创建订阅者subscriber，并且把nextBlock保存到subscriber中。</span></span><br><span class="line">    <span class="comment">// 2.1 subscribeNext内部会调用siganl的didSubscribe</span></span><br><span class="line">    <span class="comment">// 3.siganl的didSubscribe中调用[subscriber sendNext:@1];</span></span><br><span class="line">    <span class="comment">// 3.1 sendNext底层其实就是执行subscriber的nextBlock</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建信号</span></span><br><span class="line">    RACSignal *siganl = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// block调用时刻：每当有订阅者订阅信号，就会调用block。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.发送信号</span></span><br><span class="line">        [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不在发送数据，最好发送信号完成，内部会自动调用[RACDisposable disposable]取消订阅信号。</span></span><br><span class="line">        [subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// block调用时刻：当信号发送完成或者发送错误，就会自动执行这个block,取消订阅信号。</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行完Block后，当前信号就不在被订阅了。</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"信号被销毁"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.订阅信号,才会激活信号.</span></span><br><span class="line">    [siganl subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="comment">// block调用时刻：每当有信号发出数据，就会调用block.</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"接收到数据:%@"</span>,x);</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<h4 id="RACReplaySubject"><a href="#RACReplaySubject" class="headerlink" title="RACReplaySubject"></a>RACReplaySubject</h4><p>RACReplaySubject:重复提供信号者，RACSubject的子类。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RACSubject使用步骤</span></span><br><span class="line">    <span class="comment">// 1.创建信号 [RACSubject subject]，跟RACSiganl不一样，创建信号时没有block。</span></span><br><span class="line">    <span class="comment">// 2.订阅信号 - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock</span></span><br><span class="line">    <span class="comment">// 3.发送信号 sendNext:(id)value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RACSubject:底层实现和RACSignal不一样。</span></span><br><span class="line">    <span class="comment">// 1.调用subscribeNext订阅信号，只是把订阅者保存起来，并且订阅者的nextBlock已经赋值了。</span></span><br><span class="line">    <span class="comment">// 2.调用sendNext发送信号，遍历刚刚保存的所有订阅者，一个一个调用订阅者的nextBlock。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建信号</span></span><br><span class="line">    RACSubject *subject = [RACSubject subject];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.订阅信号</span></span><br><span class="line">    [subject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="comment">// block调用时刻：当信号发出新值，就会调用.</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"第一个订阅者%@"</span>,x);</span><br><span class="line">    &#125;];</span><br><span class="line">    [subject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="comment">// block调用时刻：当信号发出新值，就会调用.</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"第二个订阅者%@"</span>,x);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.发送信号</span></span><br><span class="line">    [subject sendNext:<span class="string">@"1"</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RACReplaySubject使用步骤:</span></span><br><span class="line">    <span class="comment">// 1.创建信号 [RACSubject subject]，跟RACSiganl不一样，创建信号时没有block。</span></span><br><span class="line">    <span class="comment">// 2.可以先订阅信号，也可以先发送信号。</span></span><br><span class="line">    <span class="comment">// 2.1 订阅信号 - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock</span></span><br><span class="line">    <span class="comment">// 2.2 发送信号 sendNext:(id)value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RACReplaySubject:底层实现和RACSubject不一样。</span></span><br><span class="line">    <span class="comment">// 1.调用sendNext发送信号，把值保存起来，然后遍历刚刚保存的所有订阅者，一个一个调用订阅者的nextBlock。</span></span><br><span class="line">    <span class="comment">// 2.调用subscribeNext订阅信号，遍历保存的所有值，一个一个调用订阅者的nextBlock</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果想当一个信号被订阅，就重复播放之前所有值，需要先发送信号，在订阅信号。</span></span><br><span class="line">    <span class="comment">// 也就是先保存值，在订阅值。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建信号</span></span><br><span class="line">    RACReplaySubject *replaySubject = [RACReplaySubject subject];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.发送信号</span></span><br><span class="line">    [replaySubject sendNext:@<span class="number">1</span>];</span><br><span class="line">    [replaySubject sendNext:@<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.订阅信号</span></span><br><span class="line">    [replaySubject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"第一个订阅者接收到的数据%@"</span>,x);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅信号</span></span><br><span class="line">    [replaySubject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"第二个订阅者接收到的数据%@"</span>,x);</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<h4 id="RACCommand"><a href="#RACCommand" class="headerlink" title="RACCommand"></a>RACCommand</h4><p>RACCommand:RAC中用于处理事件的类，可以把事件如何处理,事件中的数据如何传递，包装到这个类中，他可以很方便的监控事件的执行过程。</p>
<p>使用场景:监听按钮点击，网络请求</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一、RACCommand使用步骤:</span></span><br><span class="line">   <span class="comment">// 1.创建命令 initWithSignalBlock:(RACSignal * (^)(id input))signalBlock</span></span><br><span class="line">   <span class="comment">// 2.在signalBlock中，创建RACSignal，并且作为signalBlock的返回值</span></span><br><span class="line">   <span class="comment">// 3.执行命令 - (RACSignal *)execute:(id)input</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 二、RACCommand使用注意:</span></span><br><span class="line">   <span class="comment">// 1.signalBlock必须要返回一个信号，不能传nil.</span></span><br><span class="line">   <span class="comment">// 2.如果不想要传递信号，直接创建空的信号[RACSignal empty];</span></span><br><span class="line">   <span class="comment">// 3.RACCommand中信号如果数据传递完，必须调用[subscriber sendCompleted]，这时命令才会执行完毕，否则永远处于执行中。</span></span><br><span class="line">   <span class="comment">// 4.RACCommand需要被强引用，否则接收不到RACCommand中的信号，因此RACCommand中的信号是延迟发送的。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 三、RACCommand设计思想：内部signalBlock为什么要返回一个信号，这个信号有什么用。</span></span><br><span class="line">   <span class="comment">// 1.在RAC开发中，通常会把网络请求封装到RACCommand，直接执行某个RACCommand就能发送请求。</span></span><br><span class="line">   <span class="comment">// 2.当RACCommand内部请求到数据的时候，需要把请求的数据传递给外界，这时候就需要通过signalBlock返回的信号传递了。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 四、如何拿到RACCommand中返回信号发出的数据。</span></span><br><span class="line">   <span class="comment">// 1.RACCommand有个执行信号源executionSignals，这个是signal of signals(信号的信号),意思是信号发出的数据是信号，不是普通的类型。</span></span><br><span class="line">   <span class="comment">// 2.订阅executionSignals就能拿到RACCommand中返回的信号，然后订阅signalBlock返回的信号，就能获取发出的值。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 五、监听当前命令是否正在执行executing</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 六、使用场景,监听按钮点击，网络请求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 1.创建命令</span></span><br><span class="line">   RACCommand *command = [[RACCommand alloc] initWithSignalBlock:^RACSignal*(<span class="keyword">id</span> input) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"执行命令"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建空信号,必须返回信号</span></span><br><span class="line">       <span class="comment">//        return [RACSignal empty];</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.创建信号,用来传递数据</span></span><br><span class="line">       <span class="keyword">return</span> [RACSignal createSignal:^RACDisposable*(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"></span><br><span class="line">           [subscriber sendNext:<span class="string">@"请求数据"</span>];</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 注意：数据传递完，最好调用sendCompleted，这时命令才执行完毕。</span></span><br><span class="line">           [subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">       &#125;];</span><br><span class="line"></span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 强引用命令，不要被销毁，否则接收不到数据</span></span><br><span class="line">   _conmmand = command;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3.执行命令</span></span><br><span class="line">   [<span class="keyword">self</span><span class="variable">.conmmand</span> execute:@<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 4.订阅RACCommand中的信号</span></span><br><span class="line">   [command<span class="variable">.executionSignals</span> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">       [x subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</span><br><span class="line">       &#125;];</span><br><span class="line"></span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// RAC高级用法</span></span><br><span class="line">   <span class="comment">// switchToLatest:用于signal of signals，获取signal of signals发出的最新信号,也就是可以直接拿到RACCommand中的信号</span></span><br><span class="line">   [command<span class="variable">.executionSignals</span><span class="variable">.switchToLatest</span> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 5.监听命令是否执行完毕,默认会来一次，可以直接跳过，skip表示跳过第一次信号。</span></span><br><span class="line">   [[command<span class="variable">.executing</span> skip:<span class="number">1</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> ([x boolValue] == <span class="literal">YES</span>) &#123;</span><br><span class="line">           <span class="comment">// 正在执行</span></span><br><span class="line">           <span class="built_in">NSLog</span>(<span class="string">@"正在执行"</span>);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">// 执行完成</span></span><br><span class="line">           <span class="built_in">NSLog</span>(<span class="string">@"执行完成"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure>
<h4 id="u5BF9_u4E8E_u6D88_u606F_u673A_u5236_u7684_u5C01_u88C5"><a href="#u5BF9_u4E8E_u6D88_u606F_u673A_u5236_u7684_u5C01_u88C5" class="headerlink" title="对于消息机制的封装"></a>对于消息机制的封装</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KVO</span></span><br><span class="line">[RACObserve(<span class="keyword">self</span>, username) subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@" 成员变量 username 被修改成了：%@"</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// target-action</span></span><br><span class="line"><span class="keyword">self</span><span class="variable">.button</span><span class="variable">.rac_command</span> = [[RACCommand alloc] initWithSignalBlock:^RACSignal*(<span class="keyword">id</span> input) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@" 按钮被点击 "</span>);</span><br><span class="line">    <span class="keyword">return</span> [RACSignal empty];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notification</span></span><br><span class="line">[[[<span class="built_in">NSNotificationCenter</span> defaultCenter]</span><br><span class="line">    rac_addObserverForName:<span class="built_in">UIKeyboardDidChangeFrameNotification</span></span><br><span class="line">                    object:<span class="literal">nil</span>]</span><br><span class="line">    subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@" 键盘 Frame 改变 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delegate</span></span><br><span class="line">[[<span class="keyword">self</span> rac_signalForSelector:<span class="keyword">@selector</span>(viewWillAppear:)] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    debugLog(<span class="string">@"viewWillAppear 方法被调用 %@"</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h4 id="u5E38_u89C1_u7684_u65B9_u6CD5"><a href="#u5E38_u89C1_u7684_u65B9_u6CD5" class="headerlink" title="常见的方法"></a>常见的方法</h4><ol>
<li><p>代替代理:<br>rac_signalForSelector：用于替代代理。</p>
</li>
<li><p>代替KVO :<br>rac_valuesAndChangesForKeyPath：用于监听某个对象的属性改变。</p>
</li>
<li><p>监听事件:<br>rac_signalForControlEvents：用于监听某个事件。</p>
</li>
<li><p>代替通知:<br>rac_addObserverForName:用于监听某个通知。</p>
</li>
<li><p>监听文本框文字改变:<br>rac_textSignal:只要文本框发出改变就会发出这个信号。</p>
</li>
<li><p>处理当界面有多次请求时，需要都获取到数据时，才能展示界面<br>rac_liftSelector:withSignalsFromArray:Signals:当传入的Signals(信号数组)，每一个signal都至少sendNext过一次，就会去触发第一个selector参数的方法。<br> 使用注意：几个信号，参数一的方法就几个参数，每个参数对应信号发出的数据。</p>
</li>
</ol>
<p>Demo<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.代替代理</span></span><br><span class="line">   <span class="comment">// 需求：自定义redView,监听红色view中按钮点击</span></span><br><span class="line">   <span class="comment">// 之前都是需要通过代理监听，给红色View添加一个代理属性，点击按钮的时候，通知代理做事情</span></span><br><span class="line">   <span class="comment">// rac_signalForSelector:把调用某个对象的方法的信息转换成信号，就要调用这个方法，就会发送信号。</span></span><br><span class="line">   <span class="comment">// 这里表示只要redV调用btnClick:,就会发出信号，订阅就好了。</span></span><br><span class="line">   [[redV rac_signalForSelector:<span class="keyword">@selector</span>(btnClick:)] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"点击红色按钮"</span>);</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.KVO</span></span><br><span class="line">   <span class="comment">// 把监听redV的center属性改变转换成信号，只要值改变就会发送信号</span></span><br><span class="line">   <span class="comment">// observer:可以传入nil</span></span><br><span class="line">   [[redV rac_valuesAndChangesForKeyPath:<span class="string">@"center"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> observer:<span class="literal">nil</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</span><br><span class="line"></span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3.监听事件</span></span><br><span class="line">   <span class="comment">// 把按钮点击事件转换为信号，点击按钮，就会发送信号</span></span><br><span class="line">   [[<span class="keyword">self</span><span class="variable">.btn</span> rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"按钮被点击了"</span>);</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 4.代替通知</span></span><br><span class="line">   <span class="comment">// 把监听到的通知转换信号</span></span><br><span class="line">   [[[<span class="built_in">NSNotificationCenter</span> defaultCenter] rac_addObserverForName:<span class="built_in">UIKeyboardWillShowNotification</span> object:<span class="literal">nil</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"键盘弹出"</span>);</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 5.监听文本框的文字改变</span></span><br><span class="line">  [_textField<span class="variable">.rac_textSignal</span> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"文字改变了%@"</span>,x);</span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6.处理多个请求，都返回结果的时候，统一做处理.</span></span><br><span class="line">   RACSignal *request1 = [RACSignal createSignal:^RACDisposable*(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 发送请求1</span></span><br><span class="line">       [subscriber sendNext:<span class="string">@"发送请求1"</span>];</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   RACSignal *request2 = [RACSignal createSignal:^RACDisposable*(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">       <span class="comment">// 发送请求2</span></span><br><span class="line">       [subscriber sendNext:<span class="string">@"发送请求2"</span>];</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 使用注意：几个信号，参数一的方法就几个参数，每个参数对应信号发出的数据。</span></span><br><span class="line">   [<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(update<span class="built_in">UIWithR1</span>:r2:) withSignalsFromArray:@[request1,request2]];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新UI</span></span><br><span class="line">- (<span class="keyword">void</span>)update<span class="built_in">UIWithR1</span>:(<span class="keyword">id</span>)data r2:(<span class="keyword">id</span>)data1</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"更新UI%@  %@"</span>,data,data1);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u5355_u4F8B_u6A21_u5F0F"><a href="#u5355_u4F8B_u6A21_u5F0F" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote>
<p>单例设计模式确切的说就是一个类只有一个实例，有一个全局的接口来访问这个实例。当第一次载入的时候，它通常使用延时加载的方法创建单一实例。</p>
</blockquote>
<h3 id="VIPER"><a href="#VIPER" class="headerlink" title="VIPER"></a>VIPER</h3><blockquote>
<p>VIPER 可以是视图 (View)，交互器 (Interactor)，展示器 (Presenter)，实体 (Entity) 以及路由 (Routing) 的首字母缩写。简明架构将一个应用程序的逻辑结构划分为不同的责任层。这使得它更容易隔离依赖项 (如数据库)，也更容易测试各层间的边界处的交互。</p>
</blockquote>
<p>VIPER 的主要部分是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">视图：根据展示器的要求显示界面，并将用户输入反馈给展示器。</span><br><span class="line">交互器：包含由用例指定的业务逻辑。</span><br><span class="line">展示器：包含为显示（从交互器接受的内容）做的准备工作的相关视图逻辑，并对用户输入进行反馈（从交互器获取新数据）。</span><br><span class="line">实体：包含交互器要使用的基本模型对象。</span><br><span class="line">路由：包含用来描述屏幕显示和显示顺序的导航逻辑。</span><br></pre></td></tr></table></figure>
<h4 id="u4EA4_u4E92_u5668"><a href="#u4EA4_u4E92_u5668" class="headerlink" title="交互器"></a>交互器</h4><p>交互器在应用中代表着一个独立的用例。它具有业务逻辑以操纵模型对象（实体）执行特定的任务。交互器中的工作应当独立与任何用户界面。</p>
<h4 id="u5B9E_u4F53"><a href="#u5B9E_u4F53" class="headerlink" title="实体"></a>实体</h4><p>实体是被交互器操作的模型对象，并且它们只被交互器所操作。交互器永远不会传输实体至表现层 (比如说展示器)。</p>
<h4 id="u5C55_u793A_u5668"><a href="#u5C55_u793A_u5668" class="headerlink" title="展示器"></a>展示器</h4><p>展示器是一个主要包含了驱动用户界面的逻辑的 PONSO，它总是知道何时呈现用户界面。基于其收集来自用户交互的输入功能，它可以在合适的时候更新用户界面并向交互器发送请求。</p>
<h4 id="u89C6_u56FE"><a href="#u89C6_u56FE" class="headerlink" title="视图"></a>视图</h4><p>视图一般是被动的，它通常等待展示器下发需要显示的内容，而不会向其索取数据。视图（例如登录界面的登录视图控件）所定义的方法应该允许展示器在高度抽象的层次与之交流。展示器通过内容进行表达，而不关心那些内容所显示的样子。展示器不知道 UILabel，UIButton 等的存在，它只知道其中包含的内容以及何时需要显示。内容如何被显示是由视图来进行控制的。</p>
<h4 id="u8DEF_u7531"><a href="#u8DEF_u7531" class="headerlink" title="路由"></a>路由</h4><p>屏幕间的路径会在交互设计师创建的线框 (wireframes) 里进行定义。在 VIPER 中，路由是由两个部分来负责的：展示器和线框。一个线框对象包括 UIWindow，UINavigationController，UIViewController 等部分，它负责创建视图/视图控制器并将其装配到窗口中。</p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.objcio.cn/issue-13/" target="_blank" rel="external">#13 架构</a></p>
<p><a href="http://southpeak.github.io/blog/2014/08/02/reactivecocoazhi-nan-%5B%3F%5D-:xin-hao/" target="_blank" rel="external">ReactiveCocoa指南一：信号</a></p>
<p><a href="http://southpeak.github.io/blog/2014/08/02/reactivecocoazhi-nan-er-:twittersou-suo-shi-li/" target="_blank" rel="external">ReactiveCocoa指南二：Twitter搜索实例</a></p>
<p><a href="http://yulingtianxia.com/blog/2015/05/21/ReactiveCocoa-and-MVVM-an-Introduction/" target="_blank" rel="external">ReactiveCocoa-and-MVVM-an-Introduction</a></p>
<p><a href="http://southpeak.github.io/blog/2014/08/08/mvvmzhi-nan-yi-:flickrsou-suo-shi-li/" target="_blank" rel="external">MVVM指南一：Flickr搜索实例</a></p>
<p><a href="http://blog.devtang.com/blog/2014/02/11/reactivecocoa-introduction/" target="_blank" rel="external">ReactiveCocoa - iOS开发的新框架</a></p>
<p><a href="http://blog.csdn.net/abc649395594/article/details/46123379" target="_blank" rel="external">ReactiveCocoa框架菜鸟入门（三）——信号（Signal）与订阅者（Subscriber）</a></p>
<p><a href="http://www.superqq.com/blog/2015/06/13/ios-she-ji-mo-shi-xi-lie-:singleton-dan-li-mo-shi/" target="_blank" rel="external">iOS 设计模式系列：Singleton – 单例模式</a></p>
<p><a href="http://www.jianshu.com/p/87ef6720a096" target="_blank" rel="external">最快让你上手ReactiveCocoa之基础篇</a></p>
<p><a href="http://www.jianshu.com/p/e10e5ca413b7" target="_blank" rel="external">最快让你上手ReactiveCocoa之进阶篇</a></p>
<p><a href="http://yulingtianxia.com/blog/2014/07/29/reactivecocoa/" target="_blank" rel="external">ReactiveCocoa学习笔记</a></p>
<p><a href="http://limboy.me/ios/2013/12/27/reactivecocoa-2.html" target="_blank" rel="external">说说ReactiveCocoa 2</a></p>
<p><a href="http://supermao.cn/zhe-yang-hao-yong-de-reactivecocoagen-ben-ting-bu-xia-lai/" target="_blank" rel="external">这样好用的ReactiveCocoa，根本停不下来</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="u67B6_u6784"><a href="#u67B6_u6784" class="]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/tags/objc%E4%B8%AD%E5%9B%BD/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/categories/objc%E4%B8%AD%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objc中国学习--Views]]></title>
    <link href="http://yeziahehe.com/2015/09/24/2015-09-24-Objc%E5%AD%A6%E4%B9%A0--Views/"/>
    <id>http://yeziahehe.com/2015/09/24/2015-09-24-Objc学习--Views/</id>
    <published>2015-09-24T15:23:26.000Z</published>
    <updated>2015-12-16T15:23:39.000Z</updated>
    <content type="html"><![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h3><ul>
<li><p>卷首语</p>
</li>
<li><p>绘制像素到屏幕上</p>
</li>
<li><p>理解 Scroll Views</p>
</li>
<li><p>自定义 Collection View 布局</p>
</li>
<li><p>自定义控件</p>
</li>
<li><p>先进的自动布局工具箱</p>
</li>
</ul>
<h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><p>每个视图都有一个 <code>bounds</code> 和 <code>frame</code>。当布局一个界面时，我们需要处理视图的 <code>frame</code>。这允许我们放置并设置视图的大小。视图的 <code>frame</code> 和 <code>bounds</code> 的大小总是一样的，但是他们的 <code>origin</code> 有可能不同。</p>
<p>视图只关心一件事就是绘制它自己的 <code>content</code>。这个绘制发生在每个视图的 <code>drawRect:</code> 方法中。</p>
<p>在 <code>drawRect:</code> 方法被调用前，会为视图创建一个空白的图片来绘制 <code>content</code>。这个图片的坐标系统是视图的 <code>bounds</code>。几乎每个视图 <code>bounds</code> 的 <code>origin</code> 都是 {0，0}。</p>
<p>scroll view 的 <code>content size</code> 并不会改变其 <code>bounds</code> 的任何东西，所以这并不会影响 scroll view 如何组合自己的子视图。反而，<code>content size</code> 定义了可滚动区域。scroll view 的默认 <code>content size</code> 为 {w:0, h:0}。既然没有可滚动区域，用户是不可以滚动的，但是 scroll view 仍然会显示其 <code>bounds</code> 范围内所有的子视图。<br>当 <code>content size</code> 设置为比 <code>bounds</code> 大的时候，用户就可以滚动视图了。</p>
<p>contentInset 属性可以改变 content offset 的最大和最小值，这样便可以滚动出可滚动区域。</p>
<h3 id="Collection_View"><a href="#Collection_View" class="headerlink" title="Collection View"></a>Collection View</h3><p><code>layoutAttributesForElementsInRect</code>，collection view 调用这个方法并传递一个自身坐标系统中的矩形过去。</p>
<p>除了 cell，collection view 额外管理着两种视图：<code>supplementary views</code> 和 <code>decoration views</code>。</p>
<p>collection view 中的 <code>Supplementary views</code> 相当于 table view 的 section header 和 footer views。</p>
<h3 id="u81EA_u5B9A_u4E49_u63A7_u4EF6"><a href="#u81EA_u5B9A_u4E49_u63A7_u4EF6" class="headerlink" title="自定义控件"></a>自定义控件</h3><p>如果你真的选择了重写 <code>drawRect:</code>，确保检查内容模式。默认的模式是将内容缩放以填充视图的范围，这在当视图的 frame 改变时并不会重新绘制。</p>
<h4 id="u4EA4_u4E92_u6A21_u5F0F__28_u5F85_u66F4_u65B0_29"><a href="#u4EA4_u4E92_u6A21_u5F0F__28_u5F85_u66F4_u65B0_29" class="headerlink" title="交互模式 (待更新)"></a>交互模式 (待更新)</h4><ul>
<li>使用 Target-Action</li>
<li>使用 Delegate</li>
<li>使用 Block</li>
<li>使用 KVO</li>
<li>使用 Notification</li>
</ul>
<h3 id="u81EA_u52A8_u5E03_u5C40"><a href="#u81EA_u52A8_u5E03_u5C40" class="headerlink" title="自动布局"></a>自动布局</h3><p>更新约束 (updating constraints) 和布局视图 (laying out views)。</p>
<p>更新约束：这些布局将在实际设置视图的 frame 时被传递过去并被使用。你可以通过调用 <code>setNeedsUpdateConstraints</code> 来触发这个操作，同时，你对约束条件系统做出的任何改变都将自动触发这个方法。</p>
<p>你可以调用 <code>layoutIfNeeded</code> 来强制系统立即更新视图树的布局。</p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.objcio.cn/issue-3/" target="_blank" rel="external">#3 Views</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="Views"><a href="#Views" class="headerlink" ]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/tags/objc%E4%B8%AD%E5%9B%BD/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/categories/objc%E4%B8%AD%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Coding iOS客户端学习--项目框架(持续更新)]]></title>
    <link href="http://yeziahehe.com/2015/09/23/2015-09-23-Coding%20iOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%A6%E4%B9%A0--%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/"/>
    <id>http://yeziahehe.com/2015/09/23/2015-09-23-Coding iOS客户端学习--项目框架(持续更新)/</id>
    <published>2015-09-23T15:22:51.000Z</published>
    <updated>2015-12-16T15:23:11.000Z</updated>
    <content type="html"><![CDATA[<p>最近发现Android组同事都使用的Coding作为git合作，下载把玩后发现<a href="https://coding.net/u/coding/p/Coding-iOS/git" target="_blank" rel="external">Coding客户端</a>代码开源，准备做一次源码学习分析。</p>
<h3 id="u9879_u76EE_u67B6_u6784"><a href="#u9879_u76EE_u67B6_u6784" class="headerlink" title="项目架构"></a>项目架构</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">├── Coding_iOS</span><br><span class="line">│   ├── AppDelegate：入口类</span><br><span class="line">│   ├── Models：数据类</span><br><span class="line">│   ├── Views：视图类</span><br><span class="line">│   │   ├── CCell：所有的CollectionViewCell都在这里</span><br><span class="line">│   │   ├── Cell：所有的TableViewCell都在这里</span><br><span class="line">│   │   └── XXX：ListView（项目、动态、任务、讨论、文档、代码）和InputView（用于聊天和评论的输入框）</span><br><span class="line">│   ├── Controllers：控制器，对应app中的各个页面</span><br><span class="line">│   │   ├── Login：登录页面</span><br><span class="line">│   │   ├── RootControllers：登录后的根页面</span><br><span class="line">│   │   ├── MeSetting：设置信息页面</span><br><span class="line">│   │   └── XXX：其它页面</span><br><span class="line">│   ├── Images：app中用到的所有的图片都在这里</span><br><span class="line">│   ├── Resources：资源文件</span><br><span class="line">│   ├── Util：一些常用控件和Category、Manager之类</span><br><span class="line">│   │   ├── Common</span><br><span class="line">│   │   ├── Manager</span><br><span class="line">│   │   ├── OC_Category</span><br><span class="line">│   │   └── ObjcRuntime</span><br><span class="line">│   └── Vendor：用到的一些第三方类库，一般都有改动</span><br><span class="line">│       ├── AFNetworking</span><br><span class="line">│       ├── AGEmojiKeyboard</span><br><span class="line">│       ├── ASProgressPopUpView</span><br><span class="line">│       ├── ActionSheetPicker</span><br><span class="line">│       ├── FontAwesome+iOS</span><br><span class="line">│       ├── MJPhotoBrowser</span><br><span class="line">│       ├── MLEmojiLabel</span><br><span class="line">│       ├── NSDate+Helper</span><br><span class="line">│       ├── NSStringEmojize</span><br><span class="line">│       ├── PPiAwesomeButton</span><br><span class="line">│       ├── QBImagePickerController</span><br><span class="line">│       ├── RDVTabBarController</span><br><span class="line">│       ├── SMPageControl</span><br><span class="line">│       ├── SVPullToRefresh</span><br><span class="line">│       ├── SWTableViewCell</span><br><span class="line">│       ├── UMENG</span><br><span class="line">│       ├── UMessage<span class="emphasis">_Sdk_</span>1.1.0</span><br><span class="line">│       ├── XGPush</span><br><span class="line">│       ├── XTSegmentControl</span><br><span class="line">│       └── iCarousel</span><br><span class="line">└── Pods：项目使用了[<span class="link_label">CocoaPods</span>](<span class="link_url">http://code4app.com/article/cocoapods-install-usage</span>)这个类库管理工具</span><br></pre></td></tr></table></figure>
<h3 id="u67B6_u6784_u89E3_u91CA"><a href="#u67B6_u6784_u89E3_u91CA" class="headerlink" title="架构解释"></a>架构解释</h3><p>不断更新</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近发现Android组同事都使用的Coding作为git合作，下载把玩后发现<a href="https://coding.net/u/coding/p/Coding-iOS/git" target="_blank" rel="external">Coding客户端</a]]>
    </summary>
    
      <category term="Coding源码" scheme="http://yeziahehe.com/tags/Coding%E6%BA%90%E7%A0%81/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objc中国学习--并发编程]]></title>
    <link href="http://yeziahehe.com/2015/09/19/2015-09-19-Objc%E5%AD%A6%E4%B9%A0--%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://yeziahehe.com/2015/09/19/2015-09-19-Objc学习--并发编程/</id>
    <published>2015-09-19T15:21:37.000Z</published>
    <updated>2015-12-16T15:22:34.000Z</updated>
    <content type="html"><![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="u5E76_u53D1_u7F16_u7A0B"><a href="#u5E76_u53D1_u7F16_u7A0B" class="headerlink" title="并发编程"></a>并发编程</h3><ul>
<li><p>卷首语</p>
</li>
<li><p>并发编程：API 及挑战</p>
</li>
<li><p>常见的后台实践</p>
</li>
<li><p>底层并发 API</p>
</li>
<li><p>线程安全类的设计</p>
</li>
<li><p>测试并发程序</p>
</li>
</ul>
<h3 id="u7EBF_u7A0B"><a href="#u7EBF_u7A0B" class="headerlink" title="线程"></a>线程</h3><p>线程（thread）是组成进程的子单元，操作系统的调度器可以对线程进行单独的调度。实际上，所有的并发编程 API 都是构建于线程之上的 —— 包括 GCD 和操作队列（operation queues）。</p>
<p>直接使用线程可能会引发的一个问题是，如果你的代码和所基于的框架代码都创建自己的线程时，那么活动的线程数量有可能以指数级增长。这在大型工程中是一个常见问题。</p>
<p>接下来，我们将介绍两个基于队列的并发编程 API ：GCD 和 operation queue 。它们通过集中管理一个被大家协同使用的线程池，来解决上面遇到的问题。</p>
<h3 id="Grand_Central_Dispatch"><a href="#Grand_Central_Dispatch" class="headerlink" title="Grand Central Dispatch"></a>Grand Central Dispatch</h3><p>通过 GCD，开发者不用再直接跟线程打交道了，只需要向队列中添加代码块即可，GCD 在后端管理着一个线程池。GCD 不仅决定着你的代码块将在哪个线程被执行，它还根据可用的系统资源对这些线程进行管理。这样可以将开发者从线程管理的工作中解放出来，通过集中的管理线程，来缓解大量线程被创建的问题。</p>
<p>GCD 带来的另一个重要改变是，作为开发者可以将工作考虑为一个队列，而不是一堆线程，这种并行的抽象模型更容易掌握和使用。</p>
<p>GCD 公开有 5 个不同的队列：运行在主线程中的 main queue，3 个不同优先级的后台队列，以及一个优先级更低的后台队列（用于 I/O）。<br>另外，开发者可以创建自定义队列：串行或者并行队列。自定义队列非常强大，在自定义队列中被调度的所有 block 最终都将被放入到系统的全局队列中和线程池中。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">      <span class="comment">//单例模式，GCD应用的最多的模式</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Operation_Queues"><a href="#Operation_Queues" class="headerlink" title="Operation Queues"></a>Operation Queues</h3><p>操作队列（operation queue）是由 GCD 提供的一个队列模型的 Cocoa 抽象。GCD 提供了更加底层的控制，而操作队列则在 GCD 之上实现了一些方便的功能，这些功能对于 app 的开发者来说通常是最好最安全的选择。</p>
<p>NSOperationQueue 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 NSOperation 的子类来表述。</p>
<h3 id="Run_Loops"><a href="#Run_Loops" class="headerlink" title="Run Loops"></a>Run Loops</h3><p>Run loop并不像 GCD 或者操作队列那样是一种并发机制，因为它并不能并行执行任务。不过在主 dispatch/operation 队列中， run loop 将直接配合任务的执行，它提供了一种异步执行代码的机制。</p>
<p>Run loop 比起操作队列或者 GCD 来说容易使用得多，因为通过 run loop ，你不必处理并发中的复杂情况，就能异步地执行任务。</p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.objcio.cn/issue-2/" target="_blank" rel="external">#2 并发编程</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="u5E76_u53D1_u7F16_u7A0B"><a href="#u5E76_u5]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/tags/objc%E4%B8%AD%E5%9B%BD/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/categories/objc%E4%B8%AD%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objc中国学习--更轻量的 View Controllers]]></title>
    <link href="http://yeziahehe.com/2015/09/09/2015-09-09-Objc%E5%AD%A6%E4%B9%A0--%E6%9B%B4%E8%BD%BB%E9%87%8F%E7%9A%84%20View%20Controllers/"/>
    <id>http://yeziahehe.com/2015/09/09/2015-09-09-Objc学习--更轻量的 View Controllers/</id>
    <published>2015-09-09T15:19:20.000Z</published>
    <updated>2015-12-16T15:20:15.000Z</updated>
    <content type="html"><![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="u66F4_u8F7B_u91CF_u7684_View_Controllers"><a href="#u66F4_u8F7B_u91CF_u7684_View_Controllers" class="headerlink" title="更轻量的 View Controllers"></a>更轻量的 View Controllers</h3><ul>
<li><p>介绍</p>
</li>
<li><p>更轻量的 View Controllers</p>
</li>
<li><p>整洁的 Table View 代码</p>
</li>
<li><p>测试 View Controllers</p>
</li>
<li><p>View Controller 容器</p>
</li>
</ul>
<h3 id="NSCoding_u534F_u8BAE_NSKeyedArchiver_u5F52_u6863"><a href="#NSCoding_u534F_u8BAE_NSKeyedArchiver_u5F52_u6863" class="headerlink" title="NSCoding协议  NSKeyedArchiver归档"></a>NSCoding协议 <br> NSKeyedArchiver归档</h3><p>为了将应用数据存储到硬盘中实现数据持久化，iOS提供3种方法：</p>
<ul>
<li>属性列表：基本的文件API、Property List序列化</li>
<li>数据库：SQLite、CoreData</li>
<li>序列化：NSKeyedArchiver以及NSCoding</li>
</ul>
<p>对于轻量级的数据要求，NSCoding因其简单而成为一种比较合适的方式。 NSCoding是一个你需要在数据类上要实现的协议以支持数据类和数据流间的编码和解码。数据流可以持久化到硬盘。</p>
<p>使用NSCoding协议可以实现归档自定义的类，NSKeyedArchiver可以归档我们自定义的类。</p>
<p>归档 NSKeyedArchiver（又名序列化），把对象转为字节码，以文件的形式存储到磁盘上；程序运行过程中或者当再次重写打开程序的时候，可以通过解归档（反序列化）还原这些对象。</p>
<p>归档方式：</p>
<ul>
<li>对Foundation框架中对象进行归档  (一次只能归档一个对象，如果是多个对象归档需要分开进行)</li>
<li>对自定义的内容进行归档</li>
<li>对自定义的对象进行归档  (用到NSCoding协议，一次可以归档多个对象，通过归档的文件都是加密的)</li>
</ul>
<p>要实现自定义类的归档，需要实现encodeWithCoder(编码/序列化)和initWithCoder(解码/反序列化)。</p>
<p>要编码的对象，必须实现NSCoding协议。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSCoding</span></span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>) encoderWithCoder:(<span class="built_in">NSCoder</span> *) aCoder;<span class="comment">//保存</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">id</span>) initWithCoder:(<span class="built_in">NSCoder</span> *) aDecoder;<span class="comment">//加载</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>Mantle是一个意在减少写NSCoding样板文件的类库。如果你正在寻找更方便使用NSCoding代替Core Data创建model的方法，那Mantle值得一看。</p>
<p>可以参考我之前写的<a href="http://yeziahehe.com/ios/2015/08/10/objective-c%E4%B8%ADModel%E7%9A%84%E5%B0%81%E8%A3%85--Mantle%E5%AD%A6%E4%B9%A0.html">文章</a>。</p>
<h3 id="u628A_u7F51_u7EDC_u8BF7_u6C42_u903B_u8F91_u79FB_u5230_Model__u5C42"><a href="#u628A_u7F51_u7EDC_u8BF7_u6C42_u903B_u8F91_u79FB_u5230_Model__u5C42" class="headerlink" title="把网络请求逻辑移到 Model 层"></a>把网络请求逻辑移到 Model 层</h3><p>和上面的主题相似：不要在 view controller 中做网络请求的逻辑。取而代之，你应该将它们封装到另一个类中。这样，你的 view controller 就可以在之后通过使用带有回调（比如一个 completion 的 block）来请求网络了。这样的好处是，缓存和错误控制也可以在这个类里面完成。</p>
<h3 id="u8BA9_u4E8B_u60C5_u4FDD_u6301_u7B80_u5355"><a href="#u8BA9_u4E8B_u60C5_u4FDD_u6301_u7B80_u5355" class="headerlink" title="让事情保持简单"></a>让事情保持简单</h3><p>测试简单的事情很简单，同样，测试复杂的事会很复杂。就像我们在其他文章中指出的那样，让事情保持简单小巧总是好的。除此之外，它还有利于我们测试。</p>
<p>让我们来看看测试驱动开发（简称 TDD）。我们在这里不深入讨论，只是如果用 TDD，你得在写代码之前先写好测试。</p>
<p>通常，如果你发现有些地方很难做测试，这就说明你的设计出了问题，你应该重构它。</p>
<p>测试会被 build 成一个 bundle，其中包含一个动态库和你选择的资源文件。如果你要测试某些资源文件，你得把它们加到测试的 target 中，Xcode 就会将它们打包到一个 bundle 中。</p>
<p>Xcode 中的每个 scheme 定义了相应的测试 bundle 是哪个。通过 ⌘-R 运行程序，⌘-U 运行测试。</p>
<p>测试的运行依附于程序的运行，当程序运行时，测试 bundle 将被注入（injected）。测试时，你可能不想让你的程序做太多的事，那样会对测试造成干扰。可以把下面的代码加到 app delegate 中：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">BOOL</span> isRunningTests(<span class="keyword">void</span>) __attribute__((<span class="keyword">const</span>));</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">        didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (isRunningTests()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Normal logic goes here</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">BOOL</span> isRunningTests(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSDictionary</span>* environment = [[<span class="built_in">NSProcessInfo</span> processInfo] environment];</span><br><span class="line">    <span class="built_in">NSString</span>* injectBundle = environment[<span class="string">@"XCInjectBundle"</span>];</span><br><span class="line">    <span class="keyword">return</span> [[injectBundle pathExtension] isEqualToString:<span class="string">@"octest"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://objccn.io/issue-1/" target="_blank" rel="external">#1 更轻量的 View Controllers</a></p>
<p><a href="http://onevcat.com/2014/02/ios-test-with-kiwi/" target="_blank" rel="external">TDD的iOS开发初步以及Kiwi使用入门Kiwi</a></p>
<p><a href="http://www.onevcat.com/2014/05/kiwi-mock-stub-test/" target="_blank" rel="external">Kiwi 使用进阶 Mock, Stub, 参数捕获和异步测试</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="u66F4_u8F7B_u91CF_u7684_View_Controllers"><]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/tags/objc%E4%B8%AD%E5%9B%BD/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/categories/objc%E4%B8%AD%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objective-c中Model的封装--Mantle学习]]></title>
    <link href="http://yeziahehe.com/2015/08/10/2015-08-10-objective-c%E4%B8%ADModel%E7%9A%84%E5%B0%81%E8%A3%85--Mantle%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yeziahehe.com/2015/08/10/2015-08-10-objective-c中Model的封装--Mantle学习/</id>
    <published>2015-08-10T15:18:30.000Z</published>
    <updated>2015-12-16T15:19:06.000Z</updated>
    <content type="html"><![CDATA[<p>今天看到了<a href="https://github.com/Mantle/Mantle" target="_blank" rel="external">Mantle</a>的开源库，于是对于objective-c中model的封装进行了思考。</p>
<h3 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h3><p>在开发的过程中，我们常常会从网络获取数据，而数据通常又为JSON格式。 这时比较常见的做法是把JSON数据转为Model对象，这样我们可以从Model对象的属性读取数据。 但是常常会面临如下一些问题:</p>
<ul>
<li><p>每次都要用 -initWithDictionarty:(NSDictionary *)dict 等类似的方法初始化，把JSON数据里的值一个一个的赋值给Modeld对象的属性，做重复的工作。</p>
</li>
<li><p>当你需要的某个数据在JSON字典数据里层次很深时，需要不断的使用 [[obj objectForKey:@”key”] objectAtIndex:index] objectForKey:@””]… 这样很长的代码。</p>
</li>
<li><p>服务器给你返回的数据不是你期望的，例如：有些时候你需要的是一个NSString类型，但给你的是一个NSNumber。 有时你需要的是一个NSDate类型，但给你的是一个NSString类型，你还不得不去做一些判断，写一些转换的代码。还有一种严重的情况，由于服务器故障，给你返回了一个NSNull，如果你没有做一些判断处理，那么这时你的程序崩溃的几率很大！</p>
</li>
</ul>
<h3 id="u6211_u7684Model_u5904_u7406_u529E_u6CD5"><a href="#u6211_u7684Model_u5904_u7406_u529E_u6CD5" class="headerlink" title="我的Model处理办法"></a>我的Model处理办法</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  BaseModel.m</span></span><br><span class="line"><span class="comment">//  BOEFace</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 叶帆 on 15/6/15.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2015年 叶帆. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"BaseModel.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BaseModel</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithDict:(<span class="built_in">NSDictionary</span> *)dict &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">NSString</span> *key <span class="keyword">in</span> [dict allKeys]) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *value = [dict objectForKey:key];</span><br><span class="line">            <span class="keyword">if</span>([value isKindOfClass:[<span class="built_in">NSNumber</span> class]])</span><br><span class="line">                value = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,value];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>([value isKindOfClass:[<span class="built_in">NSNull</span> class]])</span><br><span class="line">                value = <span class="string">@""</span>;</span><br><span class="line">            <span class="keyword">@try</span> &#123;</span><br><span class="line">                [<span class="keyword">self</span> setValue:value forKey:key];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"试图添加不存在的key:%@到实例:%@中."</span>,key,<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> class]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>首先看到的是我封装了一个BaseModel的类出来，对于其中的数字和空类型都做了处理，这种方法很大程度上解决了Model数据中nil类型引起崩溃的情况，但是缺点就是所有的类型都被转变成了NSString类型，这样的处理方式会使得在使用Model数据的时候类型转换产生部分问题。</p>
<h3 id="Mantle"><a href="#Mantle" class="headerlink" title="Mantle"></a>Mantle</h3><p>Mantle框架在处理上述提出的问题中做了很好的优化，下面我们来认识一下Mantle。</p>
<p>首先github官方是这么描述的：</p>
<blockquote>
<p>Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天看到了<a href="https://github.com/Mantle/Mantle" target="_blank" rel="external">Mantle</a>的开源库，于是对于objective-c中model的封装进行了思考。</p>
<h3 id="]]>
    </summary>
    
      <category term="Mantle" scheme="http://yeziahehe.com/tags/Mantle/"/>
    
      <category term="Model" scheme="http://yeziahehe.com/tags/Model/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AFNetworking学习、封装]]></title>
    <link href="http://yeziahehe.com/2015/08/08/2015-08-08-AFNetworking%202.0%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E3%80%81%E5%B0%81%E8%A3%85/"/>
    <id>http://yeziahehe.com/2015/08/08/2015-08-08-AFNetworking 2.0框架学习、封装/</id>
    <published>2015-08-08T15:15:11.000Z</published>
    <updated>2015-12-16T15:17:06.000Z</updated>
    <content type="html"><![CDATA[<p>最近项目从自己的网络框架换到了AFNetworking，集中学习了一下，并且进行了一次封装。<br>首先先附上AFNetworking的地址:<a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">https://github.com/AFNetworking/AFNetworking</a><br>，star已经19078，确实ios中性能最好最强大的网络库。以及官方的文档<a href="https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-2.0-Migration-Guide" target="_blank" rel="external">AFNetworking-2.0-Migration-Guide</a></p>
<p>使用方法推荐<a href="http://code4app.com/article/cocoapods-install-usage" target="_blank" rel="external">Cocoapods</a></p>
<p>Podfile</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">platform :ios, '7.0'</span><br><span class="line">pod "AFNetworking", "~&gt; 2.0"</span><br></pre></td></tr></table></figure>
<p>下面主要介绍的AFNetworking 2.0的一些新特性:</p>
<h3 id="1-AFURLSessionManager"><a href="#1-AFURLSessionManager" class="headerlink" title="1.AFURLSessionManager"></a>1.AFURLSessionManager</h3><p>AFURLSessionManager是2.0的新特性，是基于NSURLSessionConfiguration(IOS 7.0+, MAC OX10_9+)的。</p>
<p>我们主要借助于这个类进行一次自己的封装，首先我们先来学习一下这个类。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AFURLSessionManager.h</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Copyright (c) 2013-2015 AFNetworking (http://afnetworking.com)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Permission is hereby granted, free of charge, to any person obtaining a copy</span></span><br><span class="line"><span class="comment">// of this software and associated documentation files (the "Software"), to deal</span></span><br><span class="line"><span class="comment">// in the Software without restriction, including without limitation the rights</span></span><br><span class="line"><span class="comment">// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span></span><br><span class="line"><span class="comment">// copies of the Software, and to permit persons to whom the Software is</span></span><br><span class="line"><span class="comment">// furnished to do so, subject to the following conditions:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The above copyright notice and this permission notice shall be included in</span></span><br><span class="line"><span class="comment">// all copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></span><br><span class="line"><span class="comment">// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></span><br><span class="line"><span class="comment">// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></span><br><span class="line"><span class="comment">// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></span><br><span class="line"><span class="comment">// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></span><br><span class="line"><span class="comment">// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span></span><br><span class="line"><span class="comment">// THE SOFTWARE.</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AFURLResponseSerialization.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AFURLRequestSerialization.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AFSecurityPolicy.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AFNetworkReachabilityManager.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> `AFURLSessionManager` creates and manages an `NSURLSession` object based on a specified `NSURLSessionConfiguration` object, which conforms to `&lt;NSURLSessionTaskDelegate&gt;`, `&lt;NSURLSessionDataDelegate&gt;`, `&lt;NSURLSessionDownloadDelegate&gt;`, and `&lt;NSURLSessionDelegate&gt;`.</span><br><span class="line"></span><br><span class="line"> `AFURLSessionManager` 基于指定的 `NSURLSessionConfiguration` 创建并管理一个 `NSURLSession` 对象</span><br><span class="line"> 遵守 `NSURLSessionTaskDelegate`、`NSURLSessionDataDelegate`、`NSURLSessionDownloadDelegate` 和 `NSURLSessionDelegate` 协议</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ## Subclassing Notes - 子类注意事项</span><br><span class="line"></span><br><span class="line"> This is the base class for `AFHTTPSessionManager`, which adds functionality specific to making HTTP requests. If you are looking to extend `AFURLSessionManager` specifically for HTTP, consider subclassing `AFHTTPSessionManager` instead.</span><br><span class="line"></span><br><span class="line"> 本类是 `AFHTTPSessionManager` 类的基类</span><br><span class="line"> `AFHTTPSessionManager` 针对 HTTP 请求添加了特定的方法</span><br><span class="line"> 如果希望针对 HTTP 协议扩展网络访问功能，建议从 `AFHTTPSessionManager` 派生子类</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ## NSURLSession &amp; NSURLSessionTask Delegate Methods - NSURLSession 和 NSURLSessionTask 代理方法</span><br><span class="line"></span><br><span class="line"> `AFURLSessionManager` implements the following delegate methods:</span><br><span class="line"> `AFURLSessionManager` 实现了以下代理方法：</span><br><span class="line"></span><br><span class="line"> ### `NSURLSessionDelegate`</span><br><span class="line"></span><br><span class="line"> - `URLSession:didBecomeInvalidWithError:`</span><br><span class="line"> - `URLSession:didReceiveChallenge:completionHandler:`</span><br><span class="line"> - `URLSessionDidFinishEventsForBackgroundURLSession:`</span><br><span class="line"></span><br><span class="line"> ### `NSURLSessionTaskDelegate`</span><br><span class="line"></span><br><span class="line"> - `URLSession:willPerformHTTPRedirection:newRequest:completionHandler:`</span><br><span class="line"> - `URLSession:task:didReceiveChallenge:completionHandler:`</span><br><span class="line"> - `URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:`</span><br><span class="line"> - `URLSession:task:didCompleteWithError:`</span><br><span class="line"></span><br><span class="line"> ### `NSURLSessionDataDelegate`</span><br><span class="line"></span><br><span class="line"> - `URLSession:dataTask:didReceiveResponse:completionHandler:`</span><br><span class="line"> - `URLSession:dataTask:didBecomeDownloadTask:`</span><br><span class="line"> - `URLSession:dataTask:didReceiveData:`</span><br><span class="line"> - `URLSession:dataTask:willCacheResponse:completionHandler:`</span><br><span class="line"></span><br><span class="line"> ### `NSURLSessionDownloadDelegate`</span><br><span class="line"></span><br><span class="line"> - `URLSession:downloadTask:didFinishDownloadingToURL:`</span><br><span class="line"> - `URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesWritten:totalBytesExpectedToWrite:`</span><br><span class="line"> - `URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:`</span><br><span class="line"></span><br><span class="line"> If any of these methods are overridden in a subclass, they _must_ call the `super` implementation first.</span><br><span class="line"> 如果在子类中重写了这些方法，必须先调用 `super` 的实现</span><br><span class="line"></span><br><span class="line"> ## Network Reachability Monitoring - 网络连接状态监听</span><br><span class="line"></span><br><span class="line"> Network reachability status and change monitoring is available through the `reachabilityManager` property. Applications may choose to monitor network reachability conditions in order to prevent or suspend any outbound requests. See `AFNetworkReachabilityManager` for more details.</span><br><span class="line"></span><br><span class="line"> 可以通过 `reachabilityManager` 属性监听网络连接状态是否可用</span><br><span class="line"> 应用程序通过监听网络连接状态条件，可以阻止或暂停出站请求</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ## NSCoding Caveats - NSCoding 注意事项</span><br><span class="line"></span><br><span class="line"> - Encoded managers do not include any block properties. Be sure to set delegate callback blocks when using `-initWithCoder:` or `NSKeyedUnarchiver`.</span><br><span class="line"></span><br><span class="line"> 被编码的管理器不包含任何 block 属性。如果使用 `-initWithCoder:` 或者 `NSKeyedUnarchiver`，需要设置代理回调的 block</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> ## NSCopying Caveats － NSCopying 注意事项</span><br><span class="line"></span><br><span class="line"> - `-copy` and `-copyWithZone:` return a new manager with a new `NSURLSession` created from the configuration of the original.</span><br><span class="line"> - Operation copies do not include any delegate callback blocks, as they often strongly captures a reference to `self`, which would otherwise have the unintuitive side-effect of pointing to the _original_ session manager when copied.</span><br><span class="line"></span><br><span class="line"> `-copy` 和 `-copyWithZone:` 方法返回一个新的管理器，并新建一个 `NSURLSession`</span><br><span class="line"> `NSURLSession` 的配置使用原有配置</span><br><span class="line"> 操作副本不包含任何代理回调 block，这是因为在 block 中经常会出现对 `self` 的强引用，而如果拷贝 block，会在拷贝时将指针指向原有的 session 管理器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @warning Managers for background sessions must be owned for the duration of their use. This can be accomplished by creating an application-wide or shared singleton instance.</span><br><span class="line"> 后台会话的管理器必须被长期持有，以保证有足够的时间完成工作，可以创建一个应用程序范围的管理器或者共享的单例来实现。</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#if (defined(__IPHONE_OS_VERSION_MAX_ALLOWED) &amp;&amp; __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= 70000) || (defined(__MAC_OS_X_VERSION_MAX_ALLOWED) &amp;&amp; __MAC_OS_X_VERSION_MAX_ALLOWED &gt;= 1090)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AFURLSessionManager</span> : <span class="title">NSObject</span> &lt;<span class="title">NSURLSessionDelegate</span>, <span class="title">NSURLSessionTaskDelegate</span>, <span class="title">NSURLSessionDataDelegate</span>, <span class="title">NSURLSessionDownloadDelegate</span>, <span class="title">NSSecureCoding</span>, <span class="title">NSCopying</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The managed session.</span><br><span class="line"> 被管理的网络会话</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLSession</span> *session;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The operation queue on which delegate callbacks are run.</span><br><span class="line"> 代理回调运行的操作队列</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSOperationQueue</span> *operationQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Responses sent from the server in data tasks created with `dataTaskWithRequest:success:failure:` and run using the `GET` / `POST` / et al. convenience methods are automatically validated and serialized by the response serializer. By default, this property is set to an instance of `AFJSONResponseSerializer`.</span><br><span class="line"></span><br><span class="line"> 使用 `GET` / `POST` 等常用方法通过 `dataTaskWithRequest:success:failure:` 数据任务创建的由服务器返回的响应</span><br><span class="line"> 响应数据会被自动验证并由响应序列化器反序列化</span><br><span class="line"> 默认情况下，该属性是 `AFJSONResponseSerializer` 的实例(默认服务器返回的是 JSON 数据)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @warning `responseSerializer` must not be `nil`.</span><br><span class="line"> `responseSerializer` 不能为nil</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> &lt;AFURLResponseSerialization&gt; responseSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">///-------------------------------</span></span><br><span class="line"><span class="comment">/// @name Managing Security Policy - 管理安全策略</span></span><br><span class="line"><span class="comment">///-------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The security policy used by created request operations to evaluate server trust for secure connections. `AFURLSessionManager` uses the `defaultPolicy` unless otherwise specified.</span><br><span class="line"></span><br><span class="line"> 用于创建请求操作的安全策略，以建立服务器信任的安全连接</span><br><span class="line"> 除非特殊指定 `AFURLSessionManager` 使用 `defaultPolicy`</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) AFSecurityPolicy *securityPolicy;</span><br><span class="line"></span><br><span class="line"><span class="comment">///--------------------------------------</span></span><br><span class="line"><span class="comment">/// @name Monitoring Network Reachability - 监听网络连接状态</span></span><br><span class="line"><span class="comment">///--------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The network reachability manager. `AFURLSessionManager` uses the `sharedManager` by default.</span><br><span class="line"></span><br><span class="line"> 网络连接管理器</span><br><span class="line"> `AFURLSessionManager` 默认使用 `sharedManager`</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readwrite</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) AFNetworkReachabilityManager *reachabilityManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">///----------------------------</span></span><br><span class="line"><span class="comment">/// @name Getting Session Tasks - 获取会话任务</span></span><br><span class="line"><span class="comment">///----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The data, upload, and download tasks currently run by the managed session.</span><br><span class="line"> 被管理的会话当前运行的数据、上传和下载任务</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *tasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The data tasks currently run by the managed session.</span><br><span class="line"> 被管理的会话当前运行的数据任务</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *dataTasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The upload tasks currently run by the managed session.</span><br><span class="line"> 被管理的会话当前运行的上传任务</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *uploadTasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The download tasks currently run by the managed session.</span><br><span class="line"> 被管理的会话当前运行的下载任务</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *downloadTasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">///-------------------------------</span></span><br><span class="line"><span class="comment">/// @name Managing Callback Queues - 管理回调队列</span></span><br><span class="line"><span class="comment">///-------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The dispatch queue for `completionBlock`. If `NULL` (default), the main queue is used.</span><br><span class="line"></span><br><span class="line"> `completionBlock` 的调度队列</span><br><span class="line"> 如果为 `NULL`（默认），使用主队列</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">dispatch_queue_t</span> completionQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The dispatch group for `completionBlock`. If `NULL` (default), a private dispatch group is used.</span><br><span class="line"></span><br><span class="line"> `completionBlock` 的调度组</span><br><span class="line"> 如果为 `NULL`（默认），使用一个私有调度组</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) dispatch_group_t completionGroup;</span><br><span class="line"></span><br><span class="line"><span class="comment">///---------------------------------</span></span><br><span class="line"><span class="comment">/// @name Working Around System Bugs - 处理系统 Bugs</span></span><br><span class="line"><span class="comment">///---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Whether to attempt to retry creation of upload tasks for background sessions when initial call returns `nil`. `NO` by default.</span><br><span class="line"></span><br><span class="line"> 如果初始调用返回 `nil`，是否为后台会话重新创建上传任务</span><br><span class="line"> 默认为 `NO`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> bug: As of iOS 7.0, there is a bug where upload tasks created for background tasks are sometimes `nil`. As a workaround, if this property is `YES`, AFNetworking will follow Apple's recommendation to try creating the task again.</span><br><span class="line"> &lt;p&gt;BUG&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"> 在 iOS 7.0中，有时会无法为后台任务创建上传任务，而只是得到 `nil`</span><br><span class="line"> 作为解决办法，如果将此属性设置为 `YES`，AFNetworking 将按照苹果的建议，尝试再次创建任务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @see https://github.com/AFNetworking/AFNetworking/issues/1675</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> attemptsToRecreateUploadTasksForBackgroundSessions;</span><br><span class="line"></span><br><span class="line"><span class="comment">///---------------------</span></span><br><span class="line"><span class="comment">/// @name Initialization - 初始化</span></span><br><span class="line"><span class="comment">///---------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Creates and returns a manager for a session created with the specified configuration. This is the designated initializer.</span><br><span class="line"></span><br><span class="line"> 使用指定的配置为网络会话创建并返回一个管理器</span><br><span class="line"> 这是指定的初始化方法</span><br><span class="line"></span><br><span class="line"> @param configuration The configuration used to create the managed session.</span><br><span class="line"> 用于创建管理的网络会话的配置</span><br><span class="line"></span><br><span class="line"> @return A manager for a newly-created session.</span><br><span class="line"> 新创建的网络会话管理器</span><br><span class="line"> */</span></span><br><span class="line">- (instancetype)initWithSessionConfiguration:(<span class="built_in">NSURLSessionConfiguration</span> *)configuration <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Invalidates the managed session, optionally canceling pending tasks.</span><br><span class="line"></span><br><span class="line"> 使管理的会话无效</span><br><span class="line"> 可用于取消尚未完成的任务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param cancelPendingTasks Whether or not to cancel pending tasks.</span><br><span class="line"> 是否取消尚未完成的任务</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)invalidateSessionCancelingTasks:(<span class="built_in">BOOL</span>)cancelPendingTasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">///-------------------------</span></span><br><span class="line"><span class="comment">/// @name Running Data Tasks - 运行数据任务</span></span><br><span class="line"><span class="comment">///-------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Creates an `NSURLSessionDataTask` with the specified request.</span><br><span class="line"> 使用指定的请求创建一个 `NSURLSessionDataTask`</span><br><span class="line"></span><br><span class="line"> @param request The HTTP request for the request.</span><br><span class="line"> HTTP 请求</span><br><span class="line"> @param completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</span><br><span class="line"></span><br><span class="line"> 任务完成后执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 该 block 有三个参数：服务器响应，序列化器创建的响应对象，错误(如果有)</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)dataTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                            completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> responseObject, <span class="built_in">NSError</span> *error))completionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">///---------------------------</span></span><br><span class="line"><span class="comment">/// @name Running Upload Tasks - 运行上传任务</span></span><br><span class="line"><span class="comment">///---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Creates an `NSURLSessionUploadTask` with the specified request for a local file.</span><br><span class="line"> 使用指定的请求和一个本地文件，创建一个 `NSURLSessionUploadTask`</span><br><span class="line"></span><br><span class="line"> @param request The HTTP request for the request.</span><br><span class="line"> HTTP 请求</span><br><span class="line"> @param fileURL A URL to the local file to be uploaded.</span><br><span class="line"> 要上传的本地文件的 URL</span><br><span class="line"> @param progress A progress object monitoring the current upload progress.</span><br><span class="line"> 监听当前上传进度的进度对象</span><br><span class="line"> @param completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</span><br><span class="line"></span><br><span class="line"> 任务完成后执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 该 block 有三个参数：服务器响应，序列化器创建的响应对象，错误(如果有)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @see `attemptsToRecreateUploadTasksForBackgroundSessions`</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                                         fromFile:(<span class="built_in">NSURL</span> *)fileURL</span><br><span class="line">                                         progress:(<span class="built_in">NSProgress</span> * __autoreleasing *)progress</span><br><span class="line">                                completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> responseObject, <span class="built_in">NSError</span> *error))completionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Creates an `NSURLSessionUploadTask` with the specified request for an HTTP body.</span><br><span class="line"> 使用指定的请求和二进制数据，创建一个 `NSURLSessionUploadTask`</span><br><span class="line"></span><br><span class="line"> @param request The HTTP request for the request.</span><br><span class="line"> HTTP 请求</span><br><span class="line"> @param bodyData A data object containing the HTTP body to be uploaded.</span><br><span class="line"> 要上传的 NSData 对象</span><br><span class="line"> @param progress A progress object monitoring the current upload progress.</span><br><span class="line"> 监听当前上传进度的进度对象</span><br><span class="line"> @param completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</span><br><span class="line"></span><br><span class="line"> 任务完成后执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 该 block 有三个参数：服务器响应，序列化器创建的响应对象，错误(如果有)</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                                         fromData:(<span class="built_in">NSData</span> *)bodyData</span><br><span class="line">                                         progress:(<span class="built_in">NSProgress</span> * __autoreleasing *)progress</span><br><span class="line">                                completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> responseObject, <span class="built_in">NSError</span> *error))completionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Creates an `NSURLSessionUploadTask` with the specified streaming request.</span><br><span class="line"> 使用指定的流请求，创建一个 `NSURLSessionUploadTask`</span><br><span class="line"></span><br><span class="line"> @param request The HTTP request for the request.</span><br><span class="line"> HTTP 请求</span><br><span class="line"> @param progress A progress object monitoring the current upload progress.</span><br><span class="line"> 监听当前上传进度的进度对象</span><br><span class="line"> @param completionHandler A block object to be executed when the task finishes. This block has no return value and takes three arguments: the server response, the response object created by that serializer, and the error that occurred, if any.</span><br><span class="line"></span><br><span class="line"> 任务完成后执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 该 block 有三个参数：服务器响应，序列化器创建的响应对象，错误(如果有)</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSURLSessionUploadTask</span> *)uploadTaskWithStreamedRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                                                 progress:(<span class="built_in">NSProgress</span> * __autoreleasing *)progress</span><br><span class="line">                                        completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="keyword">id</span> responseObject, <span class="built_in">NSError</span> *error))completionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">///-----------------------------</span></span><br><span class="line"><span class="comment">/// @name Running Download Tasks - 运行下载任务</span></span><br><span class="line"><span class="comment">///-----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Creates an `NSURLSessionDownloadTask` with the specified request.</span><br><span class="line"> 使用指定的请求，创建一个 `NSURLSessionDownloadTask`</span><br><span class="line"></span><br><span class="line"> @param request The HTTP request for the request.</span><br><span class="line"> HTTP 请求</span><br><span class="line"> @param progress A progress object monitoring the current download progress.</span><br><span class="line"> 监听当前下载进度的进度对象</span><br><span class="line"> @param destination A block object to be executed in order to determine the destination of the downloaded file. This block takes two arguments, the target path &amp; the server response, and returns the desired file URL of the resulting download. The temporary file used during the download will be automatically deleted after being moved to the returned URL.</span><br><span class="line"></span><br><span class="line"> 确定保存下载文件目标位置的 block 对象</span><br><span class="line"> 该 block 有两个参数：目标路径和服务器响应</span><br><span class="line"> 返回保存下载文件目标位置的 URL</span><br><span class="line"> 当将下载的临时文件移动至返回的 URL 后，临时文件会被自动删除</span><br><span class="line"></span><br><span class="line"> @param completionHandler A block to be executed when a task finishes. This block has no return value and takes three arguments: the server response, the path of the downloaded file, and the error describing the network or parsing error that occurred, if any.</span><br><span class="line"></span><br><span class="line"> 任务完成后执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 该 block 有三个参数：服务器响应，下载的文件路径，错误(如果有)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @warning If using a background `NSURLSessionConfiguration` on iOS, these blocks will be lost when the app is terminated. Background sessions may prefer to use `-setDownloadTaskDidFinishDownloadingBlock:` to specify the URL for saving the downloaded file, rather than the destination block of this method.</span><br><span class="line"> 如果使用 iOS 后台的 `NSURLSessionConfiguration`，应用程序被终止后，这些 block 都将会丢失。针对后台会话建议使用 `-setDownloadTaskDidFinishDownloadingBlock:` 指定保存下载文件的 URL，而不要使用此方法的 destination block</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithRequest:(<span class="built_in">NSURLRequest</span> *)request</span><br><span class="line">                                             progress:(<span class="built_in">NSProgress</span> * __autoreleasing *)progress</span><br><span class="line">                                          destination:(<span class="built_in">NSURL</span> * (^)(<span class="built_in">NSURL</span> *targetPath, <span class="built_in">NSURLResponse</span> *response))destination</span><br><span class="line">                                    completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURL</span> *filePath, <span class="built_in">NSError</span> *error))completionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Creates an `NSURLSessionDownloadTask` with the specified resume data.</span><br><span class="line"> 使用指定的续传数据，创建一个 `NSURLSessionDownloadTask`</span><br><span class="line"></span><br><span class="line"> @param resumeData The data used to resume downloading.</span><br><span class="line"> 用于断点续传的续传数据</span><br><span class="line"> @param progress A progress object monitoring the current download progress.</span><br><span class="line"> 监听当前下载进度的进度对象</span><br><span class="line"> @param destination A block object to be executed in order to determine the destination of the downloaded file. This block takes two arguments, the target path &amp; the server response, and returns the desired file URL of the resulting download. The temporary file used during the download will be automatically deleted after being moved to the returned URL.</span><br><span class="line"></span><br><span class="line"> 确定保存下载文件目标位置的 block 对象</span><br><span class="line"> 该 block 有两个参数：目标路径和服务器响应</span><br><span class="line"> 返回保存下载文件目标位置的 URL</span><br><span class="line"> 当将下载的临时文件移动至返回的 URL 后，临时文件会被自动删除</span><br><span class="line"></span><br><span class="line"> @param completionHandler A block to be executed when a task finishes. This block has no return value and takes three arguments: the server response, the path of the downloaded file, and the error describing the network or parsing error that occurred, if any.</span><br><span class="line"></span><br><span class="line"> 任务完成后执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 该 block 有三个参数：服务器响应，下载的文件路径，错误(如果有)</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTaskWithResumeData:(<span class="built_in">NSData</span> *)resumeData</span><br><span class="line">                                                progress:(<span class="built_in">NSProgress</span> * __autoreleasing *)progress</span><br><span class="line">                                             destination:(<span class="built_in">NSURL</span> * (^)(<span class="built_in">NSURL</span> *targetPath, <span class="built_in">NSURLResponse</span> *response))destination</span><br><span class="line">                                       completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURL</span> *filePath, <span class="built_in">NSError</span> *error))completionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">///---------------------------------</span></span><br><span class="line"><span class="comment">/// @name Getting Progress for Tasks - 获得任务进度</span></span><br><span class="line"><span class="comment">///---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Returns the upload progress of the specified task.</span><br><span class="line"> 返回指定任务的上传进度</span><br><span class="line"></span><br><span class="line"> @param uploadTask The session upload task. Must not be `nil`.</span><br><span class="line"> 会话的上传任务，不能为空</span><br><span class="line"></span><br><span class="line"> @return An `NSProgress` object reporting the upload progress of a task, or `nil` if the progress is unavailable.</span><br><span class="line"> 一个 `NSProgress` 对象报告任务的上传进度，如果进度不可用，返回 `nil`</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSProgress</span> *)uploadProgressForTask:(<span class="built_in">NSURLSessionUploadTask</span> *)uploadTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Returns the download progress of the specified task.</span><br><span class="line"> 返回指定任务的下载进度</span><br><span class="line"></span><br><span class="line"> @param downloadTask The session download task. Must not be `nil`.</span><br><span class="line"> 会话的下载任务，不能为空</span><br><span class="line"></span><br><span class="line"> @return An `NSProgress` object reporting the download progress of a task, or `nil` if the progress is unavailable.</span><br><span class="line"> 一个 `NSProgress` 对象报告任务的下载进度，如果进度不可用，返回 `nil`</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSProgress</span> *)downloadProgressForTask:(<span class="built_in">NSURLSessionDownloadTask</span> *)downloadTask;</span><br><span class="line"></span><br><span class="line"><span class="comment">///-----------------------------------------</span></span><br><span class="line"><span class="comment">/// @name Setting Session Delegate Callbacks - 设置会话代理回调</span></span><br><span class="line"><span class="comment">///-----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed when the managed session becomes invalid, as handled by the `NSURLSessionDelegate` method `URLSession:didBecomeInvalidWithError:`.</span><br><span class="line"></span><br><span class="line"> 设置当管理的会话无效时执行的 block</span><br><span class="line"> 在 `NSURLSessionDelegate` 的 `URLSession:didBecomeInvalidWithError:` 方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed when the managed session becomes invalid. The block has no return value, and takes two arguments: the session, and the error related to the cause of invalidation.</span><br><span class="line"></span><br><span class="line"> 当管理的会话无效时执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 该 block 有两个参数：会话和导致会话无效相关的错误</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setSessionDidBecomeInvalidBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSError</span> *error))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed when a connection level authentication challenge has occurred, as handled by the `NSURLSessionDelegate` method `URLSession:didReceiveChallenge:completionHandler:`.</span><br><span class="line"></span><br><span class="line"> 设置当连接需要身份验证质询时执行的 block</span><br><span class="line"> 在 `NSURLSessionDelegate` 的 `URLSession:didReceiveChallenge:completionHandler:` 方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed when a connection level authentication challenge has occurred. The block returns the disposition of the authentication challenge, and takes three arguments: the session, the authentication challenge, and a pointer to the credential that should be used to resolve the challenge.</span><br><span class="line"></span><br><span class="line"> 当连接需要身份验证质询时执行的 block 对象</span><br><span class="line"> 该 block 返回身份验证的配置情况</span><br><span class="line"> 该 block 有三个参数：会话，身份验证质询和一个指向凭据的指针，该凭据用于解决身份验证</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setSessionDidReceiveAuthenticationChallengeBlock:(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLAuthenticationChallenge</span> *challenge, <span class="built_in">NSURLCredential</span> * __autoreleasing *credential))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">///--------------------------------------</span></span><br><span class="line"><span class="comment">/// @name Setting Task Delegate Callbacks - 设置任务代理回调</span></span><br><span class="line"><span class="comment">///--------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed when a task requires a new request body stream to send to the remote server, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:needNewBodyStream:`.</span><br><span class="line"></span><br><span class="line"> 设置一个请求体二进制流发送至远程服务器时执行的 block</span><br><span class="line"> 在 `NSURLSessionTaskDelegate` 的 `URLSession:task:needNewBodyStream:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed when a task requires a new request body stream.</span><br><span class="line"></span><br><span class="line"> 任务请求一个新请求体二进制流时执行的 block 对象</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setTaskNeedNewBodyStreamBlock:(<span class="built_in">NSInputStream</span> * (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed when an HTTP request is attempting to perform a redirection to a different URL, as handled by the `NSURLSessionTaskDelegate` method `URLSession:willPerformHTTPRedirection:newRequest:completionHandler:`.</span><br><span class="line"></span><br><span class="line"> 设置 HTTP 请求尝试重定向到其他 URL 时执行的 block</span><br><span class="line"> 在 `NSURLSessionTaskDelegate` 的 `URLSession:willPerformHTTPRedirection:newRequest:completionHandler:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed when an HTTP request is attempting to perform a redirection to a different URL. The block returns the request to be made for the redirection, and takes four arguments: the session, the task, the redirection response, and the request corresponding to the redirection response.</span><br><span class="line"></span><br><span class="line"> 当 HTTP 请求尝试重定向到其他 URL 时执行的 block 对象</span><br><span class="line"> 该 block 返回导致重定向的请求 NSURLRequest</span><br><span class="line"> 接收四个参数</span><br><span class="line"></span><br><span class="line">        session － 会话</span><br><span class="line">        任务</span><br><span class="line">        重定向响应</span><br><span class="line">        要重定向的请求</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setTaskWillPerformHTTPRedirectionBlock:(<span class="built_in">NSURLRequest</span> * (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task, <span class="built_in">NSURLResponse</span> *response, <span class="built_in">NSURLRequest</span> *request))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed when a session task has received a request specific authentication challenge, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:didReceiveChallenge:completionHandler:`.</span><br><span class="line"></span><br><span class="line"> 设置接收到特定身份验证质询时执行的 block</span><br><span class="line"> HTTPS 访问需要</span><br><span class="line"> 在 `NSURLSessionTaskDelegate` 的 `URLSession:task:didReceiveChallenge:completionHandler:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed when a session task has received a request specific authentication challenge. The block returns the disposition of the authentication challenge, and takes four arguments: the session, the task, the authentication challenge, and a pointer to the credential that should be used to resolve the challenge.</span><br><span class="line"></span><br><span class="line"> 当会话任务接收到特定身份验证质询时执行的 block 对象</span><br><span class="line"> 该 block 返回对身份验证请求质询的处置</span><br><span class="line"> 接收四个参数</span><br><span class="line"></span><br><span class="line">        session － 会话</span><br><span class="line">        任务</span><br><span class="line">        身份验证质询</span><br><span class="line">        指向解决验证需要使用凭据的指针</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setTaskDidReceiveAuthenticationChallengeBlock:(<span class="built_in">NSURLSessionAuthChallengeDisposition</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task, <span class="built_in">NSURLAuthenticationChallenge</span> *challenge, <span class="built_in">NSURLCredential</span> * __autoreleasing *credential))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed periodically to track upload progress, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:`.</span><br><span class="line"></span><br><span class="line"> 设置跟踪上传进度要执行的 block</span><br><span class="line"> 在 `NSURLSessionTaskDelegate` 的 `URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be called when an undetermined number of bytes have been uploaded to the server. This block has no return value and takes five arguments: the session, the task, the number of bytes written since the last time the upload progress block was called, the total bytes written, and the total bytes expected to be written during the request, as initially determined by the length of the HTTP body. This block may be called multiple times, and will execute on the main thread.</span><br><span class="line"></span><br><span class="line"> 向服务器上传一定数量的字节后执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 接收五个参数</span><br><span class="line"></span><br><span class="line">        session － 会话</span><br><span class="line">        任务</span><br><span class="line">        从上次上传进度 block 被调用后上传的字节数 － 本次上传字节数</span><br><span class="line">        已经上传的字节数</span><br><span class="line">        请求预期上传的总字节数，由 HTTP body 的长度确定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 该 block 可能会被调用多次，并在主线程上执行</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setTaskDidSendBodyDataBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task, int64_t bytesSent, int64_t totalBytesSent, int64_t totalBytesExpectedToSend))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed as the last message related to a specific task, as handled by the `NSURLSessionTaskDelegate` method `URLSession:task:didCompleteWithError:`.</span><br><span class="line"></span><br><span class="line"> 设置特定任务完成后执行的 block</span><br><span class="line"> 在 `NSURLSessionTaskDelegate` 的 `URLSession:task:didCompleteWithError:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed when a session task is completed. The block has no return value, and takes three arguments: the session, the task, and any error that occurred in the process of executing the task.</span><br><span class="line"></span><br><span class="line"> 会话任务完成后执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 接收三个参数</span><br><span class="line"></span><br><span class="line">        session － 会话</span><br><span class="line">        任务</span><br><span class="line">        任务执行过程中出现的错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setTaskDidCompleteBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionTask</span> *task, <span class="built_in">NSError</span> *error))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">///-------------------------------------------</span></span><br><span class="line"><span class="comment">/// @name Setting Data Task Delegate Callbacks - 设置数据任务代理回调</span></span><br><span class="line"><span class="comment">///-------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed when a data task has received a response, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:didReceiveResponse:completionHandler:`.</span><br><span class="line"></span><br><span class="line"> 设置数据任务接收到响应时执行的 block</span><br><span class="line"> 在 `NSURLSessionDataDelegate` 的 `URLSession:dataTask:didReceiveResponse:completionHandler:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed when a data task has received a response. The block returns the disposition of the session response, and takes three arguments: the session, the data task, and the received response.</span><br><span class="line"></span><br><span class="line"> 数据任务接收到响应时执行的 block 对象</span><br><span class="line"> 该 block 返回对会话响应的处置</span><br><span class="line"> 接收三个参数</span><br><span class="line"></span><br><span class="line">        session － 会话</span><br><span class="line">        任务</span><br><span class="line">        接收到的响应</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setDataTaskDidReceiveResponseBlock:(<span class="built_in">NSURLSessionResponseDisposition</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDataTask</span> *dataTask, <span class="built_in">NSURLResponse</span> *response))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed when a data task has become a download task, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:didBecomeDownloadTask:`.</span><br><span class="line"></span><br><span class="line"> 设置数据任务成为下载任务时执行的 block</span><br><span class="line"> 在 `NSURLSessionDataDelegate` 的 `URLSession:dataTask:didBecomeDownloadTask:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed when a data task has become a download task. The block has no return value, and takes three arguments: the session, the data task, and the download task it has become.</span><br><span class="line"></span><br><span class="line"> 数据任务成为下载任务时执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 接收三个参数</span><br><span class="line"></span><br><span class="line">        session － 会话</span><br><span class="line">        任务</span><br><span class="line">        成为的下载任务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setDataTaskDidBecomeDownloadTaskBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDataTask</span> *dataTask, <span class="built_in">NSURLSessionDownloadTask</span> *downloadTask))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed when a data task receives data, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:didReceiveData:`.</span><br><span class="line"></span><br><span class="line"> 设置数据任务接收到数据时执行的 block</span><br><span class="line"> 在 `NSURLSessionDataDelegate` 的 `URLSession:dataTask:didReceiveData:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes three arguments: the session, the data task, and the data received. This block may be called multiple times, and will execute on the session manager operation queue.</span><br><span class="line"></span><br><span class="line"> 从服务器接收到一定数量的字节后执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 接收三个参数</span><br><span class="line"></span><br><span class="line">        session － 会话</span><br><span class="line">        任务</span><br><span class="line">        接收的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 该 block 可能会被调用多次，并在会话管理器操作队列中执行</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setDataTaskDidReceiveDataBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDataTask</span> *dataTask, <span class="built_in">NSData</span> *data))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed to determine the caching behavior of a data task, as handled by the `NSURLSessionDataDelegate` method `URLSession:dataTask:willCacheResponse:completionHandler:`.</span><br><span class="line"></span><br><span class="line"> 设置确定数据任务的缓存行为执行的 block</span><br><span class="line"> 在 `NSURLSessionDataDelegate` 的 `URLSession:dataTask:willCacheResponse:completionHandler:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed to determine the caching behavior of a data task. The block returns the response to cache, and takes three arguments: the session, the data task, and the proposed cached URL response.</span><br><span class="line"></span><br><span class="line"> 确定数据任务的缓存行为执行的 block 对象</span><br><span class="line"> 该 block 返回要缓存的响应</span><br><span class="line"> 接收三个参数</span><br><span class="line"></span><br><span class="line">        session － 会话</span><br><span class="line">        任务</span><br><span class="line">        建议缓存的 URL 响应</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setDataTaskWillCacheResponseBlock:(<span class="built_in">NSCachedURLResponse</span> * (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDataTask</span> *dataTask, <span class="built_in">NSCachedURLResponse</span> *proposedResponse))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed once all messages enqueued for a session have been delivered, as handled by the `NSURLSessionDataDelegate` method `URLSessionDidFinishEventsForBackgroundURLSession:`.</span><br><span class="line"></span><br><span class="line"> 设置会话的所有入队消息已经被提交时执行一次的 block</span><br><span class="line"> 在 `NSURLSessionDataDelegate` 的 `URLSessionDidFinishEventsForBackgroundURLSession:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed once all messages enqueued for a session have been delivered. The block has no return value and takes a single argument: the session.</span><br><span class="line"></span><br><span class="line"> 会话的所有入队消息已经被提交时执行一次的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 接收唯一一个参数</span><br><span class="line"></span><br><span class="line">        session － 会话</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setDidFinishEventsForBackgroundURLSessionBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">///-----------------------------------------------</span></span><br><span class="line"><span class="comment">/// @name Setting Download Task Delegate Callbacks - 设置下载任务代理回调</span></span><br><span class="line"><span class="comment">///-----------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed when a download task has completed a download, as handled by the `NSURLSessionDownloadDelegate` method `URLSession:downloadTask:didFinishDownloadingToURL:`.</span><br><span class="line"></span><br><span class="line"> 设置下载任务完成后执行的 block</span><br><span class="line"> 在 `NSURLSessionDownloadDelegate` 的 `URLSession:downloadTask:didFinishDownloadingToURL:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed when a download task has completed. The block returns the URL the download should be moved to, and takes three arguments: the session, the download task, and the temporary location of the downloaded file. If the file manager encounters an error while attempting to move the temporary file to the destination, an `AFURLSessionDownloadTaskDidFailToMoveFileNotification` will be posted, with the download task as its object, and the user info of the error.</span><br><span class="line"></span><br><span class="line"> 下载任务完成后执行的 block 对象</span><br><span class="line"> 该 block 返回下载文件被移动到的 URL</span><br><span class="line"> 接收三个参数</span><br><span class="line"></span><br><span class="line">        session － 会话</span><br><span class="line">        下载任务</span><br><span class="line">        保存下载文件的临时位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    如果 FileManager(文件管理器) 将下载文件移动到目标位置时发生错误，会发布一个 `AFURLSessionDownloadTaskDidFailToMoveFileNotification` 通知</span><br><span class="line"></span><br><span class="line">        object - 下载任务</span><br><span class="line">        userInfo - 错误信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setDownloadTaskDidFinishDownloadingBlock:(<span class="built_in">NSURL</span> * (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDownloadTask</span> *downloadTask, <span class="built_in">NSURL</span> *location))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed periodically to track download progress, as handled by the `NSURLSessionDownloadDelegate` method `URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesWritten:totalBytesExpectedToWrite:`.</span><br><span class="line"></span><br><span class="line"> 设置跟踪下载进度重复执行的 block</span><br><span class="line"> 在 `NSURLSessionDownloadDelegate` 的 `URLSession:downloadTask:didWriteData:totalBytesWritten:totalBytesWritten:totalBytesExpectedToWrite:` 代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be called when an undetermined number of bytes have been downloaded from the server. This block has no return value and takes five arguments: the session, the download task, the number of bytes read since the last time the download progress block was called, the total bytes read, and the total bytes expected to be read during the request, as initially determined by the expected content size of the `NSHTTPURLResponse` object. This block may be called multiple times, and will execute on the session manager operation queue.</span><br><span class="line"></span><br><span class="line"> 从服务器下载一定数量的字节后执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 接收五个参数</span><br><span class="line"></span><br><span class="line">        session - 会话</span><br><span class="line">        下载任务</span><br><span class="line">        从上次下载进度 block 被调用后下载的字节数 － 本次下载字节数</span><br><span class="line">        已经下载的字节数</span><br><span class="line">        请求预期下载的总字节数 - 总下载字节数，由 `NSHTTPURLResponse` 对象的 expectedContentLength 属性确定</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 该 block 可能会被调用多次，并在会话管理器操作队列中执行</span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setDownloadTaskDidWriteDataBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDownloadTask</span> *downloadTask, int64_t bytesWritten, int64_t totalBytesWritten, int64_t totalBytesExpectedToWrite))block;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Sets a block to be executed when a download task has been resumed, as handled by the `NSURLSessionDownloadDelegate` method `URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:`.</span><br><span class="line"></span><br><span class="line"> 设置下载任务续传时执行的 blok</span><br><span class="line"> 在 `NSURLSessionDownloadDelegate` 的 `URLSession:downloadTask:didResumeAtOffset:expectedTotalBytes:` 的代理方法中执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @param block A block object to be executed when a download task has been resumed. The block has no return value and takes four arguments: the session, the download task, the file offset of the resumed download, and the total number of bytes expected to be downloaded.</span><br><span class="line"></span><br><span class="line"> 下载任务续传时执行的 block 对象</span><br><span class="line"> 该 block 没有返回值</span><br><span class="line"> 接收四个参数</span><br><span class="line"></span><br><span class="line">        session - 会话</span><br><span class="line">        下载任务</span><br><span class="line">        续传下载的文件偏移位置</span><br><span class="line">        预期下载的总字节数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setDownloadTaskDidResumeBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSession</span> *session, <span class="built_in">NSURLSessionDownloadTask</span> *downloadTask, int64_t fileOffset, int64_t expectedTotalBytes))block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///--------------------</span></span><br><span class="line"><span class="comment">/// @name Notifications - 通知</span></span><br><span class="line"><span class="comment">///--------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Posted when a task begins executing.</span><br><span class="line"> 任务开始执行通知</span><br><span class="line"></span><br><span class="line"> @deprecated Use `AFNetworkingTaskDidResumeNotification` instead.</span><br><span class="line"> 已经废弃，使用 `AFNetworkingTaskDidResumeNotification` 替代</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidStartNotification DEPRE<span class="built_in">CATED_ATTRIBUTE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Posted when a task resumes.</span><br><span class="line"> 任务继续通知</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidResumeNotification;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Posted when a task finishes executing. Includes a userInfo dictionary with additional information about the task.</span><br><span class="line"> 任务结束执行通知，任务附加信息包含在 userInfo 字典中</span><br><span class="line"></span><br><span class="line"> @deprecated Use `AFNetworkingTaskDidCompleteNotification` instead.</span><br><span class="line"> 已经废弃，使用 `AFNetworkingTaskDidCompleteNotification` 替代</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidFinishNotification DEPRE<span class="built_in">CATED_ATTRIBUTE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Posted when a task finishes executing. Includes a userInfo dictionary with additional information about the task.</span><br><span class="line"> 任务结束执行通知，任务附加信息包含在 userInfo 字典中</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidCompleteNotification;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Posted when a task suspends its execution.</span><br><span class="line"> 任务暂停执行通知</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidSuspendNotification;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Posted when a session is invalidated.</span><br><span class="line"> 网络会话无效通知</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFURLSessionDidInvalidateNotification;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Posted when a session download task encountered an error when moving the temporary download file to a specified destination.</span><br><span class="line"> 会话的下载任务将临时下载文件移动指定目录发生错误通知</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFURLSessionDownloadTaskDidFailToMoveFileNotification;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The raw response data of the task. Included in the userInfo dictionary of the `AFNetworkingTaskDidFinishNotification` if response data exists for the task.</span><br><span class="line"></span><br><span class="line"> @deprecated Use `AFNetworkingTaskDidCompleteResponseDataKey` instead.</span><br><span class="line"> 请使用 `AFNetworkingTaskDidCompleteResponseDataKey` 替代</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidFinishResponseDataKey DEPRE<span class="built_in">CATED_ATTRIBUTE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The raw response data of the task. Included in the userInfo dictionary of the `AFNetworkingTaskDidFinishNotification` if response data exists for the task.</span><br><span class="line"> 任务的原始响应数据，如果任务存在响应数据，包含在 `AFNetworkingTaskDidFinishNotification` 的 userInfo 字典中</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidCompleteResponseDataKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The serialized response object of the task. Included in the userInfo dictionary of the `AFNetworkingTaskDidFinishNotification` if the response was serialized.</span><br><span class="line"></span><br><span class="line"> @deprecated Use `AFNetworkingTaskDidCompleteSerializedResponseKey` instead.</span><br><span class="line"> 请使用 `AFNetworkingTaskDidCompleteSerializedResponseKey` 替代</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidFinishSerializedResponseKey DEPRE<span class="built_in">CATED_ATTRIBUTE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The serialized response object of the task. Included in the userInfo dictionary of the `AFNetworkingTaskDidFinishNotification` if the response was serialized.</span><br><span class="line"> 任务响应数据的反序列化对象，如果响应数据已经被反序列化，包含在 `AFNetworkingTaskDidFinishNotification` 的 userInfo 字典中</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidCompleteSerializedResponseKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The response serializer used to serialize the response. Included in the userInfo dictionary of the `AFNetworkingTaskDidFinishNotification` if the task has an associated response serializer.</span><br><span class="line"></span><br><span class="line"> @deprecated Use `AFNetworkingTaskDidCompleteResponseSerializerKey` instead.</span><br><span class="line"> 请使用 `AFNetworkingTaskDidCompleteResponseSerializerKey` 替代</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidFinishResponseSerializerKey DEPRE<span class="built_in">CATED_ATTRIBUTE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The response serializer used to serialize the response. Included in the userInfo dictionary of the `AFNetworkingTaskDidFinishNotification` if the task has an associated response serializer.</span><br><span class="line"> 响应序列化器用于反序列化响应数据，如果任务已经关联至响应序列化器，包含在 `AFNetworkingTaskDidFinishNotification` 的 userInfo 字典中</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidCompleteResponseSerializerKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The file path associated with the download task. Included in the userInfo dictionary of the `AFNetworkingTaskDidFinishNotification` if an the response data has been stored directly to disk.</span><br><span class="line"></span><br><span class="line"> @deprecated Use `AFNetworkingTaskDidCompleteAssetPathKey` instead.</span><br><span class="line"> 请使用 `AFNetworkingTaskDidCompleteAssetPathKey` 替代</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidFinishAssetPathKey DEPRE<span class="built_in">CATED_ATTRIBUTE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The file path associated with the download task. Included in the userInfo dictionary of the `AFNetworkingTaskDidFinishNotification` if an the response data has been stored directly to disk.</span><br><span class="line"> 与下载任务关联的文件路径，如果响应数据已经被保存至磁盘，包含在 `AFNetworkingTaskDidFinishNotification` 的 userInfo 字典中</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidCompleteAssetPathKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Any error associated with the task, or the serialization of the response. Included in the userInfo dictionary of the `AFNetworkingTaskDidFinishNotification` if an error exists.</span><br><span class="line"></span><br><span class="line"> @deprecated Use `AFNetworkingTaskDidCompleteErrorKey` instead.</span><br><span class="line"> 请使用 `AFNetworkingTaskDidCompleteErrorKey` 替代</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidFinishErrorKey DEPRE<span class="built_in">CATED_ATTRIBUTE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Any error associated with the task, or the serialization of the response. Included in the userInfo dictionary of the `AFNetworkingTaskDidFinishNotification` if an error exists.</span><br><span class="line"> 与任务或者响应反序列化关联的错误，如果错误存在，包括在 `AFNetworkingTaskDidFinishNotification` 的 userInfo 字典中</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingTaskDidCompleteErrorKey;</span><br></pre></td></tr></table></figure>
<h3 id="2-__u5BF9_u4E8EAFNetworking_2-0_u5C01_u88C5"><a href="#2-__u5BF9_u4E8EAFNetworking_2-0_u5C01_u88C5" class="headerlink" title="2. 对于AFNetworking 2.0封装"></a>2. 对于AFNetworking 2.0封装</h3><p>先挖坑，等具体使用的时候再补充这章的内容。</p>
<p>###参考</p>
<blockquote>
<p><a href="https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-2.0-Migration-Guide" target="_blank" rel="external">https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-2.0-Migration-Guide</a></p>
<p><a href="http://blog.csdn.net/hufengvip/article/details/17338853" target="_blank" rel="external">http://blog.csdn.net/hufengvip/article/details/17338853</a></p>
<p><a href="http://blog.csdn.net/hufengvip/article/details/17338947" target="_blank" rel="external">http://blog.csdn.net/hufengvip/article/details/17338947</a></p>
<p><a href="http://blog.csdn.net/ysysbaobei/article/details/17391081" target="_blank" rel="external">http://blog.csdn.net/ysysbaobei/article/details/17391081</a></p>
<p><a href="http://nshipster.cn/afnetworking-2/" target="_blank" rel="external">http://nshipster.cn/afnetworking-2/</a></p>
<p><a href="http://zhangbuhuai.com/2014/08/03/AFNetworking-20-Tutorial/" target="_blank" rel="external">http://zhangbuhuai.com/2014/08/03/AFNetworking-20-Tutorial/</a></p>
<p><a href="http://blog.jobbole.com/52477/" target="_blank" rel="external">http://blog.jobbole.com/52477/</a></p>
<p><a href="http://www.cnblogs.com/michaellfx/p/2015-3-19-AFNetworking2_5.html" target="_blank" rel="external">http://www.cnblogs.com/michaellfx/p/2015-3-19-AFNetworking2_5.html</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近项目从自己的网络框架换到了AFNetworking，集中学习了一下，并且进行了一次封装。<br>首先先附上AFNetworking的地址:<a href="https://github.com/AFNetworking/AFNetworking" target="_bl]]>
    </summary>
    
      <category term="AFNetworking" scheme="http://yeziahehe.com/tags/AFNetworking/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UINavigationBar透明]]></title>
    <link href="http://yeziahehe.com/2015/07/29/2015-07-29-UINavigationBar%E9%80%8F%E6%98%8E%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yeziahehe.com/2015/07/29/2015-07-29-UINavigationBar透明的问题/</id>
    <published>2015-07-29T15:13:55.000Z</published>
    <updated>2015-12-16T15:15:02.000Z</updated>
    <content type="html"><![CDATA[<p>最近项目里面用到了UINavigationBar透明的问题</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/image/post/navigationbar.png?imageView/2/w/400/q/90" alt="透明的UINavigationBar"></p>
<p>透明效果的实现只要几行很简单的代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span><span class="variable">.navigationBar</span> setBackgroundImage:[<span class="built_in">UIImage</span> new] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line"><span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.shadowImage</span> = [<span class="built_in">UIImage</span> new];</span><br></pre></td></tr></table></figure>
<p>但是我发现如果该页面是push进来的页面，并且pop回去之后就会出现UINavigationBar依旧为透明不能够变为原来的颜色，所以需要在重新设置其颜色</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span><span class="variable">.navigationBar</span> setBackgroundImage:<span class="literal">nil</span> forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line"><span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.shadowImage</span> = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure>
<p>此方法可以重写UINavigationController的类，然后所有的类都集成该类，代码如下</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  CustomNavigationController.m</span></span><br><span class="line"><span class="comment">//  SJFood</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 叶帆 on 14/11/25.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Ye Fan. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"CustomNavigationController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"HomeViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"UserInfoViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"IndividualViewController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CustomNavigationController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CustomNavigationController</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - UIViewController Methods</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)pushViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    viewController<span class="variable">.hidesBottomBarWhenPushed</span> = <span class="literal">YES</span>;</span><br><span class="line">    [<span class="keyword">super</span> pushViewController:viewController animated:animated];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - UINavigationControllerDelegate methods</span></span><br><span class="line">- (<span class="keyword">void</span>)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController willShowViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([viewController isKindOfClass:[HomeViewController class]])</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.navigationBar</span> setBackgroundImage:<span class="literal">nil</span> forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.shadowImage</span> = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.titleTextAttributes</span> = @&#123;<span class="built_in">NSForegroundColorAttributeName</span>: [<span class="built_in">UIColor</span> whiteColor]&#125;;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.barTintColor</span> = kMainProjColor;<span class="comment">//导航条的颜色</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.tintColor</span> = [<span class="built_in">UIColor</span> whiteColor];<span class="comment">//左侧返回按钮，文字的颜色</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.barStyle</span> = <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>([viewController isKindOfClass:[UserInfoViewController class]] || [viewController isKindOfClass:[IndividualViewController class]])</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.navigationBar</span> setBackgroundImage:[<span class="built_in">UIImage</span> new] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.shadowImage</span> = [<span class="built_in">UIImage</span> new];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.titleTextAttributes</span> = @&#123;<span class="built_in">NSForegroundColorAttributeName</span>: [<span class="built_in">UIColor</span> whiteColor]&#125;;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.tintColor</span> = [<span class="built_in">UIColor</span> whiteColor];<span class="comment">//左侧返回按钮，文字的颜色</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.barStyle</span> = <span class="built_in">UIStatusBarStyleLightContent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.navigationBar</span> setBackgroundImage:<span class="literal">nil</span> forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.shadowImage</span> = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.titleTextAttributes</span> = @&#123;<span class="built_in">NSForegroundColorAttributeName</span>: kMainBlackColor&#125;;</span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.barTintColor</span> = [<span class="built_in">UIColor</span> whiteColor];<span class="comment">//导航条的颜色</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.tintColor</span> = kMainProjColor;<span class="comment">//左侧返回按钮，文字的颜色</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.navigationBar</span><span class="variable">.barStyle</span> = <span class="built_in">UIStatusBarStyleDefault</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近项目里面用到了UINavigationBar透明的问题</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/image/post/navigationbar.png?imageView/2/w/400/q/90"]]>
    </summary>
    
      <category term="UINavigationBar" scheme="http://yeziahehe.com/tags/UINavigationBar/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UINavigationBar点击事件]]></title>
    <link href="http://yeziahehe.com/2015/07/29/2015-07-29-UINavigationBar%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yeziahehe.com/2015/07/29/2015-07-29-UINavigationBar添加点击事件/</id>
    <published>2015-07-29T15:13:08.000Z</published>
    <updated>2015-12-16T15:13:17.000Z</updated>
    <content type="html"><![CDATA[<p>最近写项目遇到了UINavigationBar需要点击选择校区，发现有个很简单的方法，同样是要重写UINavigationController的方法，并且继承</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  CustomNavigationController.m</span></span><br><span class="line"><span class="comment">//  SJFood</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 叶帆 on 14/11/25.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Ye Fan. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"CustomNavigationController.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CustomNavigationController</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CustomNavigationController</span></span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Private Methods</span></span><br><span class="line">- (<span class="keyword">void</span>)navigationBarTappedWithGesture:(<span class="built_in">UITapGestureRecognizer</span> *)tapGesture</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIViewController</span> *vc = <span class="keyword">self</span><span class="variable">.visibleViewController</span>;</span><br><span class="line">    <span class="keyword">if</span>([vc respondsToSelector:<span class="keyword">@selector</span>(extraItemTapped)])</span><br><span class="line">    &#123;</span><br><span class="line">        [vc performSelector:<span class="keyword">@selector</span>(extraItemTapped)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - UIViewController Methods</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.delegate</span> = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入头部点击手势</span></span><br><span class="line">    <span class="built_in">UITapGestureRecognizer</span> *tapGesture = [[<span class="built_in">UITapGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(navigationBarTappedWithGesture:)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.navigationBar</span> addGestureRecognizer:tapGesture];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近写项目遇到了UINavigationBar需要点击选择校区，发现有个很简单的方法，同样是要重写UINavigationController的方法，并且继承</p>
<figure class="highlight objc"><table><tr><td class="]]>
    </summary>
    
      <category term="UINavigationBar" scheme="http://yeziahehe.com/tags/UINavigationBar/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Masonry源码学习]]></title>
    <link href="http://yeziahehe.com/2015/07/21/2015-07-21-Masonry%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yeziahehe.com/2015/07/21/2015-07-21-Masonry学习/</id>
    <published>2015-07-21T15:00:57.000Z</published>
    <updated>2015-12-16T15:12:49.000Z</updated>
    <content type="html"><![CDATA[<p>如果做iOS开发，那么布局的学习肯定是逃不掉的，目前最好的布局工具就是<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a>。</p>
<h3 id="u65B9_u6CD5_u5206_u6790"><a href="#u65B9_u6CD5_u5206_u6790" class="headerlink" title="方法分析"></a>方法分析</h3><p>Masonry添加约束的方法有三个</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_updateConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line">- (<span class="built_in">NSArray</span> *)mas_remakeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">mas_makeConstraints 只负责新增约束 Autolayout不能同时存在两条针对于同一对象的约束 否则会报错</span><br><span class="line">mas_updateConstraints 针对上面的情况 会更新在block中出现的约束 不会导致出现两个相同约束的情况</span><br><span class="line">mas_remakeConstraints 则会清除之前的所有约束 仅保留最新的约束</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果做iOS开发，那么布局的学习肯定是逃不掉的，目前最好的布局工具就是<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a>。</p>
<h3 id="u]]>
    </summary>
    
      <category term="Masonry" scheme="http://yeziahehe.com/tags/Masonry/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jekyll环境安装]]></title>
    <link href="http://yeziahehe.com/2015/07/15/2015-07-15-jekyll%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yeziahehe.com/2015/07/15/2015-07-15-jekyll环境搭建/</id>
    <published>2015-07-15T14:55:00.000Z</published>
    <updated>2015-12-16T15:01:41.000Z</updated>
    <content type="html"><![CDATA[<p>在狗爹上面买了域名之后，忍不住搭了博客，这次用的github page + jekyll的静态博客。</p>
<p>jekyll的口号就是将纯文本转化成静态网站和博客，尝试了一下，发现很好用，官方网站:<a href="http://jekyll.bootcss.com/" target="_blank" rel="external">http://jekyll.bootcss.com/</a></p>
<p>安装Homebrew的开发环境</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure>
<p>可能会碰到以下情况</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">'https://github.com/Homebrew/homebrew/'</span>: SSLRead() <span class="built_in">return</span> error -<span class="number">9806</span> Failed during: git fetch origin</span><br><span class="line">master:refs/remotes/origin/master -n --depth=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>需要在/etc/resolv.conf中加上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver <span class="number">8.8</span>.<span class="number">8.8</span>&lt;br&gt;</span><br><span class="line">nameserver <span class="number">114.114</span>.<span class="number">114.114</span></span><br></pre></td></tr></table></figure>
<p>如果出现了Permission denied需要分配权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="variable">$USER</span> /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure>
<p>在Mac上面配置jekyll的开发环境首先需要需要配置好rvm，否则会报各种花式错误！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.rvm.io | bash <span class="operator">-s</span> stable</span><br></pre></td></tr></table></figure>
<p>然后重新source一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.rvm/scripts/rvm</span><br></pre></td></tr></table></figure>
<p>接下我就开始安装ruby-2.1.1，但是报了如下错误：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Searching <span class="keyword">for</span> binary rubies, this might take some time.</span><br><span class="line">No binary rubies available <span class="keyword">for</span>: osx/<span class="number">10.10</span>/x86_64/ruby-<span class="number">2.1</span>.<span class="number">1</span>.</span><br><span class="line">Continuing with compilation. Please <span class="built_in">read</span> <span class="string">'rvm help mount'</span> to get more information on binary rubies.</span><br><span class="line">Checking requirements <span class="keyword">for</span> osx.</span><br><span class="line">Installing requirements <span class="keyword">for</span> osx.</span><br><span class="line">Updating system.......</span><br><span class="line">Error running <span class="string">'requirements_osx_brew_update_system ruby-2.1.1'</span>,</span><br><span class="line">showing last <span class="number">15</span> lines of /Users/ivan/.rvm/<span class="built_in">log</span>/<span class="number">1436855825</span>_ruby-<span class="number">2.1</span>.<span class="number">1</span>/update_system.log</span><br><span class="line">    https://github.com/Homebrew/homebrew/wiki/Common-Issues</span><br><span class="line">and make sure `brew update` works before continuing.<span class="string">'</span><br><span class="line">++ rvm_pretty_print stderr</span><br><span class="line">++ case "$&#123;rvm_pretty_print_flag:=auto&#125;" in</span><br><span class="line">++ case "$&#123;TERM:-dumb&#125;" in</span><br><span class="line">++ case "$1" in</span><br><span class="line">++ [[ -t 2 ]]</span><br><span class="line">++ return 1</span><br><span class="line">++ printf %b '</span>Failed to update Homebrew, follow instructions here:</span><br><span class="line">    https://github.com/Homebrew/homebrew/wiki/Common-Issues</span><br><span class="line">and make sure `brew update` works before continuing.\n<span class="string">'</span><br><span class="line">Failed to update Homebrew, follow instructions here:</span><br><span class="line">    https://github.com/Homebrew/homebrew/wiki/Common-Issues</span><br><span class="line">and make sure `brew update` works before continuing.</span><br><span class="line">++ return 1</span><br><span class="line">Requirements installation failed with status: 1.</span></span><br></pre></td></tr></table></figure>
<p>谷歌了很久，提供的方案就是</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">brew install autoconf</span><br><span class="line">brew install automake</span><br><span class="line">brew install libtool</span><br><span class="line">brew install homebrew/dupes/apple-gcc42</span><br><span class="line">brew install libyaml</span><br><span class="line">brew install libxslt</span><br><span class="line">brew install libksba</span><br><span class="line">brew install openssl</span><br></pre></td></tr></table></figure>
<p>然后运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rvm install <span class="number">2.1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>接着开始安装jekyll</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gem install jekyll</span><br><span class="line">jekyll new my-awesome-site</span><br><span class="line"><span class="built_in">cd</span> my-awesome-site  </span><br><span class="line">jekyll serve</span><br></pre></td></tr></table></figure>
<p>最后就是Markdown语法高亮的问题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install redcarpet</span><br></pre></td></tr></table></figure>
<p>然后去修改_congif.yml</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">markdown: redcarpet</span><br><span class="line">redcarpet:</span><br><span class="line">  extensions: [<span class="string">"no_intra_emphasis"</span>, <span class="string">"fenced_code_blocks"</span>, <span class="string">"autolink"</span>, <span class="string">"strikethrough"</span>, <span class="string">"superscript"</span>]</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>在狗爹上面买了域名之后，忍不住搭了博客，这次用的github page + jekyll的静态博客。</p>
<p>jekyll的口号就是将纯文本转化成静态网站和博客，尝试了一下，发现很好用，官方网站:<a href="http://jekyll.bootcss.com/"]]>
    </summary>
    
      <category term="jekyll" scheme="http://yeziahehe.com/tags/jekyll/"/>
    
      <category term="blog" scheme="http://yeziahehe.com/categories/blog/"/>
    
  </entry>
  
</feed>
