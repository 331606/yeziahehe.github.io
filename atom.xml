<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Ivan's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yeziahehe.com/"/>
  <updated>2017-11-05T13:19:16.517Z</updated>
  <id>http://yeziahehe.com/</id>
  
  <author>
    <name><![CDATA[叶帆]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Find K Pairs with Smallest Sums]]></title>
    <link href="http://yeziahehe.com/2017/11/05/FindKPairsWithSmallestSums/"/>
    <id>http://yeziahehe.com/2017/11/05/FindKPairsWithSmallestSums/</id>
    <published>2017-11-05T13:03:51.000Z</published>
    <updated>2017-11-05T13:19:16.517Z</updated>
    <content type="html"><![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/FindKPairsWithSmallestSums.png" alt=""></p>
<p><a href="https://leetcode.com/problems/find-k-pairs-with-smallest-sums/description/" target="_blank" rel="external">LeetCode 373. Find K Pairs with Smallest Sums</a>，题目的意思给定两个升序排序整数数组，从两个数组中各取一个数字组合成 (u,v)，输出前 k 个最小的组合。</p>
<h1 id="u89E3_u9898_u601D_u8DEF"><a href="#u89E3_u9898_u601D_u8DEF" class="headerlink" title="解题思路"></a>解题思路</h1><p>我原本想定义一套判断规则，但是发现要处理很多下标情况。后来看了 Discuss 之后，最好的方式是定义 Heap（堆数据结构），但是 Swift 中不包含这样的数据结构。退而求其次，用了一个方法，记录 nums1 中每个元素已经配对到 nums2 中的第几个，每次遍历 nums1 中的元素，求出 <code>nums1[i]+nums2[index[i]]</code>，取出最小值放入输出数组中即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">kSmallestPairs</span><span class="params">(<span class="number">_</span> nums1: [Int], <span class="number">_</span> nums2: [Int], <span class="number">_</span> k: Int)</span></span> -&gt; [[<span class="type">Int</span>]] &#123;</div><div class="line">        <span class="keyword">if</span> k &lt;= <span class="number">0</span> || nums1.isEmpty || nums2.isEmpty &#123;</div><div class="line">            <span class="keyword">return</span> []</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> cnt = <span class="built_in">min</span>(k, nums1.<span class="built_in">count</span> * nums2.<span class="built_in">count</span>)</div><div class="line">        <span class="keyword">var</span> index = <span class="type">Array</span>(repeatElement(<span class="number">0</span>, <span class="built_in">count</span>: nums1.<span class="built_in">count</span>))</div><div class="line">        <span class="keyword">var</span> pairs: [[<span class="type">Int</span>]] = []</div><div class="line">        <span class="keyword">var</span> n = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> n &lt; cnt &#123;</div><div class="line">            <span class="keyword">var</span> <span class="built_in">min</span> = <span class="type">Int</span>.<span class="built_in">max</span></div><div class="line">            <span class="keyword">var</span> m = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums1.<span class="built_in">count</span> &#123;</div><div class="line">                <span class="keyword">if</span> index[i] &lt; nums2.<span class="built_in">count</span> &amp;&amp; nums1[i]+nums2[index[i]] &lt; <span class="built_in">min</span> &#123;</div><div class="line">                    <span class="built_in">min</span> = nums1[i]+nums2[index[i]]</div><div class="line">                    m = i</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            pairs.append([nums1[m], nums2[index[m]]])</div><div class="line">            index[m] += <span class="number">1</span></div><div class="line">            n += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> pairs</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/05/FindKPairsWithSmallestSums/">http://yeziahehe.com/2017/11/05/FindKPairsWithSmallestSums/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Heap" scheme="http://yeziahehe.com/tags/Heap/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maximum Product of Three Numbers]]></title>
    <link href="http://yeziahehe.com/2017/11/03/MaximumProductOfThreeNumbers/"/>
    <id>http://yeziahehe.com/2017/11/03/MaximumProductOfThreeNumbers/</id>
    <published>2017-11-03T08:56:28.000Z</published>
    <updated>2017-11-03T09:12:10.636Z</updated>
    <content type="html"><![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/MaximumProductOfThreeNumber.png" alt=""></p>
<p><a href="https://leetcode.com/problems/maximum-product-of-three-numbers/description/" target="_blank" rel="external">LeetCode 628. Maximum Product of Three Numbers</a>，题目的意思是在一个给定范围的整数数组里面寻找三个数积最大值。</p>
<h1 id="u89E3_u9898_u601D_u8DEF"><a href="#u89E3_u9898_u601D_u8DEF" class="headerlink" title="解题思路"></a>解题思路</h1><p>思路上面很清晰，三个最大数或者两个最小数和最大数，比较这两个值中较大的一个，则为最大值。</p>
<h2 id="u7B2C_u4E00_u79CD_uFF08_u6CA1_u901A_u8FC7_uFF09"><a href="#u7B2C_u4E00_u79CD_uFF08_u6CA1_u901A_u8FC7_uFF09" class="headerlink" title="第一种（没通过）"></a>第一种（没通过）</h2><p>先使用系统的排序函数排序，时间复杂度上没通过。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maximumProduct</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">let</span> sortNums = nums.sorted()</div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(sortNums[<span class="number">0</span>] * sortNums[<span class="number">1</span>] * sortNums[nums.<span class="built_in">count</span> - <span class="number">1</span>], sortNums[nums.<span class="built_in">count</span> - <span class="number">3</span>] * sortNums[nums.<span class="built_in">count</span> - <span class="number">2</span>] * sortNums[nums.<span class="built_in">count</span> - <span class="number">1</span>])</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Complexity Analysis</p>
<ul>
<li>Time complexity : O(nlog(n)). Sorting the numsnums array takes nlog(n) time.</li>
<li>Space complexity : O(log(n)). Sorting takes O(logn) space.</li>
</ul>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/MaximumProductOfThreeNumbers_error.png" alt=""></p>
<h2 id="u7B2C_u4E8C_u79CD"><a href="#u7B2C_u4E8C_u79CD" class="headerlink" title="第二种"></a>第二种</h2><p>遍历数组，记录上述所需要的 5 个值，然后进行比较。时间复杂度为数组长度 O(n)。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maximumProduct</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">var</span> min1 = <span class="type">Int</span>.<span class="built_in">max</span></div><div class="line">        <span class="keyword">var</span> min2 = <span class="type">Int</span>.<span class="built_in">max</span></div><div class="line">        <span class="keyword">var</span> max1 = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line">        <span class="keyword">var</span> max2 = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line">        <span class="keyword">var</span> max3 = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> num &lt;= min1 &#123;</div><div class="line">                min2 = min1</div><div class="line">                min1 = num</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &lt;= min2 &#123;</div><div class="line">                min2 = num</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> num &gt;= max1 &#123;</div><div class="line">                max3 = max2</div><div class="line">                max2 = max1</div><div class="line">                max1 = num</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &gt;= max2 &#123;</div><div class="line">                max3 = max2</div><div class="line">                max2 = num</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> num &gt;= max3 &#123;</div><div class="line">                max3 = num</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(min1 * min2 * max1, max1 * max2 * max3)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Complexity Analysis</p>
<ul>
<li>Time complexity : O(n). Only one iteration over the numsnums array of length nn is required.</li>
<li>Space complexity : O(1). Constant extra space is used.</li>
</ul>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/03/MaximumProductOfThreeNumbers/">http://yeziahehe.com/2017/11/03/MaximumProductOfThreeNumbers/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Math" scheme="http://yeziahehe.com/tags/Math/"/>
    
      <category term="Array" scheme="http://yeziahehe.com/tags/Array/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Convert Sorted Array to Binary Search Tree]]></title>
    <link href="http://yeziahehe.com/2017/11/02/ConvertSortedArrayToBinarySearchTree/"/>
    <id>http://yeziahehe.com/2017/11/02/ConvertSortedArrayToBinarySearchTree/</id>
    <published>2017-11-02T11:52:05.000Z</published>
    <updated>2017-11-03T06:30:17.799Z</updated>
    <content type="html"><![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/ConvertSortedArraytoBinarySearchTree.png" alt=""></p>
<p><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/description/" target="_blank" rel="external">LeetCode 108. Convert Sorted Array to Binary Search Tree</a>，题目的意思将一个升序的数组转化为平衡二叉查找树。</p>
<h2 id="balanced_BST"><a href="#balanced_BST" class="headerlink" title="balanced BST"></a>balanced BST</h2><p>二叉查找树（BST）是一种能够将链表插入的灵活性和有序数组查找的高效性结合起来的符号表实现。具体的说，就是使用每个节点含有两个链接（链表中每个节点只含有一个链接）的二叉查找树来高效地实现符号表。我们定义的数据结构由 <strong>结点</strong> 组成，结点包含的链接可以为空或者指向其他结点。在二叉树中，每个节点只能有一个父节点（只有一个例外，也就是根节点，它没有父节点），而且每个节点都只有左右两个链接，分别指向自己的左子节点和右子节点。二叉查找树的数据结构如下所示：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Int</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">TreeNode</span>?</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">TreeNode</span>?</div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.val = val</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">left</span> = <span class="literal">nil</span></div><div class="line">        <span class="keyword">self</span>.<span class="keyword">right</span> = <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道，对于一般的二叉搜索树，其期望高度（即为一棵平衡树时）为lgn，其各操作的时间复杂度 O(lgn) 同时也由此而决定，这样就和二分查找时间复杂度一致。但是，在某些极端的情况下（如在插入的序列是有序的时），二叉搜索树将退化成近似链或链，此时，其操作的时间复杂度将退化成线性的，即O(n)。我们在平时构造二叉搜索树的时候，会通过随机化建立二叉搜索树，来避免这种情况，但是这种距离平衡二叉搜索树的时间复杂度还是有一定的差距。平衡二叉搜索树（Balanced Binary Tree）具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。不幸的是，在动态插入中保证树的完美平衡的代价太高了，相应的就有红黑二叉数等算法改进，这里不做过多介绍。</p>
<h1 id="u89E3_u9898_u65B9_u6CD5"><a href="#u89E3_u9898_u65B9_u6CD5" class="headerlink" title="解题方法"></a>解题方法</h1><p>因为是有序的数组，所以可以直接通过二分的方法来不断的进行递归插入。联想到二分方法的原因是，因为二分法的时间复杂度为 O(lgn)，而平衡二叉查找树的时间复杂度也为 O(lgn)。所以算法如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">sortedArrayToBST</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">TreeNode</span>? &#123;</div><div class="line">        <span class="keyword">if</span> nums.isEmpty &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> sortSubArrayToBST(nums, <span class="number">0</span>, nums.<span class="built_in">count</span> - <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">sortSubArrayToBST</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> strat: Int, <span class="number">_</span> end: Int)</span></span> -&gt; <span class="type">TreeNode</span>? &#123;</div><div class="line">        <span class="keyword">guard</span> strat &lt;= end <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> mid = (strat + end) / <span class="number">2</span></div><div class="line">        <span class="keyword">let</span> node = <span class="type">TreeNode</span>(nums[mid])</div><div class="line">        node.<span class="keyword">left</span> = sortSubArrayToBST(nums, strat, mid - <span class="number">1</span>)</div><div class="line">        node.<span class="keyword">right</span> = sortSubArrayToBST(nums, mid + <span class="number">1</span>, end)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> node</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/11/02/ConvertSortedArrayToBinarySearchTree/">http://yeziahehe.com/2017/11/02/ConvertSortedArrayToBinarySearchTree/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Tree" scheme="http://yeziahehe.com/tags/Tree/"/>
    
      <category term="Depth-first Search" scheme="http://yeziahehe.com/tags/Depth-first-Search/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maximum Gap]]></title>
    <link href="http://yeziahehe.com/2017/10/16/MaximumGap/"/>
    <id>http://yeziahehe.com/2017/10/16/MaximumGap/</id>
    <published>2017-10-16T11:52:05.000Z</published>
    <updated>2017-11-04T13:00:04.470Z</updated>
    <content type="html"><![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/MaximumGap.png" alt=""></p>
<p><a href="https://leetcode.com/problems/maximum-gap/description/" target="_blank" rel="external">LeetCode 164. Maximum Gap</a>，题目的意思给定一个未排序的数组，找到在排序情况下相邻两个数最大差值。要在线性时间和空间内解决，&lt; 2 个元素返回 0。</p>
<h1 id="u89E3_u9898_u601D_u8DEF"><a href="#u89E3_u9898_u601D_u8DEF" class="headerlink" title="解题思路"></a>解题思路</h1><p>首先想到的是利用系统的 sort() 进行排序，但是明显超时。最大的差值肯定大于 <code>(maxValue - minValue) / (nums.count - 1)</code>，很容易想到桶排序（当然我没想到，看了 Discuss 之后才想到）。那么令桶空间为 <code>(maxValue - minValue) / (nums.count - 1)</code>。排序完成后，只需要依次将相邻桶空间，后空间最小值减去前空间的最大值，然后寻找其中的最大值。</p>
<p>PS：</p>
<ol>
<li>桶空间 <code>max(1, (maxValue - minValue) / (nums.count - 1))</code>，处理最大值和最小相等、差值比个数小太多的情况。</li>
<li>桶个数 <code>(maxValue - minValue) / bucketCount + 1</code>，极限值[1, 10000000]。</li>
<li><code>preBucketMax</code> 记录前空间的最大值，因为有可能后一个桶空间为空。</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Bucket</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">var</span> empty: <span class="type">Bool</span> = <span class="literal">true</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">var</span> maxValue: <span class="type">Int</span> = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">var</span> minValue: <span class="type">Int</span> = <span class="type">Int</span>.<span class="built_in">max</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maximumGap</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> nums.isEmpty || nums.<span class="built_in">count</span> &lt; <span class="number">2</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> maxValue = nums.<span class="built_in">max</span>()!, minValue = nums.<span class="built_in">min</span>()!</div><div class="line"></div><div class="line">        <span class="keyword">let</span> bucketCount = <span class="built_in">max</span>(<span class="number">1</span>, (maxValue - minValue) / (nums.<span class="built_in">count</span> - <span class="number">1</span>))<span class="comment">//处理最大值和最小相等、差值比个数小太多的情况</span></div><div class="line">        <span class="keyword">let</span> bucketNum = (maxValue - minValue) / bucketCount + <span class="number">1</span><span class="comment">//极限值[1, 10000000]</span></div><div class="line">        <span class="keyword">var</span> buckets = <span class="type">Array</span>(repeatElement(<span class="type">Bucket</span>(), <span class="built_in">count</span>: bucketNum))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">            <span class="keyword">let</span> index = (num - minValue) / bucketCount</div><div class="line">            buckets[index].empty = <span class="literal">false</span></div><div class="line">            buckets[index].maxValue = <span class="built_in">max</span>(num, buckets[index].maxValue)</div><div class="line">            buckets[index].minValue = <span class="built_in">min</span>(num, buckets[index].minValue)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> preBucketMax = minValue, maxGap: <span class="type">Int</span> = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets &#123;</div><div class="line">            <span class="keyword">if</span> bucket.empty &#123;</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            maxGap = <span class="built_in">max</span>(bucket.minValue - preBucketMax, maxGap)</div><div class="line">            preBucketMax = bucket.maxValue</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> maxGap</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/10/16/MaximumGap/">http://yeziahehe.com/2017/10/16/MaximumGap/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Sort" scheme="http://yeziahehe.com/tags/Sort/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Word Break II]]></title>
    <link href="http://yeziahehe.com/2017/10/15/WordBreakII/"/>
    <id>http://yeziahehe.com/2017/10/15/WordBreakII/</id>
    <published>2017-10-15T11:52:05.000Z</published>
    <updated>2017-11-04T12:19:27.920Z</updated>
    <content type="html"><![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/WordBreakII.png" alt=""></p>
<p><a href="https://leetcode.com/problems/word-break-ii/description/" target="_blank" rel="external">LeetCode 140. Word Break II</a>，题目的意思原题的意思给定一个非空的字符串和非空的单词字典（不包含重复元素），将所有可能的分割方式用数组输出。</p>
<h1 id="u89E3_u9898_u601D_u8DEF"><a href="#u89E3_u9898_u601D_u8DEF" class="headerlink" title="解题思路"></a>解题思路</h1><p>记忆化搜索，在搜索过程中，使用字典tokenDict将已经搜索过的子句的拆解方案记录下来，从而实现DFS的剪枝。</p>
<p>时间复杂度 O(n²)，空间复杂度 O(n²)。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">wordBreak</span><span class="params">(<span class="number">_</span> s: String, <span class="number">_</span> wordDict: [String])</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">        <span class="keyword">var</span> cache = [<span class="type">String</span>: [<span class="type">String</span>]]()</div><div class="line">        <span class="keyword">return</span> <span class="type">DFS</span>(s, wordDict, &amp;cache)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">DFS</span><span class="params">(<span class="number">_</span> s: String, <span class="number">_</span> wordDict: [String], <span class="number">_</span> cache: <span class="keyword">inout</span> [String: [String]])</span></span> -&gt; [<span class="type">String</span>] &#123;</div><div class="line">        <span class="keyword">if</span> s.<span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> [<span class="string">""</span>]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> value = cache[s] &#123;</div><div class="line">            <span class="keyword">return</span> value</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> result = [<span class="type">String</span>]()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> wordDict &#123;</div><div class="line">            <span class="keyword">if</span> s.hasPrefix(word) &#123;</div><div class="line">                <span class="keyword">let</span> subWordBreaks = <span class="type">DFS</span>(<span class="type">String</span>(s.suffix(from: word.endIndex)), wordDict, &amp;cache)</div><div class="line">                <span class="keyword">for</span> subWordBreak <span class="keyword">in</span> subWordBreaks &#123;</div><div class="line">                    <span class="keyword">if</span> subWordBreak.isEmpty &#123;</div><div class="line">                        result.append(word)</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        result.append(word + <span class="string">" "</span> + subWordBreak)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cache[s] = result;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/10/15/WordBreakII/">http://yeziahehe.com/2017/10/15/WordBreakII/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Dynamic Programming" scheme="http://yeziahehe.com/tags/Dynamic-Programming/"/>
    
      <category term="Backtracking" scheme="http://yeziahehe.com/tags/Backtracking/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Word Break]]></title>
    <link href="http://yeziahehe.com/2017/10/14/WordBreak/"/>
    <id>http://yeziahehe.com/2017/10/14/WordBreak/</id>
    <published>2017-10-14T11:52:05.000Z</published>
    <updated>2017-11-04T12:21:47.212Z</updated>
    <content type="html"><![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/WordBreak.png" alt=""></p>
<p><a href="https://leetcode.com/problems/word-break/description/" target="_blank" rel="external">LeetCode 139. Word Break</a>，原题的意思给定一个非空的字符串和非空的单词字典（不包含重复元素），判断字符串是否可以被分割成字典中的一个或者多个单词。</p>
<p>这题有进阶的题目，题解 <a href="http://yeziahehe.com/2017/10/15/WordBreakII/">Word Break II</a>。</p>
<h1 id="u89E3_u9898_u601D_u8DEF"><a href="#u89E3_u9898_u601D_u8DEF" class="headerlink" title="解题思路"></a>解题思路</h1><p>这是一题典型的动态规划，如果一个单词存在一种分解方法，分解后每一单词都应该在字典中，那必定满足一个条件：对于该单词的最后一个分割点，分割点到单词末尾的字符串是一个单词，而这个分割点到单词开头所组成的字符串也是可分解的。所以只要验证满足这个条件，我们则可以确定字符串是可分解的。</p>
<ol>
<li>用外层循环来控制待验证的字符串的长度，而用内层的循环来寻找这么一个分割点，可以把字符串分成一个单词和一个同样可分解的子字符串。</li>
<li>同时，我们用数组记录下字符串长度递增时可分解的情况，以供之后使用，避免重复计算。用 Bool wordArray[i] 表示到字符串 s 的第 i 个字符时，是否可以用 wordDict 中的单词来表示。</li>
<li>假设有 wordArray[0…i-1] 的结果，那么 wordArray[i] 的值应该是：wordArray[i] = wordArray[j] &amp;&amp; s.substring(j, i) in wordDict，其中 j 属于[0…i-1]。</li>
</ol>
<p>时间复杂度 O(n²)，空间复杂度 O(n)。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">wordBreak</span><span class="params">(<span class="number">_</span> s: String, <span class="number">_</span> wordDict: [String])</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> s.isEmpty &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> wordDict.<span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> wordArray = <span class="type">Array</span>.<span class="keyword">init</span>(repeating: <span class="literal">false</span>, <span class="built_in">count</span>: s.<span class="built_in">count</span> + <span class="number">1</span>)</div><div class="line">        wordArray[<span class="number">0</span>] = <span class="literal">true</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...s.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">stride</span>(from: i-<span class="number">1</span>, through: <span class="number">0</span>, by: -<span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> wordArray[j] &amp;&amp; wordDict.<span class="built_in">contains</span>(<span class="type">String</span>(s[s.index(s.startIndex, offsetBy: j)..&lt;s.index(s.startIndex, offsetBy: i)])) &#123;</div><div class="line">                    wordArray[i] = <span class="literal">true</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> wordArray[s.<span class="built_in">count</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/10/14/WordBreak/">http://yeziahehe.com/2017/10/14/WordBreak/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Dynamic Programming" scheme="http://yeziahehe.com/tags/Dynamic-Programming/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Move Zeroes]]></title>
    <link href="http://yeziahehe.com/2017/10/13/MoveZeroes/"/>
    <id>http://yeziahehe.com/2017/10/13/MoveZeroes/</id>
    <published>2017-10-13T11:52:05.000Z</published>
    <updated>2017-11-03T07:57:28.583Z</updated>
    <content type="html"><![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/MoveZeroes.png" alt=""></p>
<p><a href="https://leetcode.com/problems/move-zeroes/description/" target="_blank" rel="external">LeetCode 283. Move Zeroes</a>，题目的意思在不复制数组的情况下，用最少的操作将 0 移到最后。</p>
<h1 id="u89E3_u9898_u601D_u8DEF"><a href="#u89E3_u9898_u601D_u8DEF" class="headerlink" title="解题思路"></a>解题思路</h1><p>一个移动的 i pointer（初始值为 0），遍历数组发现非 0 元素，则将对应 i 的元素赋值为当前遍历的值。遍历完成后，比较 i 和数组长度，将剩余元素复制为 0 即可。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">moveZeroes</span><span class="params">(<span class="number">_</span> nums: <span class="keyword">inout</span> [Int])</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">            <span class="keyword">if</span> num != <span class="number">0</span> &#123;</div><div class="line">                nums[i] = num</div><div class="line">                i += <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> i &lt; nums.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">for</span> zeroIndex <span class="keyword">in</span> i..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">                nums[zeroIndex] = <span class="number">0</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/10/13/MoveZeroes/">http://yeziahehe.com/2017/10/13/MoveZeroes/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Two Pointers" scheme="http://yeziahehe.com/tags/Two-Pointers/"/>
    
      <category term="Array" scheme="http://yeziahehe.com/tags/Array/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Longest Substring Without Repeating Characters]]></title>
    <link href="http://yeziahehe.com/2017/10/11/LongestSubstringWithoutRepeatingCharacters/"/>
    <id>http://yeziahehe.com/2017/10/11/LongestSubstringWithoutRepeatingCharacters/</id>
    <published>2017-10-11T11:52:05.000Z</published>
    <updated>2017-11-03T12:58:46.705Z</updated>
    <content type="html"><![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/LongestSubstringWithoutRepeatingCharacters.png" alt=""></p>
<p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/" target="_blank" rel="external">LeetCode 3. Longest Substring Without Repeating Characters</a>，题目的意思寻找 String 中元素不重复的最长子序列。</p>
<h1 id="u89E3_u9898_u601D_u8DEF"><a href="#u89E3_u9898_u601D_u8DEF" class="headerlink" title="解题思路"></a>解题思路</h1><p>这一题我使用的 Two Pointers 的算法，使用了 start 和 end 两个指针，右指针不断的进行右移，没有发现重复元素的情况下，遍历区间内有没有相似元素，如果有直接左指针变为 i+1。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="number">_</span> s: String)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">let</span> array = <span class="type">Array</span>(s)</div><div class="line">        <span class="keyword">var</span> length = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> <span class="keyword">left</span> = <span class="number">0</span>, <span class="keyword">right</span> = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">right</span> &lt; array.<span class="built_in">count</span> &#123;</div><div class="line">            i = <span class="keyword">left</span></div><div class="line">            <span class="keyword">while</span> i &lt; <span class="keyword">right</span> &#123;</div><div class="line">                <span class="keyword">if</span> array[i] == array[<span class="keyword">right</span>] &#123;</div><div class="line">                    <span class="keyword">left</span> = i + <span class="number">1</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">                &#125;</div><div class="line">                i += <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">            length = <span class="built_in">max</span>(length, <span class="keyword">right</span> - <span class="keyword">left</span> + <span class="number">1</span>)</div><div class="line">            <span class="keyword">right</span> += <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> length</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/10/11/LongestSubstringWithoutRepeatingCharacters/">http://yeziahehe.com/2017/10/11/LongestSubstringWithoutRepeatingCharacters/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Hash Table" scheme="http://yeziahehe.com/tags/Hash-Table/"/>
    
      <category term="Two Pointers" scheme="http://yeziahehe.com/tags/Two-Pointers/"/>
    
      <category term="String" scheme="http://yeziahehe.com/tags/String/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Add Two Numbers]]></title>
    <link href="http://yeziahehe.com/2017/10/10/AddTwoNumbers/"/>
    <id>http://yeziahehe.com/2017/10/10/AddTwoNumbers/</id>
    <published>2017-10-10T11:52:05.000Z</published>
    <updated>2017-11-03T11:38:53.385Z</updated>
    <content type="html"><![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/AddTwoNumbers.png" alt=""></p>
<p><a href="https://leetcode.com/problems/add-two-numbers/description/" target="_blank" rel="external">LeetCode 2. Add Two Numbers</a>，题目的意思用两个非空的链表来表示两个非负整数，且链表顺序为数字倒序，求出两个数之和，返回和对应的链表。</p>
<h1 id="u89E3_u9898_u601D_u8DEF"><a href="#u89E3_u9898_u601D_u8DEF" class="headerlink" title="解题思路"></a>解题思路</h1><p>按位进行逐位相加，需要主要的是进位记录，以及两个数位数不匹配的情况下的计算。首先定义链表 Node 数据结构如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> val: <span class="type">Int</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> next: <span class="type">ListNode</span>?</div><div class="line">    <span class="keyword">public</span> <span class="keyword">init</span>(<span class="number">_</span> val: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.val = val</div><div class="line">        <span class="keyword">self</span>.next = <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个 headNode 作为初始值，循环相加，注意边界情况，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addTwoNumbers</span><span class="params">(<span class="number">_</span> l1: ListNode?, <span class="number">_</span> l2: ListNode?)</span></span> -&gt; <span class="type">ListNode</span>? &#123;</div><div class="line">        <span class="keyword">let</span> headNode = <span class="type">ListNode</span>(<span class="number">0</span>)</div><div class="line">        <span class="keyword">var</span> p = l1, q = l2, curr = headNode</div><div class="line">        <span class="keyword">var</span> carry = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> (p != <span class="literal">nil</span> || q != <span class="literal">nil</span> || carry != <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">let</span> x = (p != <span class="literal">nil</span>) ? p!.val : <span class="number">0</span></div><div class="line">            <span class="keyword">let</span> y = (q != <span class="literal">nil</span>) ? q!.val : <span class="number">0</span></div><div class="line">            <span class="keyword">let</span> sum = x + y + carry</div><div class="line">            carry = sum / <span class="number">10</span></div><div class="line">            curr.next = <span class="type">ListNode</span>(sum % <span class="number">10</span>)</div><div class="line">            curr = curr.next!</div><div class="line">            <span class="keyword">if</span> (p != <span class="literal">nil</span>) &#123;</div><div class="line">                p = p!.next</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (q != <span class="literal">nil</span>) &#123;</div><div class="line">                q = q!.next</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> headNode.next!</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/10/10/AddTwoNumbers/">http://yeziahehe.com/2017/10/10/AddTwoNumbers/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Linked List" scheme="http://yeziahehe.com/tags/Linked-List/"/>
    
      <category term="Math" scheme="http://yeziahehe.com/tags/Math/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Two Sum]]></title>
    <link href="http://yeziahehe.com/2017/10/09/TwoSum/"/>
    <id>http://yeziahehe.com/2017/10/09/TwoSum/</id>
    <published>2017-10-08T16:09:12.000Z</published>
    <updated>2017-11-04T10:59:03.920Z</updated>
    <content type="html"><![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/TwoSum.jpg" alt=""></p>
<p><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="external">LeetCode 1. Two Sum</a>，题目的意思简单来说就是给 Target，从数组中找到两个数和，同一个数不可以用两次，且我在测试的时候发现会有同一个值出现两次的情况。</p>
<h1 id="u89E3_u9898_u65B9_u6CD5"><a href="#u89E3_u9898_u65B9_u6CD5" class="headerlink" title="解题方法"></a>解题方法</h1><h2 id="u66B4_u529B_u6C42_u89E3"><a href="#u66B4_u529B_u6C42_u89E3" class="headerlink" title="暴力求解"></a>暴力求解</h2><p>很简单的方式，两个 for loop 就能解决，时间复杂度为 O(n²)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j] == target - nums[i]) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; i, j &#125;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="u6563_u5217_u8868"><a href="#u6563_u5217_u8868" class="headerlink" title="散列表"></a>散列表</h2><p>散列表，Table Hash。这边只是很简单的应用，后续会介绍更加复杂的应用。简单的思想就是将数组中的数不断的读入，key - 是数组中的值，value - 是遍历数组的 index。写入的时候先判断 Target - nums[i] 的 key 是否存在 value。如果存在说明这个数已经被写入了，那么就找到了这两个数；如果不存在则写入数组。算法如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(<span class="number">_</span> nums: [Int], <span class="number">_</span> target: Int)</span></span> -&gt; [<span class="type">Int</span>] &#123;</div><div class="line">        <span class="keyword">var</span> dictionary = [<span class="type">Int</span>: <span class="type">Int</span>]()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> item = dictionary[target - nums[i]] &#123;</div><div class="line">                <span class="keyword">return</span> [item, i]</div><div class="line">            &#125;</div><div class="line">            dictionary[nums[i]] = i</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PS: 本来没打算写这篇博客，主要是我朋友在写这一条的写了 Python 算法，如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> copy</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_sum</span><span class="params">(nums, target)</span>:</span></div><div class="line">    <span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(nums):</div><div class="line">            a = target - item</div><div class="line">            list = copy.copy(nums)</div><div class="line">            <span class="keyword">del</span> list[index]</div><div class="line">            <span class="keyword">if</span> a <span class="keyword">in</span> list:</div><div class="line">                <span class="keyword">if</span> nums.index(a) == index:</div><div class="line">                    <span class="keyword">return</span> [index,list.index(a)+<span class="number">1</span>]</div><div class="line">                <span class="keyword">return</span> [index, nums.index(a)]</div></pre></td></tr></table></figure>
<p>简单的来看，是读取一个数首先删除本身，然后去判断 target - item 是不是存在数组中。我开始很疑惑，在没有使用散列表的情况下，只用数组解出来一定是牺牲了时空复杂度。果然问题在 <code>if a in list:</code>，python 的语法糖在做这句话的时候，其实是做了 For loop，所以时间复杂度为 O(n²)。迷惑了我朋友很久才想通的问题，大家在刷题的时候一定要注意：<strong>高级语言的语法糖和数据结构在带来遍历的同时，在处理方式上面可能会存在你不知道的时空耗费。</strong></p>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/10/09/TwoSum/">http://yeziahehe.com/2017/10/09/TwoSum/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u9898_u76EE_u4ECB_u7ECD"><a href="#u9898_u76EE_u4ECB_u7ECD" class="headerlink" title="题目介绍"></a>题目介绍</h1><p><img src="http://7xkvt5.]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="Hash Table" scheme="http://yeziahehe.com/tags/Hash-Table/"/>
    
      <category term="Array" scheme="http://yeziahehe.com/tags/Array/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[算法学习 - 最大子数组问题 [Maximum Subarray]]]></title>
    <link href="http://yeziahehe.com/2017/09/21/MaximumSubArray/"/>
    <id>http://yeziahehe.com/2017/09/21/MaximumSubArray/</id>
    <published>2017-09-21T09:34:54.000Z</published>
    <updated>2017-11-03T07:45:07.555Z</updated>
    <content type="html"><![CDATA[<h1 id="u5B9E_u9645_u573A_u666F"><a href="#u5B9E_u9645_u573A_u666F" class="headerlink" title="实际场景"></a>实际场景</h1><p>在实际生活中，通常会出现一个场景，炒股的人盯着一只股票涨跌情况在分析这只股票一段时间内，何时买进买出才能达到收益的最大化。通常人们想到的是“低价买进，高价卖出”，这是最理想的情况，但是实际情况中，你可能无法做到。比如下图中股票 A，最高价格出现在第 0 天，而最低价格出现在第 3 天，显然无法做到低买高卖。于是你可能会想也许满足其中的任意一个条件，得到的结果就是最优结果。不否认，股票 A 如果在第 3 天最低价的时候买进，确实能达到收益最大化。但是股票 B 给出了一个反例，最大收益既不是在最低价格时买进，也不是在最高价格时卖出。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/real_pic.png" alt="股票情况"></p>
<h1 id="u89E3_u9898_u601D_u8DEF"><a href="#u89E3_u9898_u601D_u8DEF" class="headerlink" title="解题思路"></a>解题思路</h1><p>我们想找到收益最大化的方法，其实可以换一个角度来看数据。我们是想寻找一段日期，在日期范围内股票价格的净变化值最大，所以可以考察每日价格变化的差价，第 i 天的价格差价为第 i 天和第 i-1 天的价格差，如下表所示，那么把这个看成数组，问题就转化成寻找数组的 <strong>和最大的非空连续子数组</strong>。我们称这样的连续子数组为 <strong>最大子数组</strong>（maximum subarray）。</p>
<table>
<thead>
<tr>
<th style="text-align:center">天数</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th>4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">差值</td>
<td style="text-align:center">-30</td>
<td style="text-align:center">20</td>
<td style="text-align:center">-50</td>
<td>30</td>
</tr>
</tbody>
</table>
<p>虽然做了变换，但是对于 n 天的日期，通过暴力求解的方式，所需要的时间复杂度仍然为 O(n²)。</p>
<h1 id="u89E3_u9898_u65B9_u6CD5"><a href="#u89E3_u9898_u65B9_u6CD5" class="headerlink" title="解题方法"></a>解题方法</h1><h2 id="u66B4_u529B_u6C42_u89E3"><a href="#u66B4_u529B_u6C42_u89E3" class="headerlink" title="暴力求解"></a>暴力求解</h2><p>刚刚讲过，通过暴力求解的方式，并不能降低时间复杂度。算法如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">var</span> maxSum = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> i..&lt;nums.<span class="built_in">count</span> &#123;</div><div class="line">                sum += nums[j]</div><div class="line">                maxSum = <span class="built_in">max</span>(sum, maxSum)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> maxSum</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>思路上面很简单，其实用枚举法把所有子数组的和全部算出来进行比较，然后选出其中最大的。在 <a href="https://leetcode.com/problems/maximum-subarray/description/" target="_blank" rel="external">LeetCode 53. Maximum Subarray</a> 上提交，会出现 <code>Submission Result: Time Limit Exceeded</code>，显然时间复杂度太高。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/leetcode/53/submission1.png" alt="Time Limit Exceeded"></p>
<h2 id="u5206_u6CBB_u7B56_u7565_u6C42_u89E3"><a href="#u5206_u6CBB_u7B56_u7565_u6C42_u89E3" class="headerlink" title="分治策略求解"></a>分治策略求解</h2><p>分治策略，最常见的实际应用就是归并排序。说到分治策略，就是递归地求解一个问题。在每层递归中分三个步骤解决问题：</p>
<ul>
<li><strong>分解（Devide）</strong>，将问题划分为相同的子问题；</li>
<li><strong>解决（Conquer）</strong>，求解子问题，如果达到条件直接求解，未达到条件则继续递归；</li>
<li><strong>合并（Combine）</strong>，将子问题的解合成原问题的解。</li>
</ul>
<p>递归的计算方式有通用公式：T(n) = aT(n/b) + f(n)。</p>
<p>最大子数组每次都是最数组进行二等分，所以公式为：T(n) = 2T(n/2) + f(n)，那么时间复杂度就是 O(nlgn)。</p>
<p>我们要通过分治策略来寻找数组 A[low..high] 的最大子数组，意味着我们要将子数组划分为两个规模相等的子数组。首先找到子数组的中央位置 mid，然后考虑求解两个子数组 A[low..mid] 和 A[mid+1..high]。我们很容易发现最大子数组 A[i..j] 所处的位置必然是以下情况之一：</p>
<ul>
<li>完全位于子数组 A[low..mid] 中，那么 low ≤ i ≤ j ≤ mid。</li>
<li>完全位于子数组 A[mid+1..high] 中，那么 mid &lt; i ≤ j ≤ high。</li>
<li>子数组跨越了中点，那么 low ≤ i ≤ mid &lt; j ≤ high。</li>
</ul>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/leetcode/53/subarray_pic.png" alt="图示"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxCrossingSubSum</span><span class="params">(<span class="number">_</span> subArray: [Int], <span class="number">_</span> <span class="keyword">left</span>: Int, <span class="number">_</span> mid: Int, <span class="number">_</span> <span class="keyword">right</span>: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> maxLeftSum = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line">        <span class="keyword">var</span> maxRightSum = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="keyword">left</span>...mid).reversed() &#123;</div><div class="line">            sum += subArray[i]</div><div class="line">            maxLeftSum = <span class="built_in">max</span>(sum, maxLeftSum)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sum = <span class="number">0</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> mid+<span class="number">1</span>...<span class="keyword">right</span> &#123;</div><div class="line">            sum += subArray[i]</div><div class="line">            maxRightSum = <span class="built_in">max</span>(sum, maxRightSum)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> maxLeftSum + maxRightSum</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxSubSum</span><span class="params">(<span class="number">_</span> subArray: [Int], <span class="number">_</span> <span class="keyword">left</span>: Int, <span class="number">_</span> <span class="keyword">right</span>: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">left</span> == <span class="keyword">right</span> &#123;</div><div class="line">            <span class="keyword">return</span> subArray[<span class="keyword">left</span>]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> mid = (<span class="keyword">left</span> + <span class="keyword">right</span>) / <span class="number">2</span></div><div class="line">        <span class="keyword">var</span> maxLeftSum = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line">        <span class="keyword">var</span> maxRightSum = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line">        <span class="keyword">var</span> maxMidSum = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line"></div><div class="line">        maxLeftSum = maxSubSum(subArray, <span class="keyword">left</span>, mid)</div><div class="line">        maxRightSum = maxSubSum(subArray, mid + <span class="number">1</span>, <span class="keyword">right</span>)</div><div class="line">        maxMidSum = maxCrossingSubSum(subArray, <span class="keyword">left</span>, mid, <span class="keyword">right</span>)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(maxLeftSum, maxRightSum, maxMidSum)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> maxSubSum(nums, <span class="number">0</span>, nums.<span class="built_in">count</span> - <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="u52A8_u6001_u89C4_u5212_u6C42_u89E3"><a href="#u52A8_u6001_u89C4_u5212_u6C42_u89E3" class="headerlink" title="动态规划求解"></a>动态规划求解</h2><p>动态规划（dynamic programming）与分治策略相似，这里的 programming 指的是一种表格法，都是通过组合子问题的解来求解原问题。分治法将问题划分为互不相交的子问题，递归的求解子问题，再将他们的解组合起来，求出原问题的解。与之相反，动态规划应用于 <strong>子问题重叠</strong> 的情况，即不同的子问题具有公共的子子问题。在这种情况下，分治策略会做许多不必要的工作，它会反复的求解那些公共子子问题。而动态规划算法对每个子子问题只求解一次，将其解保存在一个表格中，从而无需每次求解一个子子问题时都重新计算，避免了这种不必要的工作。</p>
<p>动态规划方法通常用来求解 <strong>最优化问题</strong>，这类问题可以有很多可行解，每个解都有一个值，我们希望寻找具有最优值（最小值或最大值）的解。我们称这样的解为问题的一个最优解，而不是最优解，因为可能有多个解都达到最优值。</p>
<p>通常按照 4 个步骤来设计动态规划算法：</p>
<ul>
<li>寻找一个最优解的结构特征。</li>
<li>递归的定义最优解的值。</li>
<li>计算最优解的值，通常采用自底向上的方法。</li>
<li>利用计算出的信息构造一个最优解。</li>
</ul>
<p>最大子数组里面，我们首先要想清楚一个问题就是对于 maxSubArray(A, i) 来说，如果它是目前最大的数组，那么子数组 maxSubArray(A, i - 1) 一定是非负数，因为 maxSubArray(A, i - 1) &gt; maxSubArray(A, i - 1) + A[i]，所以不难得出一个结论：<code>maxSubArray(A, i) = maxSubArray(A, i - 1) &gt; 0 ? maxSubArray(A, i - 1) + A[i] : A[i];</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(<span class="number">_</span> nums: [Int])</span></span> -&gt; <span class="type">Int</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> maxSum = <span class="type">Int</span>.<span class="built_in">min</span></div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums &#123;</div><div class="line">            sum = <span class="built_in">max</span>(num, sum + num)</div><div class="line">            maxSum = <span class="built_in">max</span>(maxSum, sum)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> maxSum</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>PS：动态规划这一部分稍后会详细的博客讲解。</p>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/09/21/MaximumSubArray/">http://yeziahehe.com/2017/09/21/MaximumSubArray/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5B9E_u9645_u573A_u666F"><a href="#u5B9E_u9645_u573A_u666F" class="headerlink" title="实际场景"></a>实际场景</h1><p>在实际生活中，通常会出现一个场景，炒股的人盯着一]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode" scheme="http://yeziahehe.com/tags/LeetCode/"/>
    
      <category term="最大子数组" scheme="http://yeziahehe.com/tags/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    
      <category term="枚举" scheme="http://yeziahehe.com/tags/%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="分治策略" scheme="http://yeziahehe.com/tags/%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/"/>
    
      <category term="动态规划" scheme="http://yeziahehe.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="算法" scheme="http://yeziahehe.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LeetCode OJ" scheme="http://yeziahehe.com/categories/%E7%AE%97%E6%B3%95/LeetCode-OJ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[详解 Swift 中 class 和 struct]]></title>
    <link href="http://yeziahehe.com/2017/09/11/class_struct_enum/"/>
    <id>http://yeziahehe.com/2017/09/11/class_struct_enum/</id>
    <published>2017-09-11T10:14:52.000Z</published>
    <updated>2017-11-03T05:47:13.624Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>Swift 中 struct、enum 都有了很大的变化，这边从基本概念开始分析，如值类型和引用类型的原理、内存管理机制等等来分析三者在 Swift 语言中的异同。</p>
<h1 id="u503C_u7C7B_u578B_u548C_u5F15_u7528_u7C7B_u578B"><a href="#u503C_u7C7B_u578B_u548C_u5F15_u7528_u7C7B_u578B" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h1><p>首先提到的是 iOS 中的内存管理机制的问题，在 iOS 中内存对象主要有两类，值类型和引用类型。值类型就是 int、float、struct、enum、tuple 等基本数据类型，引用类型就是继承自 NSObject 的对象，通常是类对象，我们做内存管理的时候就是对这种对象进行管理。</p>
<p><strong>为什么值类型不需要进行内存管理，而引用类型需要进行内存管理呢？</strong> 因为两种方式的内存分配机制不一样，值类型存储在栈当中，在内存中连续的内存空间，遵循后进先出（LIFO）的原则；而引用类型存储在堆当中，存储空间是随机的，对象之间留有空白空间，会产生空间碎片，需要手动进行管理。</p>
<h2 id="u6709_u4EC0_u4E48_u533A_u522B_uFF1F"><a href="#u6709_u4EC0_u4E48_u533A_u522B_uFF1F" class="headerlink" title="有什么区别？"></a>有什么区别？</h2><p>值类型基本特征就是复制数据，不管是在赋值、初始化还是参数传递的过程中，并且为这个数据创建独立的实例。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> value = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="type">S</span>()</div><div class="line"><span class="keyword">var</span> b = a						<span class="comment">// a被复制给了b</span></div><div class="line">a.value = <span class="number">1</span>					<span class="comment">// a改变了, b没有</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"<span class="subst">\(a.value)</span>, <span class="subst">\(b.value)</span>"</span>)	<span class="comment">// "0, 1"</span></div></pre></td></tr></table></figure>
<p>引用类型在赋值、初始化还是参数传递的过程中其实创建了实例，但是实例的指针指向和原来实例同样的内存地址，所以说修改其中一个示例数据的时候，另一个实例数据也同样会被修改。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> value = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="type">C</span>()</div><div class="line"><span class="keyword">var</span> b = a				    <span class="comment">// a被复制给了b</span></div><div class="line">x.value = <span class="number">1</span>				  <span class="comment">// a和b都被修改了</span></div><div class="line"><span class="built_in">println</span>(<span class="string">"<span class="subst">\(a.value)</span>, <span class="subst">\(b.value)</span>"</span>)	<span class="comment">// "1, 1"</span></div></pre></td></tr></table></figure>
<h2 id="u4E3A_u4EC0_u4E48_u9009_u62E9_u503C_u7C7B_u578B_u66F4_u5B89_u5168_uFF1F"><a href="#u4E3A_u4EC0_u4E48_u9009_u62E9_u503C_u7C7B_u578B_u66F4_u5B89_u5168_uFF1F" class="headerlink" title="为什么选择值类型更安全？"></a>为什么选择值类型更安全？</h2><p>选择值类型而不是引用类型的一个主要原因是能让你的代码变得更加简单。你在任何情况下用一个值类型，都能够假设你的其他代码不会使它改变，这通常在多线程环境中很有用，如果一个线程中使用的数据被另一个线程给意外的修改了，这通常会产生非常严重的Bug，且相当难以调试。在 Objective-C 中 NSArray、NSDictionary 都是属于 NS 类，而 Swift 中 Array、Dictionary 都是属于 struct 类型，显然在后者在多线程编程中更加安全。</p>
<p>在 iOS 中通常创建一个类，继承自 NSObject 的时候，这就已经是引用类型，我们发现在 Objective-C 中建立 Model 的时候选择的总是继承自 NSObject 的类，而在 Swift 中通常使用 struct 来进行 Model 来建立，重要的一点原因是因为 Swift 语言中，struct、enum 都支持了定义方法，极大的扩展了可用性，再加上值类型的安全性，成了 Model 最好的选择。</p>
<h1 id="struct__u548C_class"><a href="#struct__u548C_class" class="headerlink" title="struct 和 class"></a>struct 和 class</h1><p>我们接下来会详细分析 struct 和 class 的异同。</p>
<h2 id="u5173_u4E8E_u5F15_u7528_u7C7B_u578B_u548C_u7EE7_u627F_u5173_u7CFB"><a href="#u5173_u4E8E_u5F15_u7528_u7C7B_u578B_u548C_u7EE7_u627F_u5173_u7CFB" class="headerlink" title="关于引用类型和继承关系"></a>关于引用类型和继承关系</h2><ul>
<li>struct 是值引用，class 是类型引用；</li>
<li>struct 没有继承，class 有继承功能；</li>
</ul>
<p>关于第一点的区别，上面已经详细讲过原理，不再赘述。第二点区别，struct 没有继承，这是因为 Swift 在本质上来说是面向协议（Protocol Oriented）的语言。</p>
<h2 id="u5173_u4E8E_immutable__u53D8_u91CF"><a href="#u5173_u4E8E_immutable__u53D8_u91CF" class="headerlink" title="关于 immutable 变量"></a>关于 immutable 变量</h2><p>我们都知道在 Swift 语言中，通过 let 和 var 就能够来控制不可变和可变，struct 也是遵循该规则。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s = <span class="type">S</span>()</div><div class="line">s.value = <span class="number">1</span>         <span class="comment">// 该方法会抛出错误，Cannot assign to property: 's' is a 'let' constant</span></div></pre></td></tr></table></figure>
<p>而在 class 中，let 规则是无法延续的。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">C</span>()</div><div class="line"><span class="built_in">c</span>.value = <span class="number">1</span>         <span class="comment">// 可以直接赋值，且不抛出错误</span></div></pre></td></tr></table></figure>
<h2 id="u5173_u4E8E_mutating_function"><a href="#u5173_u4E8E_mutating_function" class="headerlink" title="关于 mutating function"></a>关于 mutating function</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> value = <span class="number">0</span></div><div class="line"></div><div class="line">  <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(<span class="number">_</span> value: Int)</span></span>&#123;</div><div class="line">    <span class="keyword">self</span>.value = value</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> value = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">change</span><span class="params">(<span class="number">_</span> value: Int)</span></span>&#123;</div><div class="line">    <span class="keyword">self</span>.value = value</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们发现两者的区别在于 struct 的方法中添加了 <code>mutating</code> 关键字，这是因为在 struct 中 property 是不允许在方法中修改的，如果需要在方法中修改就需要加上关键字。一般这种情况出现较少，最近在写栈数据结构的时候碰巧遇到了，比如实现栈的 pop、push 方法，就需要对栈的 property 做修改。</p>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/09/11/class_struct_enum/">http://yeziahehe.com/2017/09/11/class_struct_enum/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>Swift 中 struct、enum 都有了很]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="swift" scheme="http://yeziahehe.com/tags/swift/"/>
    
      <category term="技术" scheme="http://yeziahehe.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据结构学习（一）--栈]]></title>
    <link href="http://yeziahehe.com/2017/09/07/Structure_stack/"/>
    <id>http://yeziahehe.com/2017/09/07/Structure_stack/</id>
    <published>2017-09-07T08:59:24.000Z</published>
    <updated>2017-09-11T10:13:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u6808"><a href="#u6808" class="headerlink" title="栈"></a>栈</h1><p>栈（Stack）是所有数据结构中最简单但却是最重要的一种，栈出现的情况在对内含反转数据的应用非常适合。栈是属于 <strong>后进先出 - Last In, First Out（LIFO）</strong> ，最后压入栈中的项总是最先从栈中弹出的项，生活中举个例子说明下，装薯片的时候按顺序装入罐子中，但是吃薯片的时候就要从开口处把最后一个装入的薯片先吃掉。</p>
<p><strong>栈是一种形式的表，属于表类型中的受限表</strong>，即插入和删除只发生在一端（表的末端）。在栈当中我们把这端成为栈顶（top）。当我们对栈顶进行插入操作时，即向栈中增加一项时，称之为入栈（push）；对栈进行删除操作时，即从栈中删除一项时，称之为出栈（pop）。</p>
<h1 id="u6838_u5FC3_u65B9_u6CD5"><a href="#u6838_u5FC3_u65B9_u6CD5" class="headerlink" title="核心方法"></a>核心方法</h1><p>对于栈来说，主要的核心方法就是入栈和出栈两个方法，向栈顶入栈一个”i”的字符串：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stack.push(<span class="string">"i"</span>)</div></pre></td></tr></table></figure></p>
<p>目前栈中间的元素为[“i”]，从栈里面出栈当前的元素：<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stack.pop()</div></pre></td></tr></table></figure></p>
<p>这样返回了元素”i”，并且当前栈为空。继续出栈会导致返回nil，通常在实际应用中这里会做错误处理，“栈下溢（stack underflow）”。</p>
<h1 id="u6E90_u4EE3_u7801"><a href="#u6E90_u4EE3_u7801" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Stack.swift</span></div><div class="line"><span class="comment">//  </span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by 叶帆 on 2017/9/6.</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> array = [<span class="type">T</span>]()</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     获取当前栈的长度</div><div class="line">     - returns: 返回栈的长度，如果Stack为空，则值为0</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> array.<span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     判断是否为空</div><div class="line">     - returns: 如果Stack为空，则值为true，否则值为false</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> isEmpty: <span class="type">Bool</span> &#123;</div><div class="line">        <span class="keyword">return</span> array.isEmpty</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     获取栈顶元素的值</div><div class="line">     - returns: 栈顶元素的值，如果为空返回nil</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">var</span> top: <span class="type">T</span>? &#123;</div><div class="line">        <span class="keyword">return</span> array.last</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     向栈顶插入一个元素</div><div class="line">     - parameter element: 需要插入的值</div><div class="line">     - 时间复杂度: O(1)</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> element: T)</span></span> &#123;</div><div class="line">        array.append(element)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     删除栈顶元素</div><div class="line">     - returns: 返回删除栈顶元素的值，如果为空返回nil</div><div class="line">     - 时间复杂度: O(1)</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</div><div class="line">        <span class="keyword">return</span> array.popLast()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Stack</span>: <span class="title">Sequence</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">makeIterator</span><span class="params">()</span></span> -&gt; <span class="type">AnyIterator</span>&lt;<span class="type">Element</span>&gt; &#123;</div><div class="line">        <span class="keyword">var</span> curr = <span class="keyword">self</span></div><div class="line">        <span class="keyword">return</span> <span class="type">AnyIterator</span> &#123;</div><div class="line">            <span class="number">_</span> -&gt; <span class="type">Element</span>? <span class="keyword">in</span></div><div class="line">            <span class="keyword">return</span> curr.pop()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="u5E94_u7528_u573A_u666F"><a href="#u5E94_u7528_u573A_u666F" class="headerlink" title="应用场景"></a>应用场景</h1><p>栈的强项是处理反转的能力，所以实际的应用场景都是和此相关的。</p>
<h2 id="u56DE_u6587_u5B57_u7B26_u4E32"><a href="#u56DE_u6587_u5B57_u7B26_u4E32" class="headerlink" title="回文字符串"></a>回文字符串</h2><p>所谓的回文字符串就是指那些正读和反读均相同的字符系列，如“席主席”，“aha”均是回文，通过栈这种数据结构可以很容易判断一个字符串是否为回文。</p>
<p>大概的思路就是找到中间的值，把中间值以前的放入栈中，然后一个个出栈，并且在出栈的同时和中间值以后的值进行比对。如果top为空的时候就说明符合回文的规则。</p>
<h2 id="u9006_u6CE2_u5170_u8BA1_u7B97_u5668"><a href="#u9006_u6CE2_u5170_u8BA1_u7B97_u5668" class="headerlink" title="逆波兰计算器"></a>逆波兰计算器</h2><p>所谓的逆波兰计算器指的就是在这样的计算器中，操作数（通常是数字）在操作被指定前输入，操作数放入栈中。当操作执行时，操作数从栈中弹出并且把操作结果入栈。</p>
<h2 id="u62EC_u53F7_u7684_u5339_u914D"><a href="#u62EC_u53F7_u7684_u5339_u914D" class="headerlink" title="括号的匹配"></a>括号的匹配</h2><p>在程序中，通常会对<code>{}</code>、<code>[]</code>、<code>()</code>、<code>&lt;&gt;</code>来进行括号的匹配。</p>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/09/07/Structure_stack/">http://yeziahehe.com/2017/09/07/Structure_stack/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u6808"><a href="#u6808" class="headerlink" title="栈"></a>栈</h1><p>栈（Stack）是所有数据结构中最简单但却是最重要的一种，栈出现的情况在对内含反转数据的应用非常适合。栈是属于 <strong>后进]]>
    </summary>
    
      <category term="算法" scheme="http://yeziahehe.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yeziahehe.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈" scheme="http://yeziahehe.com/tags/%E6%A0%88/"/>
    
      <category term="算法" scheme="http://yeziahehe.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用 Background Fetch + UNUserNotificationCenter 实现伪推送]]></title>
    <link href="http://yeziahehe.com/2017/07/19/Background_Fetch_and_UNUserNotificationCenter/"/>
    <id>http://yeziahehe.com/2017/07/19/Background_Fetch_and_UNUserNotificationCenter/</id>
    <published>2017-07-19T15:12:46.000Z</published>
    <updated>2017-07-19T15:12:48.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p><strong>Tips：UNUserNotificationCenter 从 iOS 10 开始支持，低于版本的本地推送请自行谷歌。</strong></p>
<p>最近项目里面利用了第三方的 API，由干货集中营提供每日干货。由于没办法实现远程推送，考虑通过本地推送 + 后台获取的方式来实现【伪推送】，其实很多第三方的客户端，如微博的第三方客户端 Moke、奇点，HIPDA 论坛的第三方客户端，都是采用这样的方式进行推送的。如果有自己仿写第三方客户端的小伙伴，不妨试试这个方式来为你的 App 添加上推送（wei）功能。</p>
<h1 id="Background_Fetch"><a href="#Background_Fetch" class="headerlink" title="Background Fetch"></a>Background Fetch</h1><p>Background Fetch 是 Apple 官方在 iOS 7 推出的来后台刷新，提高用户体验的新方法。首先先参照苹果官方文档 <a href="https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html" target="_blank" rel="external">Background Execution</a>，后台获取干的事情就是在用户打开应用之前就使app有机会执行代码来获取数据，刷新UI，极大的提高了用户体验。</p>
<p>如何实现该功能呢？</p>
<h2 id="u5F00_u542F_u540E_u53F0_u83B7_u53D6"><a href="#u5F00_u542F_u540E_u53F0_u83B7_u53D6" class="headerlink" title="开启后台获取"></a>开启后台获取</h2><p>Targets - [Project] - Capabilities - Background Modes - Background fetch，即告诉系统应用开启后台获取的权限。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/xcode_background_fetch.jpg" alt="Background fetch"></p>
<h2 id="u8BBE_u7F6E_u65F6_u95F4_u95F4_u9694"><a href="#u8BBE_u7F6E_u65F6_u95F4_u95F4_u9694" class="headerlink" title="设置时间间隔"></a>设置时间间隔</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">UIApplication</span>.shared.setMinimumBackgroundFetchInterval(<span class="type">UIApplicationBackgroundFetchIntervalMinimum</span>)</div></pre></td></tr></table></figure>
<p>默认的值是 <code>UIApplicationBackgroundFetchIntervalNever</code>，这种情况下是不会使用后台获取。<code>setMinimumBackgroundFetchInterval</code> 的值除了提供的集合之外，任意的 NSTimeInterval 都可以设置。如果设置值，那么你能在应用中看到 <strong>后台应用刷新</strong> 是打开状态。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/back_refresh.jpeg?imageView2/2/h/750" alt="后台刷新"></p>
<p>有人会问你把时间设置到最小，那么是不是应用时时刻刻都在刷新数据。答案显然不是！以 iOS 系统的脾气，当然不会让你这么为所欲为。那么，刷新的时机是什么时候？完全取决与系统。可能是你打开微信刷朋友圈的时候，帮你刷新一下；也可能单独为你唤醒设备来刷新一下。其实后来发现系统会记录我们的行为习惯，将获取刷新的时间调整到符合你行为习惯的时间。不过我们暂且不管获取的时机，应该根据应用的实际情况来进行时间间隔设置，毕竟用这个来做伪推送，那么推送刷新的及时性不是那么强，所以尽可能的长或许是个不错的选择。甚至于我在 App 中是跟用户讲清楚了机制，并且用户可以选择关闭或者开启，以及设置间隔时长。</p>
<h2 id="u5B9E_u73B0"><a href="#u5B9E_u73B0" class="headerlink" title="实现"></a>实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(<span class="number">_</span> application: UIApplication, performFetchWithCompletionHandler completionHandler: @escaping <span class="params">(UIBackgroundFetchResult)</span></span></span> -&gt; <span class="type">Void</span>) &#123;</div><div class="line">  <span class="keyword">if</span> <span class="type">GankUserDefaults</span>.isBackgroundEnable.value == <span class="literal">false</span> &#123;</div><div class="line">      completionHandler(.noData)</div><div class="line">      <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="type">GankBackgroundFetchService</span>.shared.performFetchWithCompletionHandler &#123; (result) <span class="keyword">in</span></div><div class="line">      <span class="type">SafeDispatch</span>.async &#123;</div><div class="line">          completionHandler(result)</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AppDelegate 中的 <code>-application:performFetchWithCompletionHandler:</code> 方法来实现处理，你想通这边处理的数据、UI 和你在其他地方一样，唯一限制的就是时间不能超过 1 分钟，比如大图片的上传下载这种操作不要放在这边处理。CompletionHandler 会接受到 <code>UIBackgroundFetchResult</code> 闭包值，可选结果有 <code>.noData</code>、<code>.newData</code>、<code>.failed</code> 三种情况。</p>
<h2 id="u8C03_u8BD5"><a href="#u8C03_u8BD5" class="headerlink" title="调试"></a>调试</h2><p>关于调试，分为两种情况。一种是通过 Background Fetch 直接打开应用，另一种是应用在后台的时候模拟一次 Background Fetch 的情况。这边我只提供第二种测试方案，第一种相对麻烦，我后台通过真机测试了下。第二种情况跑通能且只能说明 Background Fetch 没有问题了。但是直接打开应用对数据的处理，确实需要第一种情况测试下，这边提供喵神的文章 <a href="https://onevcat.com/2013/08/ios7-background-multitask/" target="_blank" rel="external">WWDC 2013 Session笔记 - iOS7中的多任务</a> 作为参考。</p>
<p>模拟后台运行，只需要选择 Xcode 的 Debug - Simulate Background Fetch，即可模拟一次。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/debug.png" alt="Debug"></p>
<h1 id="UNUserNotificationCenter"><a href="#UNUserNotificationCenter" class="headerlink" title="UNUserNotificationCenter"></a>UNUserNotificationCenter</h1><p>接下来我们来聊聊推送的事情，那天我看了下 iOS 的推送，从 iOS 7 开始苹果为了整合推送的 API 和易用性，做了大量的调整，几乎一个版本一个花样，可以想象到激光推送这样的三方推送平台内心是崩溃的。</p>
<p>关于推送问题，这里不做过多的赘述，因为只是使用了最简单的本地推送，如果你对推送新特性有兴趣，同样推荐喵神的文章 <a href="https://onevcat.com/2016/08/notification/" target="_blank" rel="external">活久见的重构 - iOS 10 UserNotifications 框架解析</a> 作为参考，写的非常细致。</p>
<p>我这边直接讲解推送和后台刷新结合的问题，刚刚说到在 <code>-application:performFetchWithCompletionHandler:</code> 方法来实现处理。我给了一个 <code>UserDefaults</code> 讲是否是今天的日期存储下来，从来来决定是否推送。注意大家要根据实际情况来进行处理，我这边内容一天只会更新一次。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">checkAuthorization</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="type">UNUserNotificationCenter</span>.current().getNotificationSettings(completionHandler: &#123; settings <span class="keyword">in</span></div><div class="line">        <span class="type">SafeDispatch</span>.async &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="keyword">switch</span> settings.authorizationStatus &#123;</div><div class="line">            <span class="keyword">case</span> .notDetermined:</div><div class="line">                <span class="keyword">self</span>?.authorize()</div><div class="line">            <span class="keyword">case</span> .authorized:</div><div class="line">                gankLog.debug(<span class="string">"UserNotifications authorized"</span>)</div><div class="line">            <span class="keyword">case</span> .denied:</div><div class="line">                <span class="type">UIApplication</span>.shared.<span class="keyword">open</span>(<span class="type">URL</span>(string: <span class="type">UIApplicationOpenSettingsURLString</span>)!, options: [:], completionHandler: <span class="literal">nil</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code>getNotificationSettings</code> 来进行当前 Notication 状态的获取，从来进行操作。一共有三种状态 <code>.notDetermined</code>、<code>.authorized</code>、<code>.denied</code>，分别对应着仍未询问、已授权和已拒绝。可以看到我分别做了处理，未询问去进行授权提醒，而已经拒绝，可以通过方法跳转到应用的设置页面，即上面后台刷新那张图中进行状态的修改。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">authorize</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="type">UNUserNotificationCenter</span>.current().requestAuthorization(options: [.alert, .sound]) &#123; (granted, error) <span class="keyword">in</span></div><div class="line">        <span class="type">SafeDispatch</span>.async &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">            <span class="keyword">self</span>?.initAuthorization()</div><div class="line">            <span class="keyword">if</span> granted &#123;</div><div class="line">                gankLog.debug(<span class="string">"UserNotifications authorized"</span>)</div><div class="line">                <span class="type">GankBackgroundFetchService</span>.shared.turnOn()</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                gankLog.debug(<span class="string">"UserNotifications denied"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过 <code>requestAuthorization</code> 进行推送权限获取，注意这边获取如果用户拒绝了，那么不管你之后怎么调用这个方法，询问权限获取的弹窗都不会再出现。所以一定要注意询问的时期，最好不要再一打开 App 就进行询问，很容易被用户进行拒绝。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> content = <span class="type">UNMutableNotificationContent</span>()</div><div class="line">content.title = <span class="type">String</span>.titleContentTitle</div><div class="line">content.body = <span class="type">String</span>.messageTodayGank</div><div class="line">content.sound = <span class="type">UNNotificationSound</span>.<span class="keyword">default</span>()</div><div class="line"><span class="keyword">let</span> trigger = <span class="type">UNTimeIntervalNotificationTrigger</span>(timeInterval: <span class="number">1</span>, repeats: <span class="literal">false</span>)</div><div class="line"><span class="keyword">let</span> requestIdentifier = <span class="string">"gank update"</span></div><div class="line"><span class="keyword">let</span> request = <span class="type">UNNotificationRequest</span>(identifier: requestIdentifier, content: content, trigger: trigger)</div><div class="line"><span class="type">UNUserNotificationCenter</span>.current().add(request, withCompletionHandler: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>最后发送推送，这边给的是最基础的推送内容。</p>
<h1 id="u6700_u540E"><a href="#u6700_u540E" class="headerlink" title="最后"></a>最后</h1><p>到此，通过 Background Fetch + UNUserNotificationCenter 实现伪推送就都完成了。这两个部分我都封装了 Service：<a href="https://github.com/yeziahehe/Gank/blob/master/Gank/Services/GankBackgroundFetchService.swift" target="_blank" rel="external">GankBackgroundFetchService</a> 和 <a href="https://github.com/yeziahehe/Gank/blob/master/Gank/Services/GankNotificationService.swift" target="_blank" rel="external">GankNotificationService</a>，希望对你有帮助。</p>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/07/19/Background_Fetch_and_UNUserNotificationCenter/">http://yeziahehe.com/2017/07/19/Background_Fetch_and_UNUserNotificationCenter/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p><strong>Tips：UNUserNotif]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yeziahehe.com/tags/Swift/"/>
    
      <category term="技术" scheme="http://yeziahehe.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 UIFeedbackGenerator 来实现触觉反馈]]></title>
    <link href="http://yeziahehe.com/2017/07/07/Haptic_feedback_with_uifeedbackgenerator/"/>
    <id>http://yeziahehe.com/2017/07/07/Haptic_feedback_with_uifeedbackgenerator/</id>
    <published>2017-07-07T07:47:29.000Z</published>
    <updated>2017-07-07T16:45:17.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p><strong>Tips：触觉反馈的特性从 iOS 10 开始支持，并且需要iPhone 7 和 iPhone 7 Plus 内置的新 Taptic 引擎支持这些应用程序接口（API）。</strong></p>
<p>最近在使用饿了么定外卖的时候，偶然感觉到饿了么下拉刷新有个震动。起初我并不知道这个是触觉反馈，后来我发现包括调用 Apple Pay 支付的时候，成功和失败都回引起触觉反馈。</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/system.jpg" alt=""></th>
<th style="text-align:center"><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/ele.jpg" alt=""></th>
<th style="text-align:center"><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/Apple_Pay.jpg" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">系统触感强度设置</td>
<td style="text-align:center">饿了么刷新触觉反馈</td>
<td style="text-align:center">Apple Pay 支付成功和失败触觉反馈</td>
</tr>
</tbody>
</table>
<h1 id="u89E6_u89C9_u53CD_u9988"><a href="#u89E6_u89C9_u53CD_u9988" class="headerlink" title="触觉反馈"></a>触觉反馈</h1><p>iOS 10 引入了一种新的产生触觉反馈的方式，通过使用系统的预定义震动模式，让用户在进行操作时得到不同的震动反馈。这个功能有新增的 <code>UIFeedbackGenerator</code> 提供，根据官方的<a href="https://developer.apple.com/documentation/uikit/uifeedbackgenerator" target="_blank" rel="external">文档</a>：</p>
<blockquote>
<p>The abstract superclass for all feedback generators.</p>
</blockquote>
<p>该类为一个抽象类，提供三个子类 <code>UIImpactFeedbackGenerator</code>、<code>UISelectionFeedbackGenerator</code> 和 <code>UINotificationFeedbackGenerator</code>。</p>
<h2 id="UIImpactFeedbackGenerator"><a href="#UIImpactFeedbackGenerator" class="headerlink" title="UIImpactFeedbackGenerator"></a>UIImpactFeedbackGenerator</h2><blockquote>
<p>Use impact feedback generators to indicate that an impact has occurred.</p>
</blockquote>
<p>预示着按压发生了。比如系统触感强度设置就是为了在你按 Home 键的时候给你一反馈，实际上 iPhone 7 的 Home 键并可以按动。</p>
<p><code>UIImpactFeedbackStyle</code> 一共是三种：<code>.light</code>、<code>.medium</code>、<code>heavy</code>，分别对应了系统触感强度里面的 1、2、3。</p>
<h2 id="UISelectionFeedbackGenerator"><a href="#UISelectionFeedbackGenerator" class="headerlink" title="UISelectionFeedbackGenerator"></a>UISelectionFeedbackGenerator</h2><blockquote>
<p>Use selection feedback generators to indicate a change in selection.</p>
</blockquote>
<p>预示着选择的变化。比如饿了么的刷新触觉反馈，这里普及一下，这种刷新反馈是因为饿了么使用的系统的 <code>UIRefreshControl</code> 方法去做的下拉刷新，而系统为这种方法下拉的 <code>offsetY</code> 做了触觉反馈的适配。</p>
<h2 id="UINotificationFeedbackGenerator"><a href="#UINotificationFeedbackGenerator" class="headerlink" title="UINotificationFeedbackGenerator"></a>UINotificationFeedbackGenerator</h2><blockquote>
<p>Use notification feedback generators to indicate successes, failures, and warnings.</p>
</blockquote>
<p>预示着成功、失败和警告。比如 Apple_Pay 支付成功和失败的反馈，这里比较了下三种情况的反馈，应该是在力度上面有所差别。和 Impact 的差别在于，这里的触觉反馈类似左右摇动两下。</p>
<p><code>UINotificationFeedbackType</code> 同样也是三种：<code>.success</code>、<code>.warning</code>、<code>error</code>。</p>
<h1 id="u7528_u6CD5"><a href="#u7528_u6CD5" class="headerlink" title="用法"></a>用法</h1><p>最后讲一下用法，掘金的翻译计划 <a href="https://juejin.im/entry/5810433ac4c9710058a74100" target="_blank" rel="external">[译] 如何使用 UIFeedbackGenerator 让应用支持 iOS 10 的触觉反馈</a> 中，给出了一个 Demo。注意 Demo 中有个问题，<strong>addsubview 应该在添加约束之前，否则会引起崩溃。</strong></p>
<p>不过根据官方的文档,触发触觉效果之前，在你的生成器 (generator) 内调用 prepare() 方法，这样可以有效的减少延迟。可以参考官方文档中的代码，也可以参考如下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> feedbackGenerator : <span class="type">UIImpactFeedbackGenerator</span>? = <span class="type">UIImpactFeedbackGenerator</span>(style: .heavy)</div><div class="line"></div><div class="line"><span class="keyword">deinit</span> &#123;</div><div class="line">    feedbackGenerator = <span class="literal">nil</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    feedbackGenerator?.prepare()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">getNewGank</span><span class="params">(<span class="number">_</span> sender: UIBarButtonItem)</span></span> &#123;</div><div class="line">    feedbackGenerator?.impactOccurred()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/07/07/Haptic_feedback_with_uifeedbackgenerator/">http://yeziahehe.com/2017/07/07/Haptic_feedback_with_uifeedbackgenerator/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p><strong>Tips：触觉反馈的特性从 iO]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yeziahehe.com/tags/Swift/"/>
    
      <category term="技术" scheme="http://yeziahehe.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UITableViewCell 高度自适应牵扯出的若干问题]]></title>
    <link href="http://yeziahehe.com/2017/06/30/UITableViewCell_Self_Sizing/"/>
    <id>http://yeziahehe.com/2017/06/30/UITableViewCell_Self_Sizing/</id>
    <published>2017-06-30T02:43:19.000Z</published>
    <updated>2017-07-01T04:47:28.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>阔别了一年写代码的感觉，工作以来一直从事产品经理的相关工作，最近开始寻找当年写代码的感觉。碰巧上来被一个原以为很简单的问题困扰了很久，下面给大家详细讲讲使用 Self-Sizing Cell 做高度自适应遇到的若干坑。</p>
<h1 id="Self-Sizing_Cell"><a href="#Self-Sizing_Cell" class="headerlink" title="Self-Sizing Cell"></a>Self-Sizing Cell</h1><p>Self-Sizing 是 Apple 在 iOS 8 之后推出的新技术，是用于在调整系统字体大小后，控件元素中的文字能跟自动使用布局，下图所示的就是配合 Self-Sizing 推出的系统修改字体。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/font_size.jpeg?imageView2/2/h/750" alt="文字大小"></p>
<p>在 iOS8 以前，决定 tableviewcell 的高度的都是 <code>tableView:heightForRowAt:</code>，在该方法中手动计算 cell 的高度。iOS 8 之后，Apple 推出了新技术 Self-Sizing，通过 Working with Self-Sizing Tableview cells，将 cell 和 Self-Sizing 进行配合使用后这个协议函数就不用管了，高度系统会自动进行计算。具体的实现方式如下：</p>
<h2 id="Step_One"><a href="#Step_One" class="headerlink" title="Step One"></a>Step One</h2><p>通过 StoryBoard 新建 Custom TableView Cell，并且把要自适应文本高度的 UILabel 添加上约束。约束的原则如果上下左右没有其他元素，直接和 SuperView 做相对约束，如果有其他元素，则其他元素需要布局确定，UILabel 做相对约束。注意很重要的一点，<strong>最后 UILabel 的约束最后对宽和高都没有做约束，只有上下左右四边的约束看</strong>，这样的 Cell 才可以进行高度自适应。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/Storyboard_AutoLayout.png" alt="设置 StoryBoard"></p>
<h2 id="Step_Two"><a href="#Step_Two" class="headerlink" title="Step Two"></a>Step Two</h2><p>在代码中添加两个方法，接下来加载出数据的时候就可以自动计算高度。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    tableView.rowHeight = <span class="type">UITableViewAutomaticDimension</span></div><div class="line">    tableView.estimatedRowHeight = <span class="number">100</span><span class="comment">//估算高度尽可能的接近 cell 的高度</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="u7531_u6B64_u5F15_u53D1_u7684_u95EE_u9898"><a href="#u7531_u6B64_u5F15_u53D1_u7684_u95EE_u9898" class="headerlink" title="由此引发的问题"></a>由此引发的问题</h1><h2 id="1-willDisplayCell_3AforRowAtIndexPath_3A_and_cellForRowAtIndexPath_3A"><a href="#1-willDisplayCell_3AforRowAtIndexPath_3A_and_cellForRowAtIndexPath_3A" class="headerlink" title="1.willDisplayCell:forRowAtIndexPath: and cellForRowAtIndexPath:"></a>1.willDisplayCell:forRowAtIndexPath: and cellForRowAtIndexPath:</h2><p>在关于优化 UITableView 的文章中，提到了一个优化方案。</p>
<blockquote>
<p>我们经常在注意cellForRowAtIndexPath：中为每一个cell绑定数据，实际上在调用cellForRowAtIndexPath：的时候cell还没有被显示出来，为了提高效率我们应该把数据绑定的操作放在cell显示出来后再执行，可以在tableView：willDisplayCell：forRowAtIndexPath：方法中绑定数据。</p>
</blockquote>
<p>我刚刚开始对这个观点是认可，并且也确实这么做了，于是代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    <span class="keyword">let</span> cell: <span class="type">CustomCell</span> = tableView.dequeueReusableCell()</div><div class="line">    <span class="keyword">return</span> cell</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath)</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> cell = cell <span class="keyword">as</span>? <span class="type">CustomCell</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    cell.titleLabel.text = <span class="type">Json</span>.desc</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在执行上述代码之后，我发现了一个问题，UITableViewCell 的高度加载并不正确，是估算的高度，并不是计算的高度，如下图。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/cell_height.png?imageView2/2/h/750" alt="未计算出正确高度"></p>
<p>滑动之后新加载的 TableViewCell 高度为计算出来且正确。（继承 UITableViewViewController 即 Delegate and DataSource 方法为 override 可以滑动加载正确高度；而继承自 UIViewController 即 Delegate and DataSource 方法是 extension 滑动也不可以加载正确高度。<strong>注意，后面的继承未写 Demo 论证，若有不对请指出</strong>）</p>
<p>从上面的问题里面，我开始寻找两个方法的作用和遇到类似问题的解答方式，我在 Stack Overflow 上面找到了类似的问题 <strong><a href="https://stackoverflow.com/questions/42649231/uitableview-cellforrowat-vs-willdisplay/42649420#42649420" target="_blank" rel="external">UITableView cellForRowAt vs willDisplay</a></strong>。上面阐述的解释是高度的计算是在 <code>cellForRowAtIndexPath:</code> 之后，在 <code>willDisplayCell:forRowAtIndexPath:</code> 之前，所以需要再次调用 <code>reloadData</code> 方法。</p>
<blockquote>
<p>My understanding that at height is calculating after cellForRowAt but before willDisplay, so when I’m mapping in willDisplay height is already set for my cell and I need to reload it again (which is not good).</p>
</blockquote>
<p>这个结论我是认同，所以解决这个问题的办法就有两个方案。</p>
<ul>
<li>将数据绑定从 <code>willDisplayCell:forRowAtIndexPath:</code> 中移到 <code>cellForRowAtIndexPath:</code> 中；</li>
<li>再次调用 <code>reloadData</code> 放大，代码如下：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.tableView.reloadData()</div><div class="line"><span class="comment">// 3 new lines of codes to force size adjustment</span></div><div class="line"><span class="keyword">self</span>.tableView.setNeedsLayout()</div><div class="line"><span class="keyword">self</span>.tableView.layoutIfNeeded()</div><div class="line"><span class="keyword">self</span>.tableView.reloadData()</div></pre></td></tr></table></figure>
<p>上述两个方案，第二个方案是强制高度自适应，具体可以参考这边文章 <a href="http://jianjye.com/swift-resize-uitextview-tableviewcell-correctly-json-fetch/#comment-512" target="_blank" rel="external">Swift: How to Resize UITextView + TableViewCell Correctly After JSON Fetch</a>，但是这个方法显得很臃肿，也并不能算是优雅的解决方案。于是我看到第一个方案时产生了疑问：</p>
<p><strong>【为了提高效率我们应该把数据绑定的操作放在 cell 显示出来后再执行】</strong> 这个观点是正确的吗？</p>
<h2 id="u6570_u636E_u7ED1_u5B9A_u5E94_u8BE5_u653E_u5728_u54EA_u513F_uFF1F"><a href="#u6570_u636E_u7ED1_u5B9A_u5E94_u8BE5_u653E_u5728_u54EA_u513F_uFF1F" class="headerlink" title="数据绑定应该放在哪儿？"></a>数据绑定应该放在哪儿？</h2><p>我们首先看下苹果官方文档关于 <code>willDisplayCell:forRowAtIndexPath:</code> 的解释，该方法应该是修改状态类型基本属性，比如选择状态、背景颜色等等：</p>
<blockquote>
<p>This method gives the delegate a chance to override state-based properties set earlier by the table view, such as selection and background color.</p>
</blockquote>
<p>官方文档关于 <code>cellForRowAtIndexPath:</code> 的解释，该方法应该是讲数据源插入到 UITableView 正确的位置：</p>
<blockquote>
<p>Asks the data source for a cell to insert in a particular location of the table view.</p>
</blockquote>
<p>在此同时，我看到了一篇详细的文章 <a href="https://tech.zalando.com/blog/proper-use-of-cellforrowatindexpath-and-willdisplaycell/" target="_blank" rel="external">Proper Use of CellForRowAtIndexPath and WillDisplayCell</a>，文章中指出：</p>
<blockquote>
<p>Orlov’s article is an important guide for advanced programming. However, he is lacking proof for the tableView delegate method willDisplayCell:forRowAtIndexPath:. This has been something that has bothered me for a while, as so many people quoted the paragraph about willDisplayCell from the article.</p>
</blockquote>
<p>很重要的一句话，<strong>并没有任何理由能够支持他说的绑定数据在 willDisplayCell 能够提高 UITableView 的性能</strong>。并且他做了实验，发现 <code>layoutSubviews</code> 是在 <code>willDisplayCell:forRowAtIndexPath:</code> 和 <code>cellForRowAtIndexPath:</code> 两个方法之后，也就是说不管你在哪个方法中去绑定数据，cell 被 layouted 总在他们之后，那么在这之前就不会 Rendering，也就不存在绑定数据在 <code>cellForRowAtIndexPath:</code> 方法中会影响性能。</p>
<p>那么，这个优化方案并没有任何理论根据，于是忘了吧，<del>我们经常在注意cellForRowAtIndexPath：中为每一个cell绑定数据，实际上在调用cellForRowAtIndexPath：的时候cell还没有被显示出来，为了提高效率我们应该把数据绑定的操作放在cell显示出来后再执行，可以在tableView：willDisplayCell：forRowAtIndexPath：方法中绑定数据。</del></p>
<p><strong>注意，关于 Orlov’s article 虽然提升这一点没有被佐证，但是其他的优化方案非常值得学习，</strong> 我这边附上链接，有兴趣可以学习！注意使用梯子~~ <a href="https://medium.com/ios-os-x-development/perfect-smooth-scrolling-in-uitableviews-fd609d5275a5" target="_blank" rel="external">文章：perfect smooth scrolling in uitableviews</a></p>
<h2 id="u81EA_u52A8_u8BA1_u7B97_u52A0_u8F7D_u4E86_u51E0_u6B21_uFF1F"><a href="#u81EA_u52A8_u8BA1_u7B97_u52A0_u8F7D_u4E86_u51E0_u6B21_uFF1F" class="headerlink" title="自动计算加载了几次？"></a>自动计算加载了几次？</h2><p>本来到这边应该结束文章，但是在探讨上述问题的时候，发现了很奇怪的一件事情。如果你在 UITableView Delegate 或者 DataSource 方法中打印一下，会发现每个方法中的打印出现了2遍。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/print_twice.png" alt="打印两边"></p>
<p>于是，我参考了两篇文章：<a href="https://stackoverflow.com/questions/41318864/scrollviewdidscroll-is-called-twice-after-set-table-offset" target="_blank" rel="external">scrollViewDidScroll is called “twice” after set table offset</a>、<a href="https://discussions.apple.com/thread/7111979?start=0&amp;tstart=0" target="_blank" rel="external">heightForRowAtIndexPath called twice in iOS 8 but one time in iOS 7</a></p>
<p><code>tableView.estimatedRowHeight = 100</code> 这句话是引起 UITableView 加载两次的原因，注释掉这句话后，发现打印一次。我并没有找到合理的理由去解释这个原因，网上部分猜测是 Apple 官方的 Bug，如果大家对这个问题有更好的解释，不妨联系我，我会第一时间更新。</p>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2017/06/30/UITableViewCell_Self_Sizing/">http://yeziahehe.com/2017/06/30/UITableViewCell_Self_Sizing/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>阔别了一年写代码的感觉，工作以来一直从事产品经理]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yeziahehe.com/tags/Swift/"/>
    
      <category term="技术" scheme="http://yeziahehe.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016-10 读书小记]]></title>
    <link href="http://yeziahehe.com/2016/10/30/October_Reading/"/>
    <id>http://yeziahehe.com/2016/10/30/October_Reading/</id>
    <published>2016-10-30T14:44:55.000Z</published>
    <updated>2017-06-30T02:43:55.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5341_u6708_u8BFB_u4E66_u5C0F_u8BB0"><a href="#u5341_u6708_u8BFB_u4E66_u5C0F_u8BB0" class="headerlink" title="十月读书小记"></a>十月读书小记</h1><ul>
<li><strong>《皮囊》</strong>：一个很长的故事，陆陆续续的看了很久，已经不是记忆很深刻了。叙事的风格非常的慢，但是却慢慢的用细腻的感情在浸入你的心灵，很好的一本书。最打动人心的东西，永远是亲情。</li>
<li><strong>《白鹿原》</strong>：忽然间很想看的，很早看过电影。书的内容远远比电影来的要丰富的多，年代感非常强，人物性格很鲜明，不同的人，不同的选择，以及在时代背景下人人都要妥协。看完更多的是对人性有了认识和思考。</li>
<li><strong>《嫌疑人X的献身》</strong>：东野圭吾最经典的小说，一直到最后我才知道这个局的谜底，很震撼，很意外。强烈建议大家读一读。</li>
<li><strong>《从你的全世界路过》</strong>：张嘉佳，因为电影火了，就顺便看了看。就如同张嘉佳自己说的那样，这本书里的很多故事被影视圈的朋友们排成电影。书中的故事都是亲情、友情、爱情。我被其中几篇文章感动到了，曾经一度泪流满面。很不错的读物，有时间看看，你可能会对除了事业以外的很多东西有更多不一样的看法。</li>
<li><strong>《惊奇物语》</strong>：消磨时间的书。</li>
</ul>
<h1 id="u8BF4_u4E24_u53E5"><a href="#u8BF4_u4E24_u53E5" class="headerlink" title="说两句"></a>说两句</h1><p>这个月的书，明显鸡汤少了很多，回过头来看看，才发现，其实啊，人的这一生，年轻的时候，把一切都看的太重要，工作、婚姻、生活、压力，这些事情让我们在青年、中年的时候会喘不过气来，会没有时间去思考很多事情。人们总是说村里最有智慧的是年长的人，其实因为他们放下来很多东西，看到了更多应该去看到的东西。人是社会里面的连接体，会与周遭的一切有着各种各样的联系，有些值得去维系，有些值得去放弃。人这一生麻烦的事情会有很多，遇到事情千万别逃避，因为最后总要解决，不管过程怎么样，勇于去面对，才是面对人生，面对明天最正确的姿态。</p>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2016/10/30/October_Reading/">http://yeziahehe.com/2016/10/30/October_Reading/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5341_u6708_u8BFB_u4E66_u5C0F_u8BB0"><a href="#u5341_u6708_u8BFB_u4E66_u5C0F_u8BB0" class="headerlink" title="十月读书小记"></a>十月读书小记</h1]]>
    </summary>
    
      <category term="读书" scheme="http://yeziahehe.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="读书" scheme="http://yeziahehe.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016-09 读书小记]]></title>
    <link href="http://yeziahehe.com/2016/09/12/September_Reading/"/>
    <id>http://yeziahehe.com/2016/09/12/September_Reading/</id>
    <published>2016-09-12T02:41:46.000Z</published>
    <updated>2016-09-30T06:02:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u4E5D_u6708_u8BFB_u4E66_u5C0F_u8BB0"><a href="#u4E5D_u6708_u8BFB_u4E66_u5C0F_u8BB0" class="headerlink" title="九月读书小记"></a>九月读书小记</h1><p>上次给大家提到了 <strong>微信读书</strong>，真的是被深深的迷上了这个软件，这个月阅读电子书的数量和时间非常的多。</p>
<p>9月整理了下书，这个月读的书按照先后顺序如下：</p>
<ul>
<li><strong>《解忧杂货店》</strong>：最近非常火的一本书，作者是<a href="http://baike.baidu.com/link?url=CZIw00CRktQgrKveTCryvFh_iNZnxhzuq6hR4b-OUSajpOzk47XfY-KAoRzTyW33AMh9sY6ln4Y55TT_o7MCbK" target="_blank" rel="external">东吾圭野</a>，日本非常著名的推理小说家，所创作的书逻辑滴水不漏，架构匪夷所思。我看了解忧杂货店，非常大的感受就是，<strong>如果自己不积极认真的生活，不管得到怎么样的回答都没有用。别人的回答只是坚定自己内心深处的想法，让自己更有勇气去实现自己内心的声音。</strong></li>
<li><strong>《MacTalk·人生元编程》</strong>：池老师，现在在锤子，把他博客里面的文章整理成的书，内容比较杂，对自己人生观和职业观影响会多点，可以花几个小时翻一翻。</li>
<li><strong>《过得刚好》</strong>：郭德纲的自传，算是现在时代下的枭雄。作为相声人，这一辈子也算是比较传奇的，早期为了生计，后期为了相声的传承。经历过大起大落，也同样经历过大是大非，心态、心境确实不是一般人能达到的。他的经历不可复制，没有相似性，正如世间仅此一个郭德纲，他的经历却又符合历史的发展，相声成就了老郭，同样老郭也成就了相声。</li>
<li><strong>《随遇而安》</strong>：孟非的自传，正如他所说平淡的一生。孟非真的是人生的各种选择和运气，让他到了现在的成就。如果当年就那样在印刷厂，估计现在还是阶级的最底层。不可否认，他是有内涵，在我心里面，他算作最有内涵的人第二名。他能平淡的把批判的话讲出来，不那么生硬，很自然，很在理。看孟非，我始终觉得是个挺简单的人。</li>
<li><strong>《天才在左，疯子在右》</strong>：这本书吧，我看到陈乔恩在《我们来了》里面推荐过。讲真的，从早开始看的时候的惊悚，到后来我慢慢的开始思考，再到最后对世界观和别人眼中世界的尊重。我能理解，自然中总会有很多你不能用科学去解释的事情，一是因为科技说明远没有那么发达，更重要的是也许这真的就是自然奇妙的地方。我看的感受，就是不管别人眼中的世界观和价值观是怎么样，你可以不理解，但是不能不尊重。我看完这本书，就有种想去研究精神学和物理学的冲动，不得不说，其实人啊，真的很渺小。从宏观的角度去看，我们现在困扰、纠结的事情真的在时间面前犹如蝼蚁一般，所以积极的去面对这个世界，去拥抱美好，去敬畏未知，去积极的生活下去，也许是作者最想告诉我们的。</li>
<li><strong>《人人都是产品经理》</strong>：产品经理入门比较经典的书籍，很快的时间看完了，主要还是要悟出自己的思路出来。</li>
</ul>
<h1 id="u8BF4_u4E24_u53E5"><a href="#u8BF4_u4E24_u53E5" class="headerlink" title="说两句"></a>说两句</h1><p>我特别有感触的一句话，<strong>【成功：一分天赋、三分努力、六分运气】</strong>。也是从我看到老郭和老孟的自传想说的，选择比努力更重要。一个人在世间，从他离开校园的那一刻开始，平台优势、起点优势都不复存在了。你会发现，从进入社会的那刻，似乎大家都开始感觉生活很坚信，你总会经过迷茫的时间，区别在于什么时候你能从那其中跳出来，宏观的去看自己的发展。选择就是那六分运气的基础。没有最好的选择，没有最坏的选择，只有最适合自己的基础，给自己定个小目标吧，纯粹的目标，不涉及到选择。比如我要在几年拿个什么证书，慢慢的去投资自己，知道自己最后要走到哪里。路是什么样，其实不重要，选择你喜欢，坚定的走下去吧。</p>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2016/09/12/September_Reading/">http://yeziahehe.com/2016/09/12/September_Reading/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u4E5D_u6708_u8BFB_u4E66_u5C0F_u8BB0"><a href="#u4E5D_u6708_u8BFB_u4E66_u5C0F_u8BB0" class="headerlink" title="九月读书小记"></a>九月读书小记</h1]]>
    </summary>
    
      <category term="读书" scheme="http://yeziahehe.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="读书" scheme="http://yeziahehe.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2016-08 读书小记]]></title>
    <link href="http://yeziahehe.com/2016/08/31/August_Reading/"/>
    <id>http://yeziahehe.com/2016/08/31/August_Reading/</id>
    <published>2016-08-31T12:04:21.000Z</published>
    <updated>2016-09-02T02:55:07.000Z</updated>
    <content type="html"><![CDATA[<p>这个月开始，公司的小伙伴都开始大规模的买书，倒是让我想起来上半年买的很多书，还一直都没有读，以后应该每个月都会整理 <strong>读书小记</strong>，多读书。由于8月中旬才开始读书，所以这个月读书非常较少。</p>
<p>8月整理了下书，这个月读的书按照先后顺序如下：</p>
<ul>
<li><strong>《How Google Works》</strong>：一本讲创业的书，书中对于企业的管理有着值得学习推敲的地方，不日我会写篇读书笔记，将所感记录下来。</li>
<li><strong>《人类简史》</strong>：以色列一位年轻的历史学家写的人来发展史，角度非常宏观，刚刚翻看了一小部分，等看完再做评论。</li>
<li><strong>《富爸爸 穷爸爸》</strong>：如果让我来评选下，我会说在这个年龄段和状态下遇到这本书，是我的幸运。我从书中收获非常多，这本书改变了我的金钱观，我觉得也会改变我的人生轨迹，让我反思了很多。我会等到看第三遍的时候认真的写一篇书评。</li>
</ul>
<p><strong>Tips</strong><br>最近发现了 <strong>微信读书</strong>，在iPad上面体验非常好，建议大家可以不要全部买纸质书，想买书之前先去微信翻一下，觉得可以精读，再来本纸质书、泡杯咖啡，享受人生吧！</p>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2016/08/31/August_Reading/">http://yeziahehe.com/2016/08/31/August_Reading/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<p>这个月开始，公司的小伙伴都开始大规模的买书，倒是让我想起来上半年买的很多书，还一直都没有读，以后应该每个月都会整理 <strong>读书小记</strong>，多读书。由于8月中旬才开始读书，所以这个月读书非常较少。</p>
<p>8月整理了下书，这个月读的书按照先后顺序如]]>
    </summary>
    
      <category term="读书" scheme="http://yeziahehe.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="读书" scheme="http://yeziahehe.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS 持续集成--Travis CI + Fir.im自动编译发布]]></title>
    <link href="http://yeziahehe.com/2016/08/07/use_travis_ci_for_ios_project/"/>
    <id>http://yeziahehe.com/2016/08/07/use_travis_ci_for_ios_project/</id>
    <published>2016-08-07T12:12:14.000Z</published>
    <updated>2016-08-08T11:45:26.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>持续集成一直是现在非常热门的话题，通过持续集成可以自动编译项目，并且配合单元测试可以实现持续集成+自动化测试。我在结合CI的基础上，通过fir-cli的发布命令，完成了持续集成+自动部署。这样能够很好的减少测试、发包等一系列重复的工作，极大的提高了效率。</p>
<p>持续集成的优点：</p>
<ul>
<li>“快速失败”，在对产品没有风险的情况下进行测试，并快速响应；</li>
<li>最大限度地减少风险，降低修复错误代码的成本；</li>
<li>将重复性的手工流程自动化，让工程师更加专注于代码；</li>
<li>保持频繁部署，快速生成可部署的软件；</li>
<li>提高项目的能见度，方便团队成员了解项目的进度和成熟度；</li>
<li>增强开发人员对软件产品的信心，帮助建立更好的工程师文化。</li>
</ul>
<p>这边推荐一篇文章给大家，<a href="http://blog.flow.ci/cicd_difference/" target="_blank" rel="external">谈谈持续集成，持续交付，持续部署之间的区别</a>。</p>
<h1 id="Travis_CI"><a href="#Travis_CI" class="headerlink" title="Travis CI"></a>Travis CI</h1><p>如果你的项目是托管在 Github 上，那么 <a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a> 是做持续集成非常好的选择。在 Ruby 的世界中，Travis CI 已久负盛名，从 2013 年 4 月起，Travis 也开始支持 iOS 和 Mac 平台。</p>
<p>本文主要来一步步讲解在项目中集成 Travis CI，不仅包括项目的编译和单元测试的运行，还包括将应用部署到 Fir.im 的测试设备上。</p>
<h1 id="u4E0EGithub_u96C6_u6210"><a href="#u4E0EGithub_u96C6_u6210" class="headerlink" title="与Github集成"></a>与Github集成</h1><p>首先需要到 <a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a> 官网上，使用自己的 Github 进行登录。登录后新建与 Github Repo 的关联，如下图所示：<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/new_repo" alt="new repo"></p>
<p>选择需要管理的 Repo，把前面的按钮置为绿色就关联 OK，这样 Travis CI 这边的配置就完成了：<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/connect_repo.png" alt="connect repo"></p>
<p>然后去 Github 关联的 Repo 中，找到 Settings - Webhooks&amp;Services 中添加 Webhook 即可，不需要填信息，直接 test 就能通过，如下图所示：<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/github_webhook.png" alt="Github Webhook"></p>
<p>按照上述步骤，就成功的将 Travis CI 和 Github 关联起来了。</p>
<h1 id="u914D_u7F6ETravis_CI"><a href="#u914D_u7F6ETravis_CI" class="headerlink" title="配置Travis CI"></a>配置Travis CI</h1><p>Travis CI 通过配置文件 <strong>.travis.yml</strong> 来工作，文件存放在项目的根目录下，接下里我们就来配置这个文件。</p>
<h2 id="u57FA_u7840_u914D_u7F6E"><a href="#u57FA_u7840_u914D_u7F6E" class="headerlink" title="基础配置"></a>基础配置</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">language:</span> objective-c</div></pre></td></tr></table></figure>
<p><strong>虽然我们是 Swift 项目，但是在 Travis CI 支持的语言库里面仅支持 Objective-C，不过 iOS 项目不管哪种语言使用这个配置都可以进行部署。</strong></p>
<p>Travis 编译器运行在虚拟机环境下。该编译器已经利用 Ruby，Homebrew，CocoaPods，xctool 和一些默认的编译脚本进行过预配置。上述的配置项已经足够编译你的项目了。<br>预装的编译脚本会分析你的 Xcode 项目，并对每个 target 进行编译。如果所有文件都没有编译错误，并且测试也没有被打断，那么项目就编译成功了。现在可以将相关改动 Push 到 GitHub 中看看能否成功编译。</p>
<p>接下来，我们配置其他的 iOS 项目的基础配置。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">osx_image:</span> xcode7.<span class="number">3</span></div></pre></td></tr></table></figure></p>
<h2 id="u7F16_u8BD1_u547D_u4EE4"><a href="#u7F16_u8BD1_u547D_u4EE4" class="headerlink" title="编译命令"></a>编译命令</h2><p>接下来我们针对项目来使用自定义编译命令。iOS 项目编译使用 xcodebuild，Travis 提供了 xcodebuild 和 Xctool。xcodebuild 是Apple提供的命令，而 Xctool 是来自 Facebook 的命令行工具。推荐使用 Xctool，本篇教程也是使用 Xctool 来进行编译命令的编写。</p>
<p><a href="https://github.com/facebook/xctool" target="_blank" rel="external">Xctool</a> 是来自 Facebook 的命令行工具，它可以简化程序的编译和测试。它的彩色输出信息比 xcodebuild 更加简洁直观。同时还添加了对逻辑测试，应用测试的支持。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">language:</span> objective-c</div><div class="line"><span class="symbol">script:</span></div><div class="line">- xctool -workspace $APP_NAME.xcworkspace -scheme $APP_NAME -sdk iphoneos  -configuration Release OBJROOT=$PWD/build SYMROOT=$PWD/build ONLY_ACTIVE_ARCH=NO CODE_SIGN_IDENTITY=<span class="string">"$DEVELOPER_NAME"</span></div></pre></td></tr></table></figure></p>
<p>我这边给的配置命令，是直接最后能够发布到发包平台编译命令，通过 Travis 能自动将应用部署到我们的所有测试设备上。要使这个命令编译通过，我们需要进行如下的配置。</p>
<h2 id="u7A0B_u5E8F_u7B7E_u540D"><a href="#u7A0B_u5E8F_u7B7E_u540D" class="headerlink" title="程序签名"></a>程序签名</h2><p>为了在 Travis 中能给程序签名，我们需要准备好所有必须的证书和配置文件。就像每个 iOS 开发人员知道的那样，这可能是最困难、最容易出错的一步。</p>
<h3 id="iPhone__u53D1_u5E03_u8BC1_u4E66_+__u79C1_u94A5"><a href="#iPhone__u53D1_u5E03_u8BC1_u4E66_+__u79C1_u94A5" class="headerlink" title="iPhone 发布证书 + 私钥"></a>iPhone 发布证书 + 私钥</h3><p>我们可以在自己的开发环境将证书和私钥给导出来。如果还没有发布证书的话，先创建一个。登录<a href="https://developer.apple.com/account/overview.action" target="_blank" rel="external">苹果开发者账号</a>，按照步骤，创建一个新的生产环境证书 (Certificates &gt; Production &gt; Add &gt; App Store and Ad Hoc)。然后下载并安装证书。之后，可以在钥匙串中找到它。打开 Mac 中的 钥匙串 应用程序：<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/blog/Certificates.png" alt="Certificates"></p>
<p>右键单击证书，选择 Export… 将证书导出至 scripts/certs/dist.cer。然后导出私钥并保存至 scripts/certs/dist.p12。记得输入私钥的密码。<br><strong>备注：scripts 文件夹在项目根目录下。</strong></p>
<p>由于 Travis 需要知道私钥密码，因此我们要把这个密码存储在某个地方。当然，我们不希望以明文的形式存储。我们可以用 Travis 的安全环境变量。打开终端，并定位到包含 .travis.yml 文件所在目录。首先用下面的命令安装 Travis gem：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install travis</div></pre></td></tr></table></figure></p>
<p>之后，用下面的命令添加密钥密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">travis encrypt <span class="string">"KEY_PASSWORD=&#123;password&#125;"</span> --add</div></pre></td></tr></table></figure></p>
<p>上面的命令会安装一个叫做 KEY_PASSWORD 的加密环境变量到 .travis.yml 配置文件中。这样就可以在被 Travis CI 执行的脚本中使用这个变量。</p>
<h3 id="iOS__u914D_u7F6E_u6587_u4EF6__28_u53D1_u5E03_29"><a href="#iOS__u914D_u7F6E_u6587_u4EF6__28_u53D1_u5E03_29" class="headerlink" title="iOS 配置文件 (发布)"></a>iOS 配置文件 (发布)</h3><p>如果还没有用于发布的配置文件，那么也创建一个新的。根据开发者账号类型，可以选择创建 <a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/TestingYouriOSApp/TestingYouriOSApp.html" target="_blank" rel="external">Ad Hoc</a> 配置文件 (Provisioning Profiles &gt; Distribution &gt; Add &gt; Ad Hoc)。然后将其下载保存至 scripts/profile/ 目录。</p>
<p>由于 Travis 需要访问这个配置文件，所以我们需要将这个文件的名字存储为一个全局环境变量。并将其添加至 .travis.yml 文件的全局环境变量 section 中。例如，如果配置文件的名字是 <strong>YFSwiftFramework_Ad_Hoc.mobileprovision</strong>，那么按照如下进行添加：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">env:</span></div><div class="line">  <span class="symbol">global:</span></div><div class="line">  - APP_NAME=<span class="string">"YFSwiftFramework"</span></div><div class="line">  - <span class="string">'DEVELOPER_NAME="iPhone Distribution: &#123;your_name&#125;"'</span></div><div class="line">  - PROFILE_NAME=<span class="string">"YFSwiftFramework_Ad_Hoc"</span></div></pre></td></tr></table></figure></p>
<p>上面还声明了三个环境变量。</p>
<ul>
<li>APP_NAME 通常为项目默认 target 的名字。</li>
<li>DEVELOPER_NAME 是 Xcode 中，默认 target 里面 Build Settings 的 Code Signing Identity &gt; Release 对应的名字。</li>
<li>PROFILE_NAME 是配置文件的名字。</li>
</ul>
<h2 id="u52A0_u5BC6_u8BC1_u4E66_u548C_u914D_u7F6E_u6587_u4EF6"><a href="#u52A0_u5BC6_u8BC1_u4E66_u548C_u914D_u7F6E_u6587_u4EF6" class="headerlink" title="加密证书和配置文件"></a>加密证书和配置文件</h2><p>如果你的 GitHub 仓库是公开的，你可能希望对证书和配置文件 (里面包含了敏感数据) 进行加密。如果你用的是私有仓库或者不想加密的证书和配置文件的，可以跳至下一节。</p>
<p>首先，我们需要一个密码来对所有的文件进行加密。本文用密码 <strong>“123”</strong> 来进行举例。在Terminal中输入下面三个命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">openssl aes-256-cbc -k <span class="string">"123"</span> -<span class="keyword">in</span> scripts/profile/YFSwiftFramework_Ad_Hoc.mobileprovision -out scripts/profile/YFSwiftFramework_Ad_Hoc.mobileprovision.enc -a</div><div class="line">openssl aes-256-cbc -k <span class="string">"123"</span> -<span class="keyword">in</span> scripts/certs/dist.cer -out scripts/certs/dist.cer.enc -a</div><div class="line">openssl aes-256-cbc -k <span class="string">"123"</span> -<span class="keyword">in</span> scripts/certs/dist.p12 -out scripts/certs/dist.p12.enc -a</div></pre></td></tr></table></figure></p>
<p>通过上面的命令，可以创建出以 .enc 结尾的加密文件。之后可以把原始文件忽略或者移除掉。至少不要把原始文件提交到 GitHub 中，否则原始文件会显示在 GitHub 中。</p>
<p>接下来，我们告诉Travis如何对我们加密的文件就进行解密。解密过程，需要用到密码。具体使用方法跟之前创建的 KEY_PASSWORD 变量一样，输入下面命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">travis encrypt <span class="string">"ENCRYPTION_SECRET=123"</span> --add</div></pre></td></tr></table></figure></p>
<p>最后，我们需要告诉 Travis 哪些文件需要进行解密。将下面的命令添加到 .travis.yml 文件中的 before-script 部分：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">before_script:</span></div><div class="line">- openssl aes-<span class="number">256</span>-cbc -k <span class="string">"$ENCRYPTION_SECRET"</span> -<span class="keyword">in</span> scripts/profile/$PROFILE_NAME.mobileprovision.enc</div><div class="line">  -d -a -out scripts/profile/$PROFILE_NAME.mobileprovision</div><div class="line">- openssl aes-<span class="number">256</span>-cbc -k <span class="string">"$ENCRYPTION_SECRET"</span> -<span class="keyword">in</span> scripts/certs/dist.cer.enc -d -a</div><div class="line">  -out scripts/certs/dist.cer</div><div class="line">- openssl aes-<span class="number">256</span>-cbc -k <span class="string">"$ENCRYPTION_SECRET"</span> -<span class="keyword">in</span> scripts/certs/dist.p12.enc -d -a</div><div class="line">  -out scripts/certs/dist.p12</div></pre></td></tr></table></figure></p>
<p>before-script是编译脚本执行之前，会执行的操作。这样Travis就回在我们执行编译脚本之前将我们的文件解密还原成原来的文件了。</p>
<h2 id="u6DFB_u52A0_u811A_u672C"><a href="#u6DFB_u52A0_u811A_u672C" class="headerlink" title="添加脚本"></a>添加脚本</h2><p>现在我们需要确保证书都导入至 Travis CI 的钥匙串中。为此，我们需要在 scripts 文件夹中添加一个名为 add-key.sh 的文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">security create-keychain -p travis ios-build.keychain</div><div class="line">security default-keychain -s ios-build.keychain</div><div class="line"></div><div class="line">security unlock-keychain -p travis ios-build.keychain</div><div class="line">security <span class="built_in">set</span>-keychain-settings -t 3600 -l ~/Library/Keychains/ios-build.keychain</div><div class="line"></div><div class="line">security import ./scripts/certs/dist.cer -k ~/Library/Keychains/ios-build.keychain -T /usr/bin/codesign</div><div class="line">security import ./scripts/certs/dist.p12 -k ~/Library/Keychains/ios-build.keychain -P <span class="variable">$KEY_PASSWORD</span> -T /usr/bin/codesign</div><div class="line"></div><div class="line">mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles</div><div class="line">cp ./scripts/profile/<span class="variable">$PROFILE_NAME</span>.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/</div><div class="line"></div><div class="line">security find-identity -p codesigning ~/Library/Keychains/ios-build.keychain</div><div class="line">security list-keychain</div></pre></td></tr></table></figure></p>
<p>通过上面的命令创建了一个名为 ios-build 的临时钥匙串，里面包含了所有证书。注意，这里我们使用了 $KEY_PASSWORD 来导入私钥。最后一步是将配置文件拷贝至 Library 文件夹。</p>
<p>创建好文件之后，确保给其授予了可执行的权限：在命令行输入：chmod a+x scripts/add-key.sh 即可。为了正常使用脚本，必须要这样处理一下。</p>
<h2 id="u6307_u5B9A_u8BC1_u4E66_u7B7E_u540D_u7F16_u8BD1"><a href="#u6307_u5B9A_u8BC1_u4E66_u7B7E_u540D_u7F16_u8BD1" class="headerlink" title="指定证书签名编译"></a>指定证书签名编译</h2><p>至此，已经导入了所有的证书和配置文件，我们可以开始给应用程序签名了。接下来我们就编译用于我们证书签名的应用程序。我建议在编译命令中使用 OBJROOT 和 SYMROOT 来指定输出目录。另外，为了创建 release 版本，还需要把 SDK 设置为 iphoneos，以及将 configuration 修改为 Release：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">script:</span></div><div class="line">- xctool -workspace $APP_NAME.xcworkspace -scheme $APP_NAME -sdk iphoneos  -configuration Release OBJROOT=$PWD/build SYMROOT=$PWD/build ONLY_ACTIVE_ARCH=NO CODE_SIGN_IDENTITY=<span class="string">"$DEVELOPER_NAME"</span></div></pre></td></tr></table></figure></p>
<h2 id="u6253_u5305IPA"><a href="#u6253_u5305IPA" class="headerlink" title="打包IPA"></a>打包IPA</h2><p>我们需要在 scripts 文件夹中添加一个名为 sign-and-upload.sh 的文件，将应用程序的二进制文件打包成IPA文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$TRAVIS_PULL_REQUEST</span>"</span> != <span class="string">"false"</span> ]]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"This is a pull request. No deployment will be done."</span></div><div class="line">  <span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$TRAVIS_BRANCH</span>"</span> != <span class="string">"master"</span> ]]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"Testing on a branch other than master. No deployment will be done."</span></div><div class="line">  <span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line">PROVISIONING_PROFILE=<span class="string">"<span class="variable">$HOME</span>/Library/MobileDevice/Provisioning Profiles/<span class="variable">$PROFILE_NAME</span>.mobileprovision"</span></div><div class="line">OUTPUTDIR=<span class="string">"<span class="variable">$PWD</span>/build/Release-iphoneos"</span></div><div class="line">xcrun -<span class="built_in">log</span> -sdk iphoneos PackageApplication <span class="string">"<span class="variable">$OUTPUTDIR</span>/<span class="variable">$APP_NAME</span>.app"</span> -o <span class="string">"<span class="variable">$OUTPUTDIR</span>/<span class="variable">$APP_NAME</span>.ipa"</span></div></pre></td></tr></table></figure></p>
<p>第二行至第九行非常重要。我们并不希望在某个特性分支上创建新的 release。对 pull 请求也一样的。由于安全环境变量被禁用，所以 pull 请求也不会编译。</p>
<p>第十四行，才是真正的签名操作。这个命令会在 build/Release-iphoneos 目录生成 2 个文件：TravisExample.ipa 和 TravisExample.app.dsym。第一个文件包含了分发至手机上的应用程序。dsym 文件包含了二进制文件的调试信息。这个文件对于记录设备上的 crash 信息非常重要。之后当我们部署应用程序的时候，会用到这两个文件。</p>
<p>创建好文件之后，确保给其授予了可执行的权限：在命令行输入：chmod a+x scripts/sign-and-upload.sh 即可。为了正常使用脚本，必须要这样处理一下。</p>
<h2 id="u6267_u884C_u811A_u672C"><a href="#u6267_u884C_u811A_u672C" class="headerlink" title="执行脚本"></a>执行脚本</h2><p>我们需要在 scripts 文件夹中添加一个名为 remove-key.sh 的文件，移除之前创建的临时钥匙串，并删除配置文件。虽然这不是必须的，不过这有助于进行本地测试。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line">security delete-keychain ios-build.keychain</div><div class="line">rm -f ~/Library/MobileDevice/Provisioning\ Profiles/<span class="variable">$PROFILE_NAME</span>.mobileprovision</div></pre></td></tr></table></figure></p>
<p>最后一步，我们必须告诉 Travis 什么时候执行这三个脚本。在应用程序编译、签名和清除等之前，需要先添加私钥。在 .travis.yml 文件中添加如下内容：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">before_script:</span></div><div class="line">- <span class="string">"./scripts/add-key.sh"</span></div><div class="line"><span class="symbol">script:</span></div><div class="line">- xctool -workspace $APP_NAME.xcworkspace -scheme $APP_NAME -sdk iphoneos  -configuration Release OBJROOT=$PWD/build SYMROOT=$PWD/build ONLY_ACTIVE_ARCH=NO CODE_SIGN_IDENTITY=<span class="string">"$DEVELOPER_NAME"</span></div><div class="line"><span class="symbol">after_success:</span></div><div class="line">- <span class="string">"./scripts/sign-and-upload.sh"</span></div><div class="line"><span class="symbol">after_script:</span></div><div class="line">- <span class="string">"./scripts/remove-key.sh"</span></div></pre></td></tr></table></figure></p>
<h2 id="u90E8_u7F72IPA_u5230Fir-im"><a href="#u90E8_u7F72IPA_u5230Fir-im" class="headerlink" title="部署IPA到Fir.im"></a>部署IPA到Fir.im</h2><p>创建一个Fir.im账号，并配置好应用程序。配置好应用程序后Fir.im会为每个应用程序创建一个用户Token，我们需要确保它们是加密的。执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">travis encrypt <span class="string">"FIR_APP_TOKEN=&#123;Token&#125;&#125;"</span> --add</div></pre></td></tr></table></figure></p>
<p>编辑 scripts/sign-and-upload.sh 文件，增加以下脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$FIR_APP_TOKEN</span>"</span> ]; <span class="keyword">then</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">""</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"***************************"</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"*   Uploading to Fir.im   *"</span></div><div class="line">  <span class="built_in">echo</span> <span class="string">"***************************"</span></div><div class="line">  fir p <span class="variable">$OUTPUTDIR</span>/<span class="variable">$APP_NAME</span>.ipa \</div><div class="line">  -T <span class="variable">$FIR_APP_TOKEN</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure></p>
<p>最后需要添加 Fir.im 上传命令的环境。在 .travis.yml 文件中添加如下内容：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">before_install:</span></div><div class="line">- brew update</div><div class="line">- gem install fir-cli</div></pre></td></tr></table></figure></p>
<p>到这里就实现了持续集成、持续交付，并且持续部署到Fir.im，是不是很简单呢！</p>
<h1 id="u793A_u4F8B_u9879_u76EE"><a href="#u793A_u4F8B_u9879_u76EE" class="headerlink" title="示例项目"></a>示例项目</h1><ul>
<li><a href="https://github.com/yeziahehe/YFSwiftFramework" target="_blank" rel="external">YFSwiftFramework</a></li>
</ul>
<h1 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://objccn.io/issue-6-5/" target="_blank" rel="external">为 iOS 建立 Travis CI</a></li>
</ul>
<blockquote class="blockquote-center"><br><strong>版权声明</strong><br><br><img src="/cc.png" alt=""><br><br><a href="http://yeziahehe.com">Ivan’s Blog</a> by <a href="http://yeziahehe.com/about">Ivan Ye</a> is licensed under a <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">Creative Commons BY-NC-ND 4.0 International License</a>.<br>由<a href="http://yeziahehe.com/about">叶帆</a>创作并维护的<a href="http://yeziahehe.com">叶帆的博客</a>博客采用<a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">创作共用保留署名-非商业-禁止演绎4.0国际许可证</a>。<br><br>本文首发于<a href="http://yeziahehe.com">Ivan’s Blog | 叶帆的博客</a>博客（ <a href="http://yeziahehe.com">http://yeziahehe.com</a> ），版权所有，侵权必究。<br><br>本文链接：<a href="http://yeziahehe.com/2016/08/07/use_travis_ci_for_ios_project/">http://yeziahehe.com/2016/08/07/use_travis_ci_for_ios_project/</a></blockquote>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>持续集成一直是现在非常热门的话题，通过持续集成可]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="Travis CI" scheme="http://yeziahehe.com/tags/Travis-CI/"/>
    
      <category term="技术" scheme="http://yeziahehe.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
