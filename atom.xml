<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[叶帆的技术博客]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yeziahehe.com/"/>
  <updated>2016-01-21T13:24:09.000Z</updated>
  <id>http://yeziahehe.com/</id>
  
  <author>
    <name><![CDATA[叶帆]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[2016年书单和购物清单]]></title>
    <link href="http://yeziahehe.com/2016/01/09/2016_year_book_list/"/>
    <id>http://yeziahehe.com/2016/01/09/2016_year_book_list/</id>
    <published>2016-01-09T12:07:02.000Z</published>
    <updated>2016-01-21T13:24:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>2016年的目标是读80本书，以前开复老师在微博上面讲过，一年读到100本书才算合格。今年的计划是80本书，在范围上，首先从手上买的一堆技术书籍开始，在逐步扩充到其他类别的图书。<br>另外今年手头上的设备慢慢要开始换了，这四年上大学都是老爸老妈给买的，准备开始逐步自己进行更换。</p>
<h1 id="u4E66_u7C4D"><a href="#u4E66_u7C4D" class="headerlink" title="书籍"></a>书籍</h1><p>目前罗列29本。</p>
<h2 id="u6280_u672F"><a href="#u6280_u672F" class="headerlink" title="技术"></a>技术</h2><ul>
<li>《啊哈！算法》</li>
<li>《程序员修炼之道–从小工到专家》</li>
<li>《剑指Offer 名企面试官精讲典型编程题》</li>
<li>《编程之美–微软技术面试心得》</li>
<li>《从0到1 开启商业与未来的秘密》</li>
<li>《C++数据结构与程序设计》</li>
<li>《算法导论》</li>
<li>《代码整洁之道》</li>
<li>《程序员的自我修养：链接、装载与库》</li>
<li>《算法》</li>
<li>《Objective-C高级编程iOS与OS X多线程和内存管理》</li>
<li>《编程珠玑》</li>
<li>《人月神话》</li>
<li>《重构 改善既有代码的设计》</li>
<li>《编程之法：面试和算法心得》</li>
</ul>
<h2 id="u4F20_u8BB0"><a href="#u4F20_u8BB0" class="headerlink" title="传记"></a>传记</h2><ul>
<li>《Steve Jobs》</li>
</ul>
<h2 id="u6742_u8C08"><a href="#u6742_u8C08" class="headerlink" title="杂谈"></a>杂谈</h2><ul>
<li>《1Q84》</li>
<li>《国富论》</li>
<li>《哈默手稿》</li>
<li>《我所理解的生活》</li>
<li>《最好的告别：关于衰老与死亡，你必须知道的常识》</li>
<li>《人类简史 从动物到上帝》</li>
<li>《万物：创世》</li>
<li>《东大爸爸写给我的日本史》</li>
<li>《西方音乐史十讲》</li>
<li>《日本史（1600-2000）》</li>
<li>《硅谷之谜》</li>
<li>《浪潮之巅》</li>
<li>《摄影笔记》</li>
<li>《本色》</li>
<li>《色眼识人》</li>
<li>《色眼再识人》</li>
</ul>
<h1 id="u9884_u8D2D_u6E05_u5355"><a href="#u9884_u8D2D_u6E05_u5355" class="headerlink" title="预购清单"></a>预购清单</h1><p>从上到下依次为更换顺序</p>
<h2 id="u8BBE_u5907"><a href="#u8BBE_u5907" class="headerlink" title="设备"></a>设备</h2><ul>
<li>单反（型号正在对比中）</li>
<li>MacBook Pro 15 (目前使用Macbook Pro 13 mid 2012)</li>
<li>HHKB Pro (目前使用的斗鱼黑轴，别问为什么，买回来撸的)</li>
<li>iPhone (目前使用的iPhone 5s)</li>
</ul>
<h2 id="u5316_u5986_u54C1"><a href="#u5316_u5986_u54C1" class="headerlink" title="化妆品"></a>化妆品</h2><p>男人也好好好的保养，要做个精致的人。</p>
<ul>
<li>kiehl’s    ultra facial cleanser(冬季用)</li>
<li>kiehl’s    RARE EARTH DEEP PORE CLEANSING MASQUE-亚马逊白泥清洁面膜(冬季用)</li>
<li>kiehl’s    金盏花水(冬季用)</li>
<li>kiehl’s    ULTRA FACIAL CREAM(冬季用)</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>2016年的目标是读80本书，以前开复老师在微博]]>
    </summary>
    
      <category term="生活" scheme="http://yeziahehe.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="读书" scheme="http://yeziahehe.com/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="读书" scheme="http://yeziahehe.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="生活" scheme="http://yeziahehe.com/categories/%E8%AF%BB%E4%B9%A6/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C封装技巧（三）：比继承更加灵活的overwrite方法 -- Method Swizzling]]></title>
    <link href="http://yeziahehe.com/2016/01/06/Objective-C_package_skill(3)%EF%BC%9Aoverwrite_method--%20Method%20Swizzling/"/>
    <id>http://yeziahehe.com/2016/01/06/Objective-C_package_skill(3)：overwrite_method-- Method Swizzling/</id>
    <published>2016-01-06T02:38:24.000Z</published>
    <updated>2016-01-07T16:03:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>有经验的工程师在经历过一些项目之后，会慢慢的去考虑之前项目中遇到的坑，思考的过程中就会诞生设计模式和架构的雏形。我这次毕业设计的项目架构正在酝酿中，因为自己本身经验并没有很丰富，所以浅谈自己封装的一些想法，权当抛砖引玉。</p>
<p>平时项目中我们经常会对重复使用的代码进行封装，那么对于封装的场景是否有过思考？是否想过各种封装方法的使用场景和原则。我们实现提出在封装常用的方法：继承和Category。另外在继承的基础上我们发现了比继承更加灵活的Swizzling和在Category的使用过程出现的Associated Objects。关于上述的所有方法，我将会写一个系列来阐述。</p>
<ul>
<li><a href="http://yeziahehe.com/2016/01/05/Objective-C%E5%B0%81%E8%A3%85%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ACategory%E5%92%8C%E7%BB%A7%E6%89%BF%E7%9A%84%E5%8D%9A%E5%BC%88/">Objective-C封装技巧（一）：Category和继承的博弈</a></li>
<li><a href="http://yeziahehe.com/2016/01/06/Objective-C%E5%B0%81%E8%A3%85%E6%8A%80%E5%B7%A7%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%B8%8E%E2%80%9C%E9%AD%94%E9%AC%BC%E7%9A%84%E4%BA%A4%E6%98%93%E2%80%9D%20--%20Associated%20Objects/">Objective-C封装技巧（二）：与“魔鬼的交易” – Associated Objects</a></li>
<li><a href="http://yeziahehe.com/2016/01/06/Objective-C%E5%B0%81%E8%A3%85%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%AF%94%E7%BB%A7%E6%89%BF%E6%9B%B4%E5%8A%A0%E7%81%B5%E6%B4%BB%E7%9A%84overwrite%E6%96%B9%E6%B3%95%20--%20Method%20Swizzling/">Objective-C封装技巧（三）：比继承更加灵活的overwrite方法 – Method Swizzling</a></li>
</ul>
<h1 id="u63D0_u51FA_u95EE_u9898"><a href="#u63D0_u51FA_u95EE_u9898" class="headerlink" title="提出问题"></a>提出问题</h1><p>希望大家在看系列文章之前，首先思考下面提出的几个问题：</p>
<ol>
<li>对于方法封装，我们平时经常使用的就是继承子类化Base基类和使用Category，那么在使用这两个方法是具体场景是什么？它们之前的区别和使用优先原则是什么？</li>
<li>Category不允许自定义实例属性的缺点，可以用什么来弥补？（提示：Associated Objects）Associated Objects的具体使用场景又是什么呢？</li>
<li>对于需要重复写的通用方法，又存在生命周期中的方法，除了工厂方法继承多个工厂类，还有没有更好的封装机制？（提示：Method Swizzling）关于Method Swizzling的使用场景和机制是什么？<br>本篇博客对第三个问题进行回答分析，如果阐述过程中有错误或者疑问，大家可以在文章下面留言。</li>
</ol>
<h1 id="u524D_u63D0"><a href="#u524D_u63D0" class="headerlink" title="前提"></a>前提</h1><p>在我们对继承进行使用的时候，通常有个使用场景，类似于UMeng的对用户行为进行追踪和分析的操作。通常有这么三种做法：</p>
<ul>
<li>简单粗暴，直接修改每个页面的 <strong>view controller</strong> 代码，简单粗暴；</li>
<li>子类化一个Base基类，在基类的 <strong>view controller</strong> 代码里面进行操作；</li>
<li>Category来进行方法的扩展，然后在<strong>view controller</strong> 代码里面进行调用；</li>
<li>Method Swizzling<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/package%2FUMeng.png" alt="UMeng"></li>
</ul>
<p>1，2，3两种的方法，通常会造成大量的重复代码，显得代码很不优雅。1的方法还会存在忘记添加的情况，2的方法存在需要子类化多个子类，如 <strong>UIViewController</strong> 、 <strong>UITableViewController</strong> 、 <strong>UINavigationController</strong>。3的方法只能对代码量并没有缩减，用在这个场景下也不合适。</p>
<h1 id="Method_Swizzling"><a href="#Method_Swizzling" class="headerlink" title="Method Swizzling"></a>Method Swizzling</h1><p>这个时候我们想用优雅的方式来解决这个问题，既不影响当前方法的实现，又能够在方法注入一些新的操作，动态的来增加方法。我们引入了runtime中的技术方案 – Method Swizzling。利用的是@selector机制，修改响应事件或者方法所对应的函数指针。</p>
<h2 id="u4F7F_u7528_u573A_u666F"><a href="#u4F7F_u7528_u573A_u666F" class="headerlink" title="使用场景"></a>使用场景</h2><p>大致可以概括成下列三个场景：</p>
<ul>
<li>在向视图控制器的生命周期中注入操作、事件的响应、视图的绘制；</li>
<li>Foundation中的网络堆栈中对于调用时机的记录；</li>
<li>类似于Logging，Analytics，Authentication和Caching。这些事务琐碎，跟主要业务逻辑无关，在很多地方都有，又很难抽象出来单独的模块。</li>
</ul>
<h2 id="u4EE3_u7801"><a href="#u4EE3_u7801" class="headerlink" title="代码"></a>代码</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"MobClick.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIViewController</span> (<span class="title">MRCUMAnalytics</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">YFUMengAnalytics</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)swizzleMethod(Class class, SEL originalSelector, SEL swizzledSelector) &#123;</span><br><span class="line">    <span class="comment">// the method might not exist in the class, but in its superclass</span></span><br><span class="line">    Method originalMethod = class_getInstanceMethod(class, originalSelector);</span><br><span class="line">    Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// class_addMethod will fail if original method already exists</span></span><br><span class="line">    <span class="built_in">BOOL</span> didAddMethod = class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the method doesn’t exist and we just added one</span></span><br><span class="line">    <span class="keyword">if</span> (didAddMethod) &#123;</span><br><span class="line">        class_replaceMethod(class, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        Class class = [<span class="keyword">self</span> class];</span><br><span class="line">        <span class="comment">// When swizzling a class method, use the following:</span></span><br><span class="line">        <span class="comment">// Class class = object_getClass((id)self);</span></span><br><span class="line">        swizzleMethod(class, <span class="keyword">@selector</span>(viewDidAppear:), <span class="keyword">@selector</span>(umeng_viewWillAppear:));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)umeng_viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    [<span class="keyword">self</span> umeng_viewWillAppear:animated];</span><br><span class="line">    [MobClick beginLogPageView:<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> class])];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="u89E3_u91CA"><a href="#u89E3_u91CA" class="headerlink" title="解释"></a>解释</h2><ul>
<li><p>不需要显性调用<br>我们发现我们使用了Method Swizzling之后，对现有的方法进行了新方法的注入，我们在调用现有方法的时候，就会自动触发我们注入的方法。这种做法非常类似于Hook。</p>
</li>
<li><p>步骤</p>
</li>
</ul>
<ol>
<li><p>创建需要交换的方法 <strong>- (void)umeng_viewWillAppear:(BOOL)animated</strong> ，在方法中添加需要实现的方法。这里有个问题解释下，为什么umeng_viewWillAppear又调用了自身？首先我们通过Method Swizzling之后，这两个方法的实现是被交换的，也就是说在定义的时候这样写，但是在实际调用的时候这个方法调用的viewWillAppear，而在viewWillAppear中调用的是umeng_viewWillAppear。</p>
</li>
<li><p>进行方法的交换 <strong>- (void)swizzleMethod(Class class, SEL originalSelector, SEL swizzledSelector)</strong> ，这一步是具体的实现过程。将两个方法进行交换。我们发现其中有一个判断条件，是否是增加方法。通常使用Method Swizzling是来进行方法的增加，而不是单纯的替换，所以说会进行判断。</p>
</li>
<li><p>触发时间，是通过 <strong>+ (void)load</strong> 方法来触发。关于这个方法的调用时间是在类被加载的时候调用的，此外load方法还有一个非常重要的特性，那就是子类、父类和分类中的load方法的实现是被区别对待的。换句话说在 Objective-C runtime 自动调用load方法时，分类中的load方法并不会对主类中的load方法造成覆盖。</p>
</li>
</ol>
<h1 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h1><p>至此，有关于这个系列的所有文章都已经结束，希望大家能够从文章有所收获，在自己的项目里面用到这些，多思考多重构。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>有经验的工程师在经历过一些项目之后，会慢慢的去考]]>
    </summary>
    
      <category term="Objective-C" scheme="http://yeziahehe.com/tags/Objective-C/"/>
    
      <category term="Swizzling" scheme="http://yeziahehe.com/tags/Swizzling/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="封装" scheme="http://yeziahehe.com/tags/%E5%B0%81%E8%A3%85/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
      <category term="封装" scheme="http://yeziahehe.com/categories/iOS/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C封装技巧（二）：与“魔鬼的交易” -- Associated Objects]]></title>
    <link href="http://yeziahehe.com/2016/01/06/Objective-C_package_skill(2)%EF%BC%9A%20--%20Associated%20Objects/"/>
    <id>http://yeziahehe.com/2016/01/06/Objective-C_package_skill(2)： -- Associated Objects/</id>
    <published>2016-01-06T01:42:32.000Z</published>
    <updated>2016-01-07T16:03:10.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>有经验的工程师在经历过一些项目之后，会慢慢的去考虑之前项目中遇到的坑，思考的过程中就会诞生设计模式和架构的雏形。我这次毕业设计的项目架构正在酝酿中，因为自己本身经验并没有很丰富，所以浅谈自己封装的一些想法，权当抛砖引玉。</p>
<p>平时项目中我们经常会对重复使用的代码进行封装，那么对于封装的场景是否有过思考？是否想过各种封装方法的使用场景和原则。我们实现提出在封装常用的方法：继承和Category。另外在继承的基础上我们发现了比继承更加灵活的Swizzling和在Category的使用过程出现的Associated Objects。关于上述的所有方法，我将会写一个系列来阐述。</p>
<ul>
<li><a href="http://yeziahehe.com/2016/01/05/Objective-C%E5%B0%81%E8%A3%85%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ACategory%E5%92%8C%E7%BB%A7%E6%89%BF%E7%9A%84%E5%8D%9A%E5%BC%88/">Objective-C封装技巧（一）：Category和继承的博弈</a></li>
<li><a href="http://yeziahehe.com/2016/01/06/Objective-C%E5%B0%81%E8%A3%85%E6%8A%80%E5%B7%A7%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%B8%8E%E2%80%9C%E9%AD%94%E9%AC%BC%E7%9A%84%E4%BA%A4%E6%98%93%E2%80%9D%20--%20Associated%20Objects/">Objective-C封装技巧（二）：与“魔鬼的交易” – Associated Objects</a></li>
<li><a href="http://yeziahehe.com/2016/01/06/Objective-C%E5%B0%81%E8%A3%85%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%AF%94%E7%BB%A7%E6%89%BF%E6%9B%B4%E5%8A%A0%E7%81%B5%E6%B4%BB%E7%9A%84overwrite%E6%96%B9%E6%B3%95%20--%20Method%20Swizzling/">Objective-C封装技巧（三）：比继承更加灵活的overwrite方法 – Method Swizzling</a></li>
</ul>
<h1 id="u63D0_u51FA_u95EE_u9898"><a href="#u63D0_u51FA_u95EE_u9898" class="headerlink" title="提出问题"></a>提出问题</h1><p>希望大家在看系列文章之前，首先思考下面提出的几个问题：</p>
<ol>
<li>对于方法封装，我们平时经常使用的就是继承子类化Base基类和使用Category，那么在使用这两个方法是具体场景是什么？它们之前的区别和使用优先原则是什么？</li>
<li>Category不允许自定义实例属性的缺点，可以用什么来弥补？（提示：Associated Objects）Associated Objects的具体使用场景又是什么呢？</li>
<li>对于需要重复写的通用方法，又存在生命周期中的方法，除了工厂方法继承多个工厂类，还有没有更好的封装机制？（提示：Method Swizzling）关于Method Swizzling的使用场景和机制是什么？<br>本篇博客对第二个问题进行回答分析，如果阐述过程中有错误或者疑问，大家可以在文章下面留言。</li>
</ol>
<h1 id="Associated_Objects"><a href="#Associated_Objects" class="headerlink" title="Associated Objects"></a>Associated Objects</h1><p>我们知道上次再写Category的时候提到了Category的缺点，不能自定义实例变量。我们在上篇博客的中给出的答案是可以考虑继承，这里引入一个新的技术方案 – Associated Objects。</p>
<h2 id="u524D_u63D0"><a href="#u524D_u63D0" class="headerlink" title="前提"></a>前提</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;objc/runtime.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>首先需要导入runtime这个类，runtime是个双刃剑。大家使用的时候一定要小心。Associated Objects就是其中一个利器。<br>有关于runtime，可以参考下Apple官方的<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/ObjCRuntimeRef/#//apple_ref/c/func/objc_setAssociatedObject" target="_blank" rel="external">文档</a>。</p>
<h2 id="u5F00_u59CB"><a href="#u5F00_u59CB" class="headerlink" title="开始"></a>开始</h2><p>Associated Objects弥补了Objective-C不能在存在的类中扩展自定义属性的缺点，非常的便捷。Associated Objects（对相关联），用一句通俗的话来概括下就是将键值对在运行是关联到对象函数。<br>一共三个方法：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_setAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key, id <span class="keyword">value</span>, objc_AssociationPolicy policy</span>)</span>;</span><br><span class="line"><span class="function">id <span class="title">objc_getAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_removeAssociatedObjects</span>(<span class="params">id <span class="keyword">object</span></span>)</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="u521B_u5EFA_u5173_u8054"><a href="#u521B_u5EFA_u5173_u8054" class="headerlink" title="创建关联"></a>创建关联</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_setAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key, id <span class="keyword">value</span>, objc_AssociationPolicy policy</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>一共需要四个参数：源对象，关键字，关联的对象和一个关联策略。我们一一解释。</p>
<ul>
<li><strong>object</strong> 源对象：需要进行关联的对象。                                                                        </li>
<li><strong>key</strong> 关键字：关键字是一个void类型的指针。每一个关联的关键字必须是唯一的。有三种方式来进行关键的定义，下面会给出。      </li>
<li><strong>value</strong> 关联的对象：在Catogory中一般就是自定义的变量。                                                         </li>
<li><strong>policy</strong> 关联策略：相关的对象是通过赋值，保留引用还是复制的方式、通过原子还是非原子的方式进行关联。一共有五种方式，下面给出。</li>
</ul>
<h3 id="key-_u5173_u952E_u5B57_u5B9A_u4E49"><a href="#key-_u5173_u952E_u5B57_u5B9A_u4E49" class="headerlink" title="key-关键字定义"></a>key-关键字定义</h3><ol>
<li>声明 <strong>static char kAssociatedObjectKey;</strong> ，使用 <strong>&amp;kAssociatedObjectKey</strong> 作为key值;</li>
<li>声明 <strong>static void *kAssociatedObjectKey = &kAssociatedObjectKey;</strong>，使用 <strong>kAssociatedObjectKey</strong> 作为key值；</li>
<li>使用 <strong>selector</strong> ，使用getter方法的名称 <strong>@selector(associatedObject)</strong> 作为 key 值。</li>
</ol>
<p>通常使用 <strong>static char</strong> 类型来定义，更加推荐的是指针类型。另外，尽量保证该属性是常量且唯一，试用范围在本类当中。当然有的人喜欢 <strong>selector</strong> 的方式，因为解决了计算机中最难的取名字问题。</p>
<h3 id="policy-_u5173_u8054_u5BF9_u8C61_u7684_u884C_u4E3A"><a href="#policy-_u5173_u8054_u5BF9_u8C61_u7684_u884C_u4E3A" class="headerlink" title="policy-关联对象的行为"></a>policy-关联对象的行为</h3><table>
<thead>
<tr>
<th>Behavior</th>
<th style="text-align:center">@property</th>
<th style="text-align:right">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>OBJC_ASSOCIATION_ASSIGN</td>
<td style="text-align:center">@property (assign)</td>
<td style="text-align:right">指定一个关联对象的弱引用。</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_RETAIN_NONATOMIC</td>
<td style="text-align:center">@property (nonatomic, strong)</td>
<td style="text-align:right">指定一个关联对象的强引用，不能被原子化使用。</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_COPY_NONATOMIC</td>
<td style="text-align:center">@property (nonatomic, copy)</td>
<td style="text-align:right">指定一个关联对象的copy引用，不能被原子化使用。</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_RETAIN</td>
<td style="text-align:center">@property (atomic, strong)</td>
<td style="text-align:right">指定一个关联对象的强引用，能被原子化使用。</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_COPY</td>
<td style="text-align:center">@property (atomic, copy)</td>
<td style="text-align:right">指定一个关联对象的copy引用，能被原子化使用。</td>
</tr>
</tbody>
</table>
<h2 id="u83B7_u53D6_u5173_u8054"><a href="#u83B7_u53D6_u5173_u8054" class="headerlink" title="获取关联"></a>获取关联</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">id <span class="title">objc_getAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>这个非常简单，不再赘述。</p>
<h2 id="u65AD_u5F00_u5173_u8054"><a href="#u65AD_u5F00_u5173_u8054" class="headerlink" title="断开关联"></a>断开关联</h2><p>理论上说，我们会使用 <strong>void objc_removeAssociatedObjects(id object);</strong> 但是我们不应手动去调用这个函数。</p>
<blockquote>
<p>此函数的主要目的是在“初试状态”时方便地返回一个对象。你不应该用这个函数来删除对象的属性，因为可能会导致其他客户对其添加的属性也被移除了。规范的方法是：调用 objc_setAssociatedObject 方法并传入一个 nil 值来清除一个关联。</p>
</blockquote>
<p>通常这样去断开关联<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objc_setAssociatedObject<span class="list">(<span class="keyword">array</span>, <span class="keyword">&amp;overviewKey</span>, <span class="literal">nil</span>, OBJC_ASSOCIATION_ASSIGN)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="u751F_u547D_u5468_u671F"><a href="#u751F_u547D_u5468_u671F" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote>
<p>根据 WWDC 2011, Session 322 (第36分22秒) 中发布的内存销毁时间表，被关联的对象在生命周期内要比对象本身释放的晚很多。它们会在被 NSObject -dealloc 调用的 object_dispose() 方法中释放。</p>
<p>关联对象的释放时机与移除时机并不总是一致，比如实验中用关联策略 OBJC_ASSOCIATION_ASSIGN 进行关联的对象，很早就已经被释放了，但是并没有被移除，而再使用这个关联对象时就会造成 Crash 。</p>
</blockquote>
<h2 id="u4EE3_u7801_u793A_u4F8B"><a href="#u4EE3_u7801_u793A_u4F8B" class="headerlink" title="代码示例"></a>代码示例</h2><p>这里附上<a href="https://github.com/ibireme" target="_blank" rel="external">Yaoyuan</a>大神对于Associated Objects的具体实现：</p>
<p><strong>UIBarButtonItem+YYAdd.h</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> Provides extensions for `UIBarButtonItem`.</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIBarButtonItem</span> (<span class="title">YYAdd</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> The block that invoked when the item is selected. The objects captured by block</span><br><span class="line"> will retained by the ButtonItem.</span><br><span class="line"></span><br><span class="line"> @discussion This param is conflict with `target` and `action` property.</span><br><span class="line"> Set this will set `target` and `action` property to some internal objects.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^actionBlock)(<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p><strong>UIBarButtonItem+YYAdd.m</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"UIBarButtonItem+YYAdd.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"YYCategoriesMacro.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">YYSYNTH_DUMMY_CLASS(<span class="built_in">UIBarButtonItem_YYAdd</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> block_key;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_YYUIBarButtonItemBlockTarget</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^block)(<span class="keyword">id</span> sender);</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> sender))block;</span><br><span class="line">- (<span class="keyword">void</span>)invoke:(<span class="keyword">id</span>)sender;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_YYUIBarButtonItemBlockTarget</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> sender))block&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _block = [block <span class="keyword">copy</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)invoke:(<span class="keyword">id</span>)sender &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.block</span>) <span class="keyword">self</span><span class="variable">.block</span>(sender);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIBarButtonItem</span> (<span class="title">YYAdd</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setActionBlock:(<span class="keyword">void</span> (^)(<span class="keyword">id</span> sender))block &#123;</span><br><span class="line">    _YY<span class="built_in">UIBarButtonItemBlockTarget</span> *target = [[_YY<span class="built_in">UIBarButtonItemBlockTarget</span> alloc] initWithBlock:block];</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, &amp;block_key, target, OBJC_ASSO<span class="built_in">CIATION_RETAIN_NONATOMIC</span>);</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> setTarget:target];</span><br><span class="line">    [<span class="keyword">self</span> setAction:<span class="keyword">@selector</span>(invoke:)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span> (^)(<span class="keyword">id</span>)) actionBlock &#123;</span><br><span class="line">    _YY<span class="built_in">UIBarButtonItemBlockTarget</span> *target = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;block_key);</span><br><span class="line">    <span class="keyword">return</span> target<span class="variable">.block</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<h1 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h1><p>对于Associated Objects，提供一种为Category添加自定义属性的方法。那么，在我们有自定义属性的时候，我们去使用继承还是使用Associated Objects呢？<a href="https://github.com/ibireme" target="_blank" rel="external">Yaoyuan</a>大神在issue中这样回复我：<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/package%2FAssociatedObjects.png" alt="比较"></p>
<p>所以大家还是根据自己的使用场景去确定，最后一个问题将在下篇博客中进行讲解。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>有经验的工程师在经历过一些项目之后，会慢慢的去考]]>
    </summary>
    
      <category term="Objective-C" scheme="http://yeziahehe.com/tags/Objective-C/"/>
    
      <category term="category" scheme="http://yeziahehe.com/tags/category/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="runtime" scheme="http://yeziahehe.com/tags/runtime/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
      <category term="封装" scheme="http://yeziahehe.com/categories/iOS/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C封装技巧（一）：Category和继承的博弈]]></title>
    <link href="http://yeziahehe.com/2016/01/05/Objective-C_package_skill(1)%EF%BC%9ACategory_and_inherit/"/>
    <id>http://yeziahehe.com/2016/01/05/Objective-C_package_skill(1)：Category_and_inherit/</id>
    <published>2016-01-05T07:24:19.000Z</published>
    <updated>2016-01-09T12:05:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>有经验的工程师在经历过一些项目之后，会慢慢的去考虑之前项目中遇到的坑，思考的过程中就会诞生设计模式和架构的雏形。我这次毕业设计的项目架构正在酝酿中，因为自己本身经验并没有很丰富，所以浅谈自己封装的一些想法，权当抛砖引玉。</p>
<p>平时项目中我们经常会对重复使用的代码进行封装，那么对于封装的场景是否有过思考？是否想过各种封装方法的使用场景和原则。我们实现提出在封装常用的方法：继承和Category。另外在继承的基础上我们发现了比继承更加灵活的Swizzling和在Category的使用过程出现的Associated Objects。关于上述的所有方法，我将会写一个系列来阐述。</p>
<ul>
<li><a href="http://yeziahehe.com/2016/01/05/Objective-C%E5%B0%81%E8%A3%85%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9ACategory%E5%92%8C%E7%BB%A7%E6%89%BF%E7%9A%84%E5%8D%9A%E5%BC%88/">Objective-C封装技巧（一）：Category和继承的博弈</a></li>
<li><a href="http://yeziahehe.com/2016/01/06/Objective-C%E5%B0%81%E8%A3%85%E6%8A%80%E5%B7%A7%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%B8%8E%E2%80%9C%E9%AD%94%E9%AC%BC%E7%9A%84%E4%BA%A4%E6%98%93%E2%80%9D%20--%20Associated%20Objects/">Objective-C封装技巧（二）：与“魔鬼的交易” – Associated Objects</a></li>
<li><a href="http://yeziahehe.com/2016/01/06/Objective-C%E5%B0%81%E8%A3%85%E6%8A%80%E5%B7%A7%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E6%AF%94%E7%BB%A7%E6%89%BF%E6%9B%B4%E5%8A%A0%E7%81%B5%E6%B4%BB%E7%9A%84overwrite%E6%96%B9%E6%B3%95%20--%20Method%20Swizzling/">Objective-C封装技巧（三）：比继承更加灵活的overwrite方法 – Method Swizzling</a></li>
</ul>
<h1 id="u63D0_u51FA_u95EE_u9898"><a href="#u63D0_u51FA_u95EE_u9898" class="headerlink" title="提出问题"></a>提出问题</h1><p>希望大家在看系列文章之前，首先思考下面提出的几个问题：</p>
<ol>
<li>对于方法封装，我们平时经常使用的就是继承子类化Base基类和使用Category，那么在使用这两个方法是具体场景是什么？它们之前的区别和使用优先原则是什么？</li>
<li>Category不允许自定义实例属性的缺点，可以用什么来弥补？（提示：Associated Objects）Associated Objects的具体使用场景又是什么呢？</li>
<li>对于需要重复写的通用方法，又存在生命周期中的方法，除了工厂方法继承多个工厂类，还有没有更好的封装机制？（提示：Method Swizzling）关于Method Swizzling的使用场景和机制是什么？<br>本篇博客对第一个问题进行回答分析，如果阐述过程中有错误或者疑问，大家可以在文章下面留言。</li>
</ol>
<h1 id="u7EE7_u627F_u2013_u5B50_u7C7B_u5316"><a href="#u7EE7_u627F_u2013_u5B50_u7C7B_u5316" class="headerlink" title="继承–子类化"></a>继承–子类化</h1><p>我们首先从继承–对面对象的三大基本特征讲起，继承的概念得益于能够方便的对父类的方法进行实现和overwrite。在使用场景上，我想很多开发者应该在项目之初会经常写了很多Base的基类，封装一些基本的常用方法，在子类中可以直接实用，防止大量的重复代码。下图，使用的是<a href="https://github.com/DeveloperLx" target="_blank" rel="external">DeveloperLx</a>大神的项目框架，特此表示感谢，我也从他的框架中学到了很多。<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/package%2Fbaseclass.png" alt="baseclass"></p>
<p>应该说所有人的最初封装都是从继承开始，这个是最容易想到的方法。那么这个继承使用的场景其实是在我们需要对方法进行重写的时候（如生命周期等等，当然其实有更好的方法替代），或者对于父类Delegate通用方法来进行封装的时候来使用。但是继承的缺点在于耦合度比较高，比如我们写了BaseViewController来进行继承，那么通用模块移植到别的项目中的时候就会出现依赖于BaseViewController基类的问题。出现了非常高的耦合度，所以我们经常在面试题中，面试官也会问你这样的问题：你项目中使用继承吗？优缺点？是否有改进的方法？</p>
<h1 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h1><p>说到Category，大家肯定不陌生，可以看到Apple官方也大量的使用了Category。Category使用的设计模式其实就是装饰模式，是对于改设计模式的具体实现。Category区别于继承的最大不同点在于，它是在不改变原有类的前提下，动态的去扩展该类的类方法和实例方法。</p>
<h2 id="u4F7F_u7528_u573A_u666F"><a href="#u4F7F_u7528_u573A_u666F" class="headerlink" title="使用场景"></a>使用场景</h2><p>对于Category的使用场景，我们根据<a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/Category.html#//apple_ref/doc/uid/TP40008195-CH5-SW1" target="_blank" rel="external">Apple</a>官方的描述，可以大致分为以下三类：</p>
<ol>
<li>官方给出的使用最广泛的场景，对一个已经存在的类（不管实现已知还是未知）进行增加方法的扩展，而不去子类化。扩展出来的类均可以被子类和原始类来使用。</li>
<li>把代码量的类中的方法划分成多个Category文件。</li>
<li>声明私有方法。</li>
</ol>
<p>在日常使用的过程中，我们通常使用的是一种方法，因为其封装的便利性，使得其应用非常的广泛。我们使用Category的基本原则：</p>
<blockquote>
<p>“The answer is don’t do that. Only add methods,don’t try to replace or otherwise.It’s hard to understand for people reading your code”</p>
</blockquote>
<p>如果说你在使用的时候发现你试图在Category中去overwrite父类的方法，虽然是可以这么做的，但是不推荐。因为重写之后，在使用方法的时候会优先选择Category中的方法实现，导致原来的方法不能使用。如果出现了这种情况，那么一定是你使用场景出现大的错误，要尝试继承或者其他的封装方法。</p>
<h2 id="u6CE8_u610F"><a href="#u6CE8_u610F" class="headerlink" title="注意"></a>注意</h2><ul>
<li><p>不需要实现所有的方法<br>在我们平时的使用中，在Category中声明的方法并不需要都实现，关键在于你会不会调用方法。</p>
</li>
<li><p>命名<br>开发者在项目的过程中，常常会出现积累了自己Category的情况。当使用三方库的时候，有可能出现Category重名的问题，所以建议大家在创建Category的时候，加上自己特有的prefix。可以在最初使用的时候统一命名为+xxTools，等到Category方法越来越多的时候在进行根据功能划分的Category拆分，当然同时也要加上prefix，避免重名。</p>
</li>
<li><p>属性<br>大家都会说Category中不能自定义属性。这种说法其实是不正确的，在Category中可以声明property，也同样会实现setter和getter方法，但是对于属性的实现是不行的。想要进行弥补，就只能使用Associated Objects来实现。我们将在该系列的下一篇<a href="http://yeziahehe.com/2016/01/06/Objective-C%E5%B0%81%E8%A3%85%E6%8A%80%E5%B7%A7%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E4%B8%8E%E2%80%9C%E9%AD%94%E9%AC%BC%E7%9A%84%E4%BA%A4%E6%98%93%E2%80%9D%20--%20Associated%20Objects/">博客</a>中来详细展开。</p>
</li>
</ul>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><p>大家对于Category的封装，可以参考<a href="https://github.com/ibireme" target="_blank" rel="external">Yaoyuan</a>大神的<a href="https://github.com/ibireme/YYCategories" target="_blank" rel="external">YYCategory</a>，直接拿来就能用。对他为开源做出的贡献表示感谢。</p>
<h1 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h1><p>通过上述的展开，我们可以大概总结一下。对于需要重写的父类的方法，或者需要对实例属性进行操作的时候，我们需要选择继承，继承通常应在UIKit的对象中。对于现有类方法的扩展，或者对于Foundation中对象的封装，通常首先考虑使用Category。<br>最后，本篇文章回答了第一次问题，其他的两个问题，将在下面两篇博客中来展开。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>有经验的工程师在经历过一些项目之后，会慢慢的去考]]>
    </summary>
    
      <category term="Category" scheme="http://yeziahehe.com/tags/Category/"/>
    
      <category term="Objective-C" scheme="http://yeziahehe.com/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="封装" scheme="http://yeziahehe.com/tags/%E5%B0%81%E8%A3%85/"/>
    
      <category term="继承" scheme="http://yeziahehe.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
      <category term="封装" scheme="http://yeziahehe.com/categories/iOS/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bye 2015，Hi 2016]]></title>
    <link href="http://yeziahehe.com/2016/01/04/Bye%202015%EF%BC%8CHi%202016/"/>
    <id>http://yeziahehe.com/2016/01/04/Bye 2015，Hi 2016/</id>
    <published>2016-01-04T07:25:09.000Z</published>
    <updated>2016-01-13T14:18:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>2015年做了好多从来没有想过的事情，感觉自己慢慢的开始长大，开始离开父母的庇护，一个人去体验这个世界。</p>
<h1 id="u5173_u4E8E_u5B66_u4E1A"><a href="#u5173_u4E8E_u5B66_u4E1A" class="headerlink" title="关于学业"></a>关于学业</h1><p>2015年下半年，我大四了，临近毕业，正好对四年大学的生活做一个总结。<br>我记得我刚刚进大学的时候一心就是要参与学校的组织里面去，希望能够慢慢的做个有影响力的人。我今年最大的感悟，发现彦祖和百万都再利用自己的影响力，去给整个移动开发生态圈营造良好的学习和分享氛围。我很感谢他们，也很感谢这个信息爆炸的时代。继续说我，当初刚刚进大学的想法，因为我摔了脚，无奈做了手术，在家休养了很久。等我再回学校的时候，发现我和学生组织已经脱节了，他们玩的很开心，彼此都熟悉了。我也庆幸，我卧床休养的那几个月，我把我的windows系统删了，装了个OS X系统，捣鼓了iOS的开发。这么说来，我从2012年的年底就开始接触移动开发了。<br>大二大三的时候，我慢慢离开了学生组织，辞去了班长，加入了实验室，正式开始做iOS的开发。说实话，我承认自己的学校确实大氛围并没有那么好，江苏某发展很好的城市的唯一一所211，我自己一个人捣鼓，那一年多的时间，技术进步的很慢。但是没有比较就不知道人外有人、天外有天。大二的暑假我没回家，在实验室捣鼓了一暑假，给学校做了个app。大三暑假我也没有回家，去了一家很小的公司实习，学到了不少。<br>大四了，我也要毕业，我感觉大学这四年，我的学业我没有花心思，我的技术投入了很多精力，但是却也没有成为大牛。总结下来，其实还是觉得自己四年书读的太少，对于问题的思考也没有那么积极。</p>
<h1 id="u5173_u4E8E_u521B_u4E1A"><a href="#u5173_u4E8E_u521B_u4E1A" class="headerlink" title="关于创业"></a>关于创业</h1><p>创业，这个字眼本来根本不会出现在我人生的字典轨迹里面。我大四的时候准备出国，在考完GRE之后，还是跟我的两个室友一拍即合，成立了公司。<br>我觉得对于我们来说，根本不能用创业这个词来描述我们所做的工作，应该用 <strong>生存</strong> 这个词来描述。<br>年轻气盛，什么都不怕，我们从今年的4月份开始准备公司注册，到成立公司，到现在运营，回头看看真的像做梦一样。<br>我的两个室友，一个做Android开发，一个做服务端开发，我们就是铁三角组合。最初，其实想法很简单，搞一个项目，拿到融资，当上CEO，赢取白富美，走上人生巅峰。后来发现，现实不是这样，资本寒冬来了之后，融资变得异常困难。我们开始接外包，为了生存下去，7月份到11月份，我自己从公司拿了4k做生活费。 <strong>等你正真开始走进社会的时候，你才知道，社会比你想象的要残酷的多。</strong> 我们经历很多奇奇怪怪的客户，要求苛刻的客户，而项目的款项也并没有如期的收回来，公司的处境越来越难。11月被迫，解散了其他的同事，只剩下我们三个人。<br>今年，我觉得我从社会里面学到了太多太多，我也从一个学生思维转变到了社会思维，我没有后悔没出国，也没有后悔这几个月艰苦的日子，我觉得这是我这辈子的财富。<br>我也希望，所有创业的大学生小伙伴，都能够成功，但是大家如果没有好的idea，没有足够运营经验的人帮助，大家轻易不要去尝试。 <strong>路还长，等我们装备精良，再出发。</strong></p>
<h1 id="u5173_u4E8E_u804C_u4E1A_u751F_u6DAF"><a href="#u5173_u4E8E_u804C_u4E1A_u751F_u6DAF" class="headerlink" title="关于职业生涯"></a>关于职业生涯</h1><p>我对于职业生涯，其实想的很简单， <strong>我想去看更大的世界。</strong> 我创过业，自己折腾了很久的技术，我也看到影响力大的人在传播技术、分享技术。我想加入他们，与他们一起去看更大的世界。<br>对于即将要毕业的我，只剩下明年的春招，我觉得我该去试试，离开我自己折腾这么久的地方，去远方看看。</p>
<h1 id="u5173_u4E8E_u7231_u60C5"><a href="#u5173_u4E8E_u7231_u60C5" class="headerlink" title="关于爱情"></a>关于爱情</h1><p>年初，分手了，后来断断续续的也有过恋爱。现在单着，我觉得自己还是不够成熟，不够稳重。我无数次期待未来的生活，期待未来的她，我也不知道我以后会怎么样， <strong>我爱着她，她也爱着我，这是我心里最理想的状态。</strong></p>
<h1 id="u5173_u4E8E_u751F_u6D3B_u548C_u672A_u6765"><a href="#u5173_u4E8E_u751F_u6D3B_u548C_u672A_u6765" class="headerlink" title="关于生活和未来"></a>关于生活和未来</h1><p>我看完了很多人的总结，我发现我根本不热爱生活，我的生活总是那么的单调，没有生活情趣。生活中的很多细节，会让一个人慢慢的热爱上生活，热爱上工作，也变得积极。<br>今年在自己的城市买了房子，但是应该会出现几年，看看更大的世界，最后再回到这里。希望未来，越来越好。<br>关于未来，我希望：</p>
<ul>
<li><strong>读书，不再全部是技术类的书，读点其他方面的书，争取写出读书笔记，今年目标10本。</strong></li>
<li><strong>健身，我办了健身卡，却一直放在包里，今年努力健身，练出好的身材，每周健身2次。</strong></li>
<li><strong>摄影，我开始慢慢的喜欢上欣赏美的东西，今年希望自己能赚到钱买到入门级的单反，学好摄影。</strong></li>
<li><strong>练字，下半年毕业后，准备重拾丢了多年的楷书。</strong></li>
<li><strong>设备，2012mid的MBP要换了，还是努力挣钱，或者称手的家伙。</strong></li>
<li><strong>工作，我心里有了目标，希望今年加油。</strong></li>
<li><strong>技术，做有影响力的事情，热爱开源，多认识大牛。</strong></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>2015年做了好多从来没有想过的事情，感觉自己慢]]>
    </summary>
    
      <category term="2015" scheme="http://yeziahehe.com/tags/2015/"/>
    
      <category term="总结" scheme="http://yeziahehe.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="随想" scheme="http://yeziahehe.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发工程师职业图谱]]></title>
    <link href="http://yeziahehe.com/2016/01/04/iOS_dev_professional_map/"/>
    <id>http://yeziahehe.com/2016/01/04/iOS_dev_professional_map/</id>
    <published>2016-01-04T03:11:07.000Z</published>
    <updated>2016-01-04T13:46:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>最近极客学院发起了<a href="https://github.com/jikexueyuanwiki/skillmap" target="_blank" rel="external">IT技能图谱</a>，针对<a href="https://github.com/jikexueyuanwiki/skillmap/blob/master/iOS.md" target="_blank" rel="external">iOS 开发工程师</a>的职业图谱，我决定做个技能树的完成度评估。</p>
<h1 id="u8BF4_u660E"><a href="#u8BF4_u660E" class="headerlink" title="说明"></a>说明</h1><ul>
<li>难度等级：R1-R5, 对应关系：零基础(R1)、简单(R2)、一般(R3)、困难(R4)、非常困难(R5)</li>
<li>达到程度：P1-P5, 对应关系：了解(P1)、熟悉(P2)、掌握(P3)、精通(P4)、专家(P5)</li>
<li><del>删除线</del>代表该项基本完成，未完成的部分准备补上进度百分比。</li>
</ul>
<h1 id="u804C_u4E1A_u56FE_u8C31"><a href="#u804C_u4E1A_u56FE_u8C31" class="headerlink" title="职业图谱"></a>职业图谱</h1><ul>
<li>通用基础(R3,P2)<ul>
<li>理论基础(R4,P3)<ul>
<li>数据结构(R4,P3)</li>
<li>算法(R4,P3)</li>
</ul>
</li>
<li>编程语言(R3,P2)<ul>
<li>Objective-C(R3,P3)</li>
<li>Swift(R3,P2)</li>
</ul>
</li>
</ul>
</li>
<li>Objective-C基础(R3,P3)<ul>
<li>Objective-C基本语法(R2,P4)<ul>
<li><del>变量(R2,P4)</del></li>
<li><del>常量(R2,P4)</del></li>
<li><del>数据类型(R2,P4)</del></li>
<li><del>运算符和表达式(R2,P4)</del></li>
<li><del>判断(R2,P4)</del></li>
<li><del>循环(R2,P4)</del></li>
<li><a href="https://github.com/QianKaiLu/Objective-C-Coding-Guidelines-In-Chinese" target="_blank" rel="external">Objective-C编码规范</a>(R2,P4)</li>
</ul>
</li>
<li>Objective-C语法进阶(R3,P3)<ul>
<li><del>类和对象(R3,P3)</del></li>
<li><del>属性和变量(R3,P3)</del></li>
<li><del>继承(R3,P3)</del></li>
<li><del>多态(R3,P3)</del></li>
<li>动态绑定(R3,P3)</li>
<li>block块(R3,P3)</li>
<li>异常处理(R3,P3)</li>
<li><del>Category类别(R3,P3)</del></li>
<li>Extension扩展(R3,P3)</li>
<li><del>Protocol协议 (R3,P3)</del></li>
</ul>
</li>
<li>Objective-C高级语法(R4,P2)<ul>
<li>KVC(R4,P2)</li>
<li>KVO(R4,P2)</li>
<li><del>Notification(R4,P2)</del></li>
<li><del>引用计数与ARC(R4,P2)</del></li>
<li>内存管理(R4,P4)</li>
<li>多线程(R4,P3)</li>
</ul>
</li>
<li>Objective-C Foundation框架(R3,P3)<ul>
<li><del>NSNumber(R3,P3)</del></li>
<li><del>NSString(R3,P4)</del></li>
<li><del>NSArray(R3,P4)</del></li>
<li><del>NSDictionary(R3,P4)</del></li>
<li><del>NSSet(R3,P2)</del></li>
</ul>
</li>
</ul>
</li>
<li>Swift基础(R2,P2)<ul>
<li>Swift基本语法(R2,P2)<ul>
<li>变量(R2,P2)</li>
<li>常量(R2,P2)</li>
<li>数据类型(R2,P2)</li>
<li>判断(R2,P2)</li>
<li>循环(R2,P2)</li>
<li>Swift编码规范(R2,P2)</li>
</ul>
</li>
<li>Swift语法进阶(R3,P2)<ul>
<li>Swift字符串(R3,P2)</li>
<li>数组(R3,P2)</li>
<li>字典(R3,P2)</li>
<li>元组(R3,P2)</li>
<li>函数(R3,P2)</li>
<li>可选型optionals(R3,P2)</li>
<li>枚举(R3,P2)</li>
<li>闭包 (R3,P2)</li>
</ul>
</li>
<li>Swift高级语法(R4,P1)<ul>
<li>Swift和Objective-C混合编程(R3,P1)</li>
<li>Swift源码(R5,P1)</li>
</ul>
</li>
</ul>
</li>
<li>iOS开发基础(R2,P3)<ul>
<li>iOS基础(R2,P3)<ul>
<li>iOS生命周期(R3,P3)</li>
<li>事件与消息(R3,P3)</li>
<li><del>模拟器(R2,P2)</del></li>
<li><del>真机调试(R2,P2)</del></li>
</ul>
</li>
<li>UI控件(R2,P4)<ul>
<li><del>Button(R2,P4)</del></li>
<li><del>Label(R2,P4)</del></li>
<li><del>ImageView(R2,P4)</del></li>
<li><del>ScrollView(R2,P4)</del></li>
<li><del>TableView(R4,P4)</del></li>
<li><del>CollectionView(R4,P3)</del></li>
<li><del>自定义控件(R4,P2)</del></li>
</ul>
</li>
<li>界面布局(R3,P3)<ul>
<li>代码布局(R3,P3)</li>
<li><del>nib/xib文件(R2,P3)</del></li>
<li>storyboard(R2,P3)</li>
</ul>
</li>
</ul>
</li>
<li>iOS开发进阶(R3,P3)<ul>
<li>动画效果(R3,P2)<ul>
<li>UIView动画(R3,P2)</li>
<li>Core Animation(R3,P2)</li>
<li>第三方动画库pop(R3,P1)</li>
</ul>
</li>
<li>多线程(R4,P4)<ul>
<li>NSThread(R4,P3)</li>
<li>NSOperationQueue(R4,P4)</li>
<li>GCD(R3,P4)   </li>
</ul>
</li>
<li>数据存储(R3,P4)<ul>
<li><del>NSUserDefault(R3,P4)</del></li>
<li>SQLite(R3,P2)</li>
<li>CoreData(R3,P4)</li>
</ul>
</li>
<li>数据处理(R3,P3)<ul>
<li><del>Model(R4,P3)</del></li>
<li>XML解析(R3,P4)</li>
<li><del>JSON解析(R3,P4)</del></li>
</ul>
</li>
<li>物理特性(R3,P1)<ul>
<li><del>各类传感器(R3,P1)</del></li>
<li><del>摄像头(R3,P1)</del></li>
<li>指纹识别(R3,P1)</li>
<li>Force Touch(R3,P1)</li>
</ul>
</li>
<li>网络与通信(R3,P3)<ul>
<li><del>Http(R3,P4)</del></li>
<li>Socket(R3,P2)</li>
<li>SOAP(R3,P2)</li>
<li><del>抓包(R4,P1)</del></li>
</ul>
</li>
<li>屏幕适配(R3,P3)<ul>
<li>代码适配(R3,P4)</li>
<li><del>Autoresizing(R2,P4)</del></li>
<li><del>AutoLayout(R3,P3)</del></li>
<li>Size Classes(R4,P2)    </li>
</ul>
</li>
<li>其他(R3,P2)<ul>
<li>多点触控(R3,P1)</li>
<li><del>手势识别(R3,P1)</del></li>
<li>传感器(R3,P1)</li>
<li><del>定位(R3,P3)</del></li>
<li>电源管理(R3,P1)</li>
<li><del>消息推送(R3,P3)</del>  </li>
</ul>
</li>
</ul>
</li>
<li>iOS高级开发(R4,P2)<ul>
<li>iOS架构(R4，P2)<ul>
<li><del>MVC(R3,P2)</del></li>
<li><del>MVVM(R4,P1)</del></li>
<li>设计模式(R5,P2)</li>
</ul>
</li>
<li>第三方框架(R3,P2)<ul>
<li><del>AFNetworking(R3,P3)</del></li>
<li><del>SDWebImage(R3,P2)</del></li>
<li><del>MBProgressHUD(R3,P2)</del></li>
<li>Masonry(R3,P1)     </li>
</ul>
</li>
<li>第三方SDK(R3,P2)<ul>
<li><del>分享(R3,P3)</del></li>
<li>第三方登录(R4,P2)</li>
<li><del>短信验证码(R3,P3)</del>  </li>
<li>其他各类API(R3,P2)</li>
</ul>
</li>
</ul>
</li>
<li>开发效率(R3,P3)<ul>
<li>IDE(R2,P4)<ul>
<li>Xcode(R2,P4)</li>
</ul>
</li>
<li>插件(R2,P1)<ul>
<li><del>Alcatraz(R2,P1)</del>   </li>
</ul>
</li>
<li>包管理(R2,P3)<ul>
<li><del>Cocoapods</del>   </li>
</ul>
</li>
<li>版本控制(R2,P3)<ul>
<li><del>Git(R2,P3)</del></li>
<li><del>SVN(R2,P3)</del></li>
</ul>
</li>
<li>应用内测与分发(R2,P1)<ul>
<li>Pre.im(R2,P1)</li>
<li><del>蒲公英(R2,P1)</del></li>
</ul>
</li>
<li>后台服务(R2,P1)<ul>
<li><a href="http://www.bmob.cn/" target="_blank" rel="external">Bmob</a>(R2,P1)</li>
<li><a href="http://www.parse.com/" target="_blank" rel="external">Parse</a> (R2,P1)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>最近极客学院发起了<a href="https:]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="skillmap" scheme="http://yeziahehe.com/tags/skillmap/"/>
    
      <category term="skillmap" scheme="http://yeziahehe.com/categories/skillmap/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[浅谈iOS中Library和Framework]]></title>
    <link href="http://yeziahehe.com/2015/12/30/talk_iOS_Library_and_Framework/"/>
    <id>http://yeziahehe.com/2015/12/30/talk_iOS_Library_and_Framework/</id>
    <published>2015-12-30T02:40:25.000Z</published>
    <updated>2016-01-05T15:48:04.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>有关于库的出现场景，其实很简单的回答就是，不愿意把实现的源码暴露给其他人。虽然我是脑残的开源爱好者，但是总有些场景下，有这样的需求，比如外包公司的框架，比如我这次写NativeScript，需要自己将三方库打包然后使用在js中调用（当然后来我看到支持CocoaPods的时候，喷了一口老血）。不过这个是客观的一些原因，还有一些有想法的程序员，为了减少编译的时间，也会选择将改动不大的代码进行打包。打包好的代码是编译完成的二进制文件，在项目进行编译的时候链接上，确实一定程度的减少编译时间。</p>
<h1 id="u5E93_u7684_u672C_u8D28"><a href="#u5E93_u7684_u672C_u8D28" class="headerlink" title="库的本质"></a>库的本质</h1><p>库的本质，我觉得非常好理解。我们首先要知道对于所有的库，都是进行编译的，而编译生成的其实是一段二进制代码。所以我们可以给库下个定义：</p>
<blockquote>
<p>提供头文件的编译好的二进制代码。</p>
</blockquote>
<p>对于库的链接，分为了动态链接和静态链接，这也就产生了iOS中的静态库和动态库。</p>
<h1 id="u9759_u6001_u5E93_u548C_u52A8_u6001_u5E93"><a href="#u9759_u6001_u5E93_u548C_u52A8_u6001_u5E93" class="headerlink" title="静态库和动态库"></a>静态库和动态库</h1><p>静态库（Windows 下的 .lib，Linux 和 Mac 下的 .a）。<br>动态库（Windows 下的 .dll，Linux 下的 .so，Mac 下的 .dylib）。</p>
<p>和所有平台所理解静态链接库、动态链接库一样，静态和动态都是相对于编译和运行来讲的：静态库在编译的时候就会被拷贝到目标程序中，运行的时候就不会在改变了；动态库在编译的时候是不会拷贝到目标程序中，在运行的时候会将库加载进来。</p>
<h2 id="u7F16_u8BD1_u548C_u8FD0_u884C"><a href="#u7F16_u8BD1_u548C_u8FD0_u884C" class="headerlink" title="编译和运行"></a>编译和运行</h2><p>区分下编译和运行的概念。在Xcode中我们进行CMD+R的时候其实做了很多的步骤，编译和运行都包括在其中。</p>
<p>编译：如果我们自己打包的时候，使用的是CMD+B的命令，其实是调用了LLVM编译器，进行编译，编程计算机能识别的二进制码。<br>运行：将编译生成的文件链接为可执行文件并进行运行。</p>
<p>静态库就是在目标程序编译的时候已经存在了编译好了的二进制代码，所以说目标程序编译的时候不需要对这段代码进行改变，而且还减少了编译时间。<br>动态库就是在目标程序编译的时候不去链接，而是创建了引用，在运行的时候，进行对动态库的链接和编译。</p>
<h2 id="u4F18_u7F3A_u70B9"><a href="#u4F18_u7F3A_u70B9" class="headerlink" title="优缺点"></a>优缺点</h2><p>静态库的好处很明显，编译完成之后，库文件实际上就没有作用了。目标程序没有外部依赖，直接就可以运行。当然其缺点也很明显，就是会使用目标程序的体积增大。</p>
<p>动态库的优点，不需要拷贝到目标程序中，不会影响目标程序的体积，而且同一份库可以被多个程序使用（因为这个原因，动态库也被称作共享库）。同时，编译时才载入的特性，也可以让我们随时对库进行替换，而不需要重新编译代码，这样就可以实现动态更新。动态库带来的问题主要是，动态载入会带来一部分性能损失，使用动态库也会使得程序依赖于外部环境。如果环境缺少动态库或者库的版本不正确，就会导致程序无法运行。</p>
<h1 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h1><p>Framework是Mac OS/iOS平台特有的一种打包方式，将编译生成的二进制文件、头文件、资源文件统一打包。可以包含如下的东西：</p>
<ul>
<li>共享库</li>
<li>描述API的头文件</li>
<li>文档</li>
<li>资源文件（UI，Assets，配置文件）</li>
</ul>
<p>在iOS 8之前我们Framework其实就是静态库，原因很简单，之前Apple官方不支持动态打包，我们只能使用官方的UIKit或者Foundation等Framework。从iOS 8之后苹果开放了对动态Framework的支持，这应该是苹果为支持 Extension 这一特性而做出的选择（Extension 和 App 是两个分开的可执行文件，它们之间共享代码，所以需要 Framework 支持）。不过我们这个和系统还是有区别，系统的 Framework 不需要拷贝到目标程序中，我们自己做出来的 Framework 哪怕是动态的，最后也还是要拷贝到 App 中，因此苹果又把这种 Framework 称为Embedded Framework。这个时候所谓的动态库其实意义就是升级版的静态库，因为动态库使用的前提是项目在发布前添加到项目中，这和我们所谓的插件（即插即用，随时在自己的服务器上下载一个动态库运行，而不需要重新打包，我们可以选择在需要的时候再加载动态库）完全是两码事。当然我们可以通过方法去实现Framework的动态更新，这里不做赘述。</p>
<h2 id="u521B_u5EFA"><a href="#u521B_u5EFA" class="headerlink" title="创建"></a>创建</h2><p>应该说现在创建一个Framework非常的方便，我们基本上不需要很简单的就能够制作一个Framework。<br>首先我们新建一个Framwork的项目<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/coryphaei%2Fcreate_framework.png" alt="新建项目"></p>
<p>然后把我们需要创建的文件加入其中，注意这边添加的是Swift的文件，因为Swift中是没有.h和.m的，所以会默认会帮你生成一个xxx-Swift.h的头文件，其中是所有public属性和方法都暴露了出来。<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/coryphaei%2Fadd_file.png" alt="添加文件"></p>
<h2 id="u914D_u7F6E"><a href="#u914D_u7F6E" class="headerlink" title="配置"></a>配置</h2><p>接下来应该是有个配置的过程，这边需要详细讲下这些变量是什么意思。</p>
<h3 id="arm"><a href="#arm" class="headerlink" title="arm"></a>arm</h3><p>arm代表的是使用的设备的处理器的型号，大致分为以下几种：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arm64 = iPhone <span class="number">5</span>s, iPad Air, Retina iPad Mini</span><br><span class="line">armv7s = iPhone <span class="number">5</span>, iPhone <span class="number">5</span>c, iPad <span class="number">4</span></span><br><span class="line">armv7  = iPhone <span class="number">3</span>GS, iPhone <span class="number">4</span>, iPhone <span class="number">4</span>S, iPod <span class="number">3</span>G/<span class="number">4</span>G/<span class="number">5</span>G, iPad, iPad <span class="number">2</span>, iPad <span class="number">3</span>, iPad Mini   </span><br><span class="line">i386 = <span class="number">32</span> bit simulator</span><br><span class="line">x86_64 = <span class="number">64</span> bit simulator</span><br></pre></td></tr></table></figure></p>
<h3 id="u51E0_u4E2A_u8BBE_u7F6E"><a href="#u51E0_u4E2A_u8BBE_u7F6E" class="headerlink" title="几个设置"></a>几个设置</h3><p>Architectures：该编译选项指定了工程将被编译成支持哪些指令集，支持指令集是通过编译生成对应的二进制数据包实现的，如果支持的指令集数目有多个，就会编译出包含多个指令集代码的数据包，造成最终编译的包很大。<br>Valid Architectures：该编译项指定可能支持的指令集。<br>最后生成的支持工程的指令集应该是上面两个所产生的交集。</p>
<p>Build Active Architecture Only：该编译项用于设置是否只编译当前使用的设备对应的arm指令集。<br>当这个选项设置为YES的时候，不管Architectures和Valid Architectures设置为什么，最后都只会输出支持当前使用设备对应的arm指令集。<br>通常debug选择YES，release选择NO。</p>
<p>有关于指令集的选择，因为指令集有着向下兼容的特性，所以说为了减少包的大小，我们通常选择只支持armv7，在armv7s和arm64的机器上同样可以使用，当然性能有部分损失，可以忽略不计。<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/coryphaei%2Fconfig.png" alt="config"></p>
<h2 id="u7F16_u8BD1"><a href="#u7F16_u8BD1" class="headerlink" title="编译"></a>编译</h2><p>有关于编译，一共有两种方式：release和debug。<br>可以手动设置run的方式。<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/coryphaei%2Fmodify_run.png" alt="modify_run"><br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/coryphaei%2Fmodify_run_release.png" alt="modify_run_release"></p>
<h2 id="u5B8C_u6210"><a href="#u5B8C_u6210" class="headerlink" title="完成"></a>完成</h2><p>Products里面生成了Framework，找到Framework的位置。<br><img src="http://7xkvt5.com1.z0.glb.clouddn.com/coryphaei%2Fframework_finish.png" alt="Fframework_finish"></p>
<h2 id="u5408_u5E76"><a href="#u5408_u5E76" class="headerlink" title="合并"></a>合并</h2><p>接下来应该是需要把模拟器和真机的Framework进行合并，网上应该有脚本，我是直接实用命令行的方式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -create Debug-iphoneos/SocketIO.framework/SocketIO Debug-iphonesimulator/SocketIO.framework/SocketIO -output SocketIOLib</span><br></pre></td></tr></table></figure></p>
<p>合并完成后进行查看，可以看到支持的指令集。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -info ~/Library/Developer/Xcode/DerivedData/SocketIO-bwzuuvegsamvhtbdwasganalbadg/Build/Products/Debug-iphoneos/SocketIO.framework/SocketIO</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h1><p>有关于库的出现场景，其实很简单的回答就是，不愿意]]>
    </summary>
    
      <category term="Framework" scheme="http://yeziahehe.com/tags/Framework/"/>
    
      <category term="Objective-C" scheme="http://yeziahehe.com/tags/Objective-C/"/>
    
      <category term="Swift" scheme="http://yeziahehe.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Effective Objective-C 2.0--编写高质量iOS与OS X代码的52个有效方法》总结]]></title>
    <link href="http://yeziahehe.com/2015/12/26/%E3%80%8AEffective%20Objective-C%202.0%E3%80%8Bsummarize/"/>
    <id>http://yeziahehe.com/2015/12/26/《Effective Objective-C 2.0》summarize/</id>
    <published>2015-12-26T04:36:48.000Z</published>
    <updated>2015-12-26T05:45:20.000Z</updated>
    <content type="html"><![CDATA[<p>TODO</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>TODO</p>
]]>
    </summary>
    
      <category term="Objective-C" scheme="http://yeziahehe.com/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="读书笔记" scheme="http://yeziahehe.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C新纪元--ReactiveCocoa框架]]></title>
    <link href="http://yeziahehe.com/2015/12/15/Objective-C_epoch--ReactiveCocoa_framwork/"/>
    <id>http://yeziahehe.com/2015/12/15/Objective-C_epoch--ReactiveCocoa_framwork/</id>
    <published>2015-12-15T06:56:46.000Z</published>
    <updated>2016-01-05T15:47:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>很久之前我就准备写有关于ReactiveCocoa的文章，前面林林总总写过几篇，但是都是简单的讲述，并没有深刻的去总结这个技术。根本的原因在于这个技术确实很难入门，但是ReactiveCocoa的出现确实可以给iOS带来很多新的思考和实现，ReactiveCocoa更加被Mattt Thompson大神称为开启一个新Objective-C纪元。另外提醒大家，我看到的优秀的讲ReactiveCocoa的文章篇幅都很长，其实大家都在简洁的语言来讲，我的这边文章应该写完也是长篇幅，希望大家可以耐心的看完。</p>
<h1 id="u51FD_u6570_u54CD_u5E94_u5F0F_u7F16_u7A0B"><a href="#u51FD_u6570_u54CD_u5E94_u5F0F_u7F16_u7A0B" class="headerlink" title="函数响应式编程"></a>函数响应式编程</h1><p>ReactiveCocoa的基本思想就是<code>函数响应式编程（Function Reactive Programming，以下简称FRP）</code>。FRP是一种响应变化的编程范式。我们通常会拿一个经典的例子来解释概念。</p>
<h2 id="u7406_u5FF5"><a href="#u7406_u5FF5" class="headerlink" title="理念"></a>理念</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = a + b<span class="comment">// c = 4</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line"><span class="comment">// 现在c的值是多少？</span></span><br></pre></td></tr></table></figure>
<p>上面的问题，正常人一眼就能看出答案，因为我们<code>响应</code>了<code>b = 2</code>这个值的变化，所以说<code>c</code>的值会随着<code>b</code>的值的改变而改变。FRP就是使用这样的基本原理，所以称之为<code>响应式编程</code>。</p>
<h2 id="u5982_u4F55_u5B9E_u73B0"><a href="#u5982_u4F55_u5B9E_u73B0" class="headerlink" title="如何实现"></a>如何实现</h2><p>FRP提供了<code>信号（Signal）</code>机制来实现这样的效果，通过信号来记录值的变化。通过信号的组合，从而不再去监听值的变化，甚至是事件的变化。在上述例子中加入了signal的图解：<br><img src="http://7xp57v.com1.z0.glb.clouddn.com/coryphaei/FRP_signal.png" alt="FRP_signal"></p>
<h2 id="ReactiveCocoa_u4F5C_u8005_u5BF9_u4E8EFRP_u7684_u89E3_u91CA"><a href="#ReactiveCocoa_u4F5C_u8005_u5BF9_u4E8EFRP_u7684_u89E3_u91CA" class="headerlink" title="ReactiveCocoa作者对于FRP的解释"></a>ReactiveCocoa作者对于FRP的解释</h2><p><a href="http://blog.maybeapps.com/post/42894317939/input-and-output" target="_blank" rel="external">Josh Abernathy这样解释它：</a></p>
<blockquote>
<p>程序接收输入产生输出。输出就是对输入做了一些事的结果。输入，转换，输出，完成。<br>输入是应用动作的全部来源。点击、键盘事件、定时器事件、GPS时间、网络请求响应都算是输入。这些事件被传递到应用中，应用将他们以某种方式混合，产生了结果：就是输出。<br>输出通常会改变应用的UI。开关状态变化、列表有了新的元素都是UI变化。也有可能让磁盘上某个文件产生变化，或者产生一个API请求，这都是应用的输出。<br>但不像传统的输入输出设计，应用的输入输出可以产生很多次。应用打开后，不只是一个简单的 输入→工作→输出 就构成了一个生命周期。应用经常有大量的输入并基于这些输入产生输出。</p>
</blockquote>
<h2 id="u8BDD_u5916"><a href="#u8BDD_u5916" class="headerlink" title="话外"></a>话外</h2><p>关于ReactiveCocoa的灵感来源，我们可以看到官方README中提到了<code>ReactiveCocoa深受Microsoft&#39;s Reactive Extension的思想，并基于Reactive Extension（Rx）</code>。但是官方列举了很多ReactiveCocoa有别于Rx的地方，有兴趣的可以去了解下。</p>
<h1 id="ReactiveCocoa"><a href="#ReactiveCocoa" class="headerlink" title="ReactiveCocoa"></a>ReactiveCocoa</h1><p><a href="http://reactivecocoa.io/" target="_blank" rel="external">ReactiveCocoa</a> is a framework developed by <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">GitHub</a> to support functional reactive programming on iOS and OS X.</p>
<h2 id="u8D77_u56E0"><a href="#u8D77_u56E0" class="headerlink" title="起因"></a>起因</h2><p>作为一个移动开发者，应用中经常有大量的输入，大部分的代码都用来响应这些输出并且基于这些输入来产生输出。我们需要响应的事件非常多：按钮点击事件（target-action）、网络消息回调事件（Block or delegate）、属性变化事件（KVO）、通知事件（NSNotification）等，而这边响应事件在代码中的表现形式却并不统一。为了定义一个标准统一的事件处理接口，并且通过定义的接口来进行组合使用，ReactiveCocoa出现了。</p>
<h2 id="u57FA_u672C_u601D_u60F3"><a href="#u57FA_u672C_u601D_u60F3" class="headerlink" title="基本思想"></a>基本思想</h2><p>我们GitHub主页上看到，官方这样给出了概念：</p>
<blockquote>
<p>ReactiveCocoa (RAC)是采用FRP的一个Cocoa framework。RAC提供了API用来组合、转换一直变化的数据流。</p>
</blockquote>
<p>ReactiveCocoa采用FRP思想，<code>信号</code>则是这个思想的精髓所在，灵魂所在。在ReactiveCocoa简称是RAC，所有的类都以<code>RAC</code>开头，所以说ReactiveCocoa中的信号就用<code>RACSignal</code>类来表示，用来展示<code>事件流</code>的变化，并且可以通过链接、过滤、组合等方式来进行处理。</p>
<blockquote>
<p>引用我在很多博客中看到的一段话，但是我对其做了改动，加入了桶的概念：<br>可以把信号(signal)想象成水龙头，只不过里面不是水，而是玻璃球(stream of value)，直径跟水管的内径一样，这样就能保证玻璃球是依次排列，不会出现并排的情况(数据都是线性处理的，不会出现并发情况)。只要你打开水龙头的开关，就会有玻璃球出来。但是，并不是所有的玻璃球都能被使用，除非有了桶(subscriber)来接收掉下来的玻璃球，这样才能运往需要的地方。这样有新的玻璃球进来，有桶在监听，就会自动传送给接收者。可以在水龙头上加一个过滤嘴(filter)，不符合的不让通过，也可以加一个改动装置，把球改变成符合自己的需求(map)。也可以把多个水龙头合并成一个新的水龙头(combineLatest:reduce:)，这样只要其中的一个水龙头有玻璃球出来，这个新合并的水龙头就会得到这个球。</p>
</blockquote>
<h2 id="u601D_u8003"><a href="#u601D_u8003" class="headerlink" title="思考"></a>思考</h2><p>通过上述对其的了解，总结ReactiveCocoa带来的影响。</p>
<ul>
<li>定义标准的事件处理接口</li>
<li>解决了状态过多依赖的问题</li>
</ul>
<p>PS：关于巧哥说的给Controller瘦身的问题，我认为这个是MVVM框架所带来的影响，ReactiveCocoa只是很好的配合了MVVM。因此我并没有把这一点归纳在内。</p>
<h1 id="u5F00_u59CB"><a href="#u5F00_u59CB" class="headerlink" title="开始"></a>开始</h1><p>进入正轨，开始介绍ReactiveCocoa的机制和常用方法。</p>
<h2 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h2><p>推荐大家用<a href="http://code4app.com/article/cocoapods-install-usage" target="_blank" rel="external">CocoaPods</a>进行安装，这么好的工具肯定要掌握的。<br><img src="http://7xp57v.com1.z0.glb.clouddn.com/coryphaei/cocoapods.png" alt="CocoaPods"><br>目前4.0的alpha版本正在开发，建议大家先使用发布的版本。如果你用swift来写可以用3.0，我是用的Objective，所以用的2.5版本，Podfile:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">platform <span class="symbol">:ios</span>, <span class="string">'8.0'</span></span><br><span class="line">pod <span class="string">'ReactiveCocoa'</span>, <span class="string">'~&gt; 2.5'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="RACStreams"><a href="#RACStreams" class="headerlink" title="RACStreams"></a>RACStreams</h2><p><code>RACStreams</code>官方定义<code>An abstract class representing any stream of values</code>，我翻译下RACStreams是展现任何数据流的一个抽象类。RACStreams通俗点讲就是上面那段话中<code>水管里面线性流动的、具有顺序的玻璃球</code>。RACStreams因为是一个抽象类，我们使用中很少直接接触到，我们一般是使用继承自RACStreams的<code>RACSignal</code>和<code>RACSequence</code>。对于RACSignal和RACSequence与RACStreams联系，我觉得可以直接用<a href="http://nshipster.cn/reactivecocoa/" target="_blank" rel="external">NShipster</a>中一句话：</p>
<blockquote>
<p>signal是push驱动的stream，sequence是pull驱动的stream。</p>
</blockquote>
<h2 id="RACSignal_and_RACSubscriber"><a href="#RACSignal_and_RACSubscriber" class="headerlink" title="RACSignal and RACSubscriber"></a>RACSignal and RACSubscriber</h2><p><code>RACSignal</code>是ReactiveCocoa的核心所在，有了它就能开始使用ReactiveCocoa。RACSignal通俗点讲就是上面那段话中所提到的<code>水龙头</code>，表示未来要到到达的值。比较类似于一个概念，叫做<code>future and promise</code>，大家可以自行去了解下。<br><code>RACSubscriber</code>是订阅者，通俗点说就是上面那段话中用来装玻璃球的<code>桶</code>。我们可以用一个更好的比喻来理解一下。把RACSignal比作插头，把RACSubscriber比作插座，插头负责去用电，插座负责去取点，插头插座配套才能使用。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.rac_textSignal</span> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h3 id="u51B7_u4FE1_u53F7_28Cold_29_u548C_u70ED_u4FE1_u53F7_28Hot_29"><a href="#u51B7_u4FE1_u53F7_28Cold_29_u548C_u70ED_u4FE1_u53F7_28Hot_29" class="headerlink" title="冷信号(Cold)和热信号(Hot)"></a>冷信号(Cold)和热信号(Hot)</h3><p>在上文中提到的插头插座比喻中，如果说只有插头，没有插座，即只有RACSignal，而没有RACSubscriber，则把RACSignal称之为冷信号，而冷信号默认是不进行任何操作的。只要加上RACSubscriber，就可以进行操作，这个时候RACSignal就被称作是热信号。如果说只有插座，没有插头，那么只要去找到插头就能解决问题。</p>
<h3 id="RACReplaySubject"><a href="#RACReplaySubject" class="headerlink" title="RACReplaySubject"></a>RACReplaySubject</h3><p>我们继续上文中的插头插座比喻，如果现在同时有多个插座在等待一个插头用电，那么我就要把这个插头多次拔下来插到所有的插座上。大家都不愿意重复这个操作，ReactiveCocoa提供了<code>RACReplaySubject</code>方法，保证<code>RACSignal</code>只触发一次。把需要send的value存起来，直接发送缓存数据。</p>
<h3 id="u8BE6_u89E3"><a href="#u8BE6_u89E3" class="headerlink" title="详解"></a>详解</h3><p>RACSignal一共会发送三种事件给RACSubscriber，RACSubscriber通过-subscribeNext:error:completed:对不同事件作出相应反应</p>
<ul>
<li>next 继续进行发送</li>
<li>error 出现错误  </li>
<li>completed 完成</li>
</ul>
<p>一个RACSignal会因为error和completed的出现而终止，即生命周期中只会有一个errot或者completed，但是却可以多次发送next事件。而我们接下来要讨论的就是如何来处理这些多次next事件。</p>
<h2 id="RACSequence"><a href="#RACSequence" class="headerlink" title="RACSequence"></a>RACSequence</h2><p><code>RACSequence</code>官方的解释是一组immutable且有序的values，很多人说把这个看做是<code>NSArray</code>。但是注意用词是<code>看做</code>，因为这些values的值是<code>懒加载</code>(只有需要的时候才加载)，这样sequence只有一部分被用到，会一定程度得提升性能。那么NSArray可以通过rac_sequence方法转换成RACSequence来调用RAC中的方法了。像Cocoa的集合类型一样，RACSequence不接受<code>nil</code>。</p>
<h2 id="map__u2013__u4FEE_u6539"><a href="#map__u2013__u4FEE_u6539" class="headerlink" title="map – 修改"></a>map – 修改</h2><p><code>map</code> calls its block with each user that’s fetched and returns a new. 解释一下就是将事件中获得的数据映射为你想要的对象，可以看做对玻璃球的重新包装。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[[<span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.rac_textSignal</span> map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *text) &#123;</span><br><span class="line">    <span class="keyword">return</span> @(text<span class="variable">.length</span>);</span><br><span class="line"> &#125;]</span><br><span class="line"> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure></p>
<h2 id="filter__u2013__u8FC7_u6EE4"><a href="#filter__u2013__u8FC7_u6EE4" class="headerlink" title="filter – 过滤"></a>filter – 过滤</h2><p><code>Filters</code> out values in the receiver that don’t pass the given test. 非常简单对事件中的内容进行过滤，可以看做不合要求的玻璃球进行拦击，不允许通过水管。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[[[<span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.rac_textSignal</span> map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *text) &#123;</span><br><span class="line">    <span class="keyword">return</span> @(text<span class="variable">.length</span>);</span><br><span class="line"> &#125;]</span><br><span class="line"> filter:^<span class="built_in">BOOL</span>(<span class="built_in">NSNumber</span> *length) &#123;</span><br><span class="line">     <span class="keyword">return</span> [length intValue] &gt; <span class="number">3</span>;</span><br><span class="line"> &#125;]</span><br><span class="line"> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, x);</span><br><span class="line"> &#125;];</span><br></pre></td></tr></table></figure></p>
<h2 id="combineLatest__u2013__u7EC4_u5408"><a href="#combineLatest__u2013__u7EC4_u5408" class="headerlink" title="combineLatest – 组合"></a>combineLatest – 组合</h2><p><code>Combines</code> the latest values from the receiver and the given signal into RACTuples, once both have sent at least one next. 将一组事件组合为一个输出最新事件的signal。可以看做是对水管进行改造，使得任何时刻都输出最新的玻璃球。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RACSignal *signUpActiveSignal = [RACSignal combineLatest:@[validUsernameSignal, validPasswordSignal]</span><br><span class="line">                                                  reduce:^<span class="keyword">id</span>(<span class="built_in">NSNumber</span> *usernameValid, <span class="built_in">NSNumber</span> *passwordValid)&#123;</span><br><span class="line">                                                      <span class="keyword">return</span> @([usernameValid boolValue] &amp;&amp; [passwordValid boolValue]);</span><br><span class="line">                                                  &#125;];</span><br></pre></td></tr></table></figure></p>
<h2 id="flatten__u2013__u5408_u5E76"><a href="#flatten__u2013__u5408_u5E76" class="headerlink" title="flatten – 合并"></a>flatten – 合并</h2><p><code>flatten</code>把事件进行合并，对于其中的内容都进行显示，来一个显示一个，可以交叉显示。可以看做把多个水管进行了合并，哪个水管中的玻璃球到了就放出玻璃球。</p>
<h2 id="flattenMap__u2013__u89E3_u51B3signal_of_signals"><a href="#flattenMap__u2013__u89E3_u51B3signal_of_signals" class="headerlink" title="flattenMap – 解决signal of signals"></a>flattenMap – 解决signal of signals</h2><p>Maps <code>block</code> across the values in the receiver and flattens the result.<br>这个问题首先要先解释一下。就是说事件完成block后有可能会返回signal的实例，这个时候外部信号中就会包含一个内部信号，这个时候使用map去讲信号转换为另一种信号，造成了嵌套的麻烦。所以说通过flattenMap将事件从内部信号发送到外部信号，并且映射到另外一个信号上去，这样这个过程就变得扁平化。Signal被按序的链接起来执行异步操作，而且不用嵌套block。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (RACSignal *)signInSignal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [RACSignal createSignal:^RACDisposable *(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.signInService</span> signInWithUsername:<span class="keyword">self</span><span class="variable">.usernameTextField</span><span class="variable">.text</span></span><br><span class="line">                                      password:<span class="keyword">self</span><span class="variable">.passwordTextField</span><span class="variable">.text</span></span><br><span class="line">                                      complete:^(<span class="built_in">BOOL</span> success) &#123;</span><br><span class="line">                                          [subscriber sendNext:@(success)];</span><br><span class="line">                                          [subscriber sendCompleted];</span><br><span class="line">                                      &#125;];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[[[<span class="keyword">self</span><span class="variable">.signInButton</span> rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] flattenMap:^RACStream *(<span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> signInSignal];</span><br><span class="line">&#125;] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Sign in result: %@"</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p>
<h2 id="u5FAA_u73AF_u5F15_u7528"><a href="#u5FAA_u73AF_u5F15_u7528" class="headerlink" title="循环引用"></a>循环引用</h2><p>ReactiveCocoa使用时大量的使用了block，而由于Ojective-C语言的内存管理机制使用的引用计数，会造成循环引用的问题。为了避免循环引用的问题，通常的解决办法是声明其中的一个变量为弱引用weak，将其赋值给self，在block中来使用这个弱引用的self，为了简单，通常使用了一个语法糖：<code>@weakify(self)</code>和<code>@strongify(self)</code>。</p>
<h2 id="u5E38_u7528_u5B8F_u5B9A_u4E49"><a href="#u5E38_u7528_u5B8F_u5B9A_u4E49" class="headerlink" title="常用宏定义"></a>常用宏定义</h2><ul>
<li><p>RAC()可以将信号的某个属性与其他的信号进行联动。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RAC(<span class="keyword">self</span><span class="variable">.submitButton</span><span class="variable">.enabled</span>) = [RACSignal combineLatest:@[<span class="keyword">self</span><span class="variable">.usernameField</span><span class="variable">.rac_textSignal</span>, <span class="keyword">self</span><span class="variable">.passwordField</span><span class="variable">.rac_textSignal</span>] reduce:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *userName, <span class="built_in">NSString</span> *password) &#123;</span><br><span class="line">    <span class="keyword">return</span> @(userName<span class="variable">.length</span> &gt;= <span class="number">6</span> &amp;&amp; password<span class="variable">.length</span> &gt;= <span class="number">6</span>);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
</li>
<li><p>RACObserve()监听信号的属性的改变，使用block的KVO</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[RACObserve(<span class="keyword">self</span><span class="variable">.textField</span>, text) subscribeNext:^(<span class="built_in">NSString</span> *newName) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, newName);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><p><img src="http://7xp57v.com1.z0.glb.clouddn.com/coryphaei/mvvm.png" alt="MVVM"></p>
<h2 id="u4E3A_u4EC0_u4E48_u8981_u63D0_u5230MVVM"><a href="#u4E3A_u4EC0_u4E48_u8981_u63D0_u5230MVVM" class="headerlink" title="为什么要提到MVVM"></a>为什么要提到MVVM</h2><p>MVVM其实是MVC的变形框架，主要来解决目前iOS应用中日益增长的重量级Controller的问题。在你使用ReactiveCocoa的时候会发现将事件定义统一接口后确实方便了代码的编写，但是都在Controller中来进行使得Conttroller异常的臃肿。这个也就是为什么很多人写到ReactiveCocoa的时候一定会提到MVVM的原因，建议大家配合使用，将ReactiveCocoa处理事件的代码写在ViewModel中，这样也方便做测试，昨天听了LeanCloud智维大神的自动化和测试之后，也准备来探究一下，应该到时候会出一篇博客。</p>
<h2 id="u5173_u4E8EMVVM"><a href="#u5173_u4E8EMVVM" class="headerlink" title="关于MVVM"></a>关于MVVM</h2><p>关于MVVM，这里不做详细的讲解，不是本章的重点。但是可以给出几篇参考，有兴趣的同学可以去了解一下。</p>
<ul>
<li><a href="http://objccn.io/issue-13-1/" target="_blank" rel="external">MVVM 介绍</a></li>
<li><a href="http://www.infoq.com/cn/articles/rethinking-mvc-mvvm" target="_blank" rel="external">被误解的MVC和被神化的MVVM
</a></li>
</ul>
<h1 id="u6700_u540E"><a href="#u6700_u540E" class="headerlink" title="最后"></a>最后</h1><p>我尽管认真的学习了一周ReactiveCocoa，但是仍然还处在入门阶段，也许等我实战之后会有更多的体会和坑来告诉大家，但是这个是重框架，入门还是比较难的，我尽我所能的理解写下这个博客，希望能帮助大家入个门，同时我也给出几篇参考文章，希望对大家有帮助。</p>
<ul>
<li><a href="http://nshipster.cn/reactivecocoa/" target="_blank" rel="external">Reactive​Cocoa</a></li>
<li><a href="http://limboy.me/ios/2013/12/27/reactivecocoa-2.html" target="_blank" rel="external">说说ReactiveCocoa 2</a></li>
<li><a href="http://yulingtianxia.com/blog/2014/07/29/reactivecocoa/" target="_blank" rel="external">ReactiveCocoa学习笔记</a></li>
<li><a href="http://southpeak.github.io/blog/2014/08/02/reactivecocoazhi-nan-%5B%3F%5D-:xin-hao/" target="_blank" rel="external">ReactiveCocoa Tutorial – the Definitive Introduction: Part 1/2</a></li>
<li><a href="http://www.itiger.me/?p=38" target="_blank" rel="external">使用ReactiveCocoa实现iOS平台响应式编程</a></li>
<li><a href="http://blog.devtang.com/blog/2014/02/11/reactivecocoa-introduction/" target="_blank" rel="external">唐巧 ReactiveCocoa - iOS开发的新框架</a></li>
</ul>
<h1 id="u89C6_u9891"><a href="#u89C6_u9891" class="headerlink" title="视频"></a>视频</h1><iframe height="498" width="510" src="http://player.youku.com/embed/XMTQxOTIyOTQyMA==" frameborder="0" allowfullscreen></iframe>

<h1 id="update"><a href="#update" class="headerlink" title="update"></a>update</h1><ul>
<li>2015.12.22 上周六的时候，<a href="https://github.com/DeveloperLx" target="_blank" rel="external">DeveloperLx</a>讲了有关于ReactiveCocoa的很多干货，我写了一篇<a href="">博客</a>，大部分都是对他将的内容的整理和一点感悟。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>很久之前我就准备写有关于ReactiveCocoa的文章，前面林林总总写过几篇，但是都是简单的讲述，并没]]>
    </summary>
    
      <category term="Objective-C" scheme="http://yeziahehe.com/tags/Objective-C/"/>
    
      <category term="ReactiveCocoa" scheme="http://yeziahehe.com/tags/ReactiveCocoa/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Travis CI自动构建Hexo静态博客]]></title>
    <link href="http://yeziahehe.com/2015/12/13/use_Travis_CI_auto_build_Hexo_static_blog/"/>
    <id>http://yeziahehe.com/2015/12/13/use_Travis_CI_auto_build_Hexo_static_blog/</id>
    <published>2015-12-13T15:35:55.000Z</published>
    <updated>2015-12-21T14:26:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>随着现在open source越来越火，更多的人开始注重技术知识的获取。不可否认，目前的信息传播速度非常之快，渠道也非常之多，对于知识获取的整理和理解是很多人都在做的一件事情。在这种情况下更多的人开始选择写博客，把自己认知记录下来，一是为了检验自己对于技术的理解，二是为了让更多的人去从你的博客中获取到有用的信息。</p>
<p>我2014年的时候自己买了域名，用<code>jekyll + GitHub Pages</code>搭建了自己的博客（目前正在考虑换到Hexo，而Coryphaei技术博客就是采用的Hexo）。我同样也了搭建我们公司的<a href="http://blog.coryphaei.com/" target="_blank" rel="external">技术博客</a>，大家有兴趣可以访问，我的很多干货也将发表到那边。</p>
<h1 id="u6280_u672F"><a href="#u6280_u672F" class="headerlink" title="技术"></a>技术</h1><p>Coryphaei技术博客采用的是<code>Hexo + GitHub Pages + Travis CI</code>的技术方案，实现了多人同时更新博客并且自动化构建。</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>是一款高效、简洁的静态博客框架，目前整个项目都开源在<a href="https://github.com/hexojs/hexo" target="_blank" rel="external">GitHub</a>上。因为部署极其简单，而且不需要数据库的支持，纯静态的模式，使得目前静态博客被越来越多的选择。关注与文章本身，创造出更有价值的文章才是每个写博客的人的初衷。</p>
<p>Hexo是由<a href="nodejs.org">Node.js</a>完成，需要集成Node.js的开发环境，这里不再赘述。接下来开始集成Hexo的开发环境，因为我是OS X，所以一下所有的均是基于OS X环境的搭建教程。</p>
<p>首先，需要配置基本的环境。</p>
<h3 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h3><blockquote>
<p>注意：npm因为qiang的原因，经常会出问题，我换成了taobao的cmpn镜像，taobao的cnpm镜像这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>
</blockquote>
<p>安装方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>
<h3 id="Hexo_u57FA_u672C_u73AF_u5883"><a href="#Hexo_u57FA_u672C_u73AF_u5883" class="headerlink" title="Hexo基本环境"></a>Hexo基本环境</h3><p>Hexo基本环境的配置，步骤比较简单。</p>
<h4 id="u5B89_u88C5"><a href="#u5B89_u88C5" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure>
<p>启动本地的服务器看下是否安装成功<code>hexo s</code>，浏览器打开<code>http://localhost:4000</code>。</p>
<h4 id="u4E3B_u9898_Next"><a href="#u4E3B_u9898_Next" class="headerlink" title="主题 Next"></a>主题 Next</h4><p>我采用的是<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">Next</a>主题，这个主题是国人写的，因为其简洁的特点，深受大家的喜欢。Next有官方出的<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">使用说明</a>，大家有问题可以先去浏览使用说明。</p>
<p>安装非常简单<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
<p>启用 NexT 主题<br>克隆/下载 完成后，打开根目录下的_config.yml，找到<code>theme</code>字段，并将其值更改为<code>next</code>。<br>启动本地的服务器看下是否安装成功<code>hexo s</code>，浏览器打开<code>http://localhost:4000</code>。</p>
<h4 id="u57FA_u672C_u914D_u7F6E_u7684_u4E00_u4E9B_u4FEE_u6539"><a href="#u57FA_u672C_u914D_u7F6E_u7684_u4E00_u4E9B_u4FEE_u6539" class="headerlink" title="基本配置的一些修改"></a>基本配置的一些修改</h4><p>对于博客的基本配置的个性化定制，完全可以参照Next官方出的<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">使用说明</a>，我也附上我的 <a href="https://github.com/Coryphaei/coryphaei.github.io/blob/blog/_config.yml" target="_blank" rel="external">_config.yml</a> 和theme目录下的<a href="https://github.com/Coryphaei/coryphaei.github.io/blob/blog/themes/next/_config.yml" target="_blank" rel="external">themes/next/_config.yml</a>供大家参考。</p>
<p>到目前为止，整个Hexo的博客就搭建完毕。</p>
<h2 id="GitHub_Pages"><a href="#GitHub_Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p>有关于GitHub Pages的问题，网上教程太多，大家可以自行google，这边就不在赘述。</p>
<h2 id="Travis_CI"><a href="#Travis_CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>目前，自动化构建、持续集成的理念在整个计算行业非常的流行，大家更愿意去使用自动化代替手动，从而提高效率。</p>
<p><code>持续集成</code>的概念</p>
<blockquote>
<p>持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，每人每天可能集成一次，甚至多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。</p>
</blockquote>
<p>自动构建工具则是持续集成的一种出色实践。代码提交后，由软件自动完成代码的测试、构建，并将过程中状态与构建物产出才是持续集成的意义。</p>
<p><a href="https://travis-ci.org/" target="_blank" rel="external">Travis CI</a>就是一个在线的、分布式的持续集成服务，用来构建及测试在GitHub托管的代码。利用Travis CI 会在每一次push后生成一个虚拟机来执行事先安排好的自动构建任务，从来进行发布。</p>
<h3 id="u4E3A_u4EC0_u4E48_u4F7F_u7528"><a href="#u4E3A_u4EC0_u4E48_u4F7F_u7528" class="headerlink" title="为什么使用"></a>为什么使用</h3><p>Travis CI本身已经是很好的自动构建的工具，而这里使用的原因，本质上是因为Hexo本身并不能进行多人合作。Hexo的<code>hexo generate</code>和<code>hexo deploy</code>会自动渲染并提交到GitHub上，所以当你从别的电脑上clone的时候，clone下来的是渲染好的html的文章。就算我在两个电脑上同时搭建了环境，但是每次渲染的时候只会渲染本地的markdown文章，依然不能进行同步。有些人选择了使用百度云进行同步，每次写之前下载下来并覆盖，就能进行同步。不否认，这个方法对于一个人写博客，在工作和家的电脑还算是比较方便的，因为始终是一个人进行操作。而我们的博客是多人共同写的，所以说会存在各种冲突问题，于是想到了用Travis CI。</p>
<h3 id="u539F_u7406"><a href="#u539F_u7406" class="headerlink" title="原理"></a>原理</h3><p><img src="http://7xp57v.com1.z0.glb.clouddn.com/coryphaei/travis-hexo-flowing.png" alt="travis-hexo-flowing"></p>
<blockquote>
<p>图片引用自v2cc的<a href="http://v2cc.github.io/2015/09/02/unbelievable-workflow-autodeploy-hexo-by-travis/" target="_blank" rel="external">博客</a>，并且其对于流程的讲解也对我产生了很大的帮助，非常感谢。</p>
</blockquote>
<p>分析下思路：<br>前提：我们在之前博客搭建的repo下面，新建一个blog的分支，这个分支用来进行环境代码的备份，并且配置出<code>.travis.yml</code>进行自动化构建。</p>
<h4 id="User_-_push_-_26gt_3B_branch_blog"><a href="#User_-_push_-_26gt_3B_branch_blog" class="headerlink" title="User - push -&gt; branch blog"></a>User - push -&gt; branch blog</h4><p>将代码push到在GitHub上的博客中的blog分支。</p>
<h4 id="Dev_repo_-_sync_-_26gt_3B_Travis_CI"><a href="#Dev_repo_-_sync_-_26gt_3B_Travis_CI" class="headerlink" title="Dev repo - sync -&gt; Travis CI"></a>Dev repo - sync -&gt; Travis CI</h4><p>在branch blog中配置<code>.travis.yml</code>文件，在Travis CI中开启branch blog的同步开关，并启用<code>Build only if .travis.yml is present</code>项，这样能在repo中有多个branch时，让Travis CI只构建放置了<code>.travis.yml</code>文件的branch。</p>
<h4 id="Travis_CI_-_build_and_push_-_26gt_3B_Pages_repo"><a href="#Travis_CI_-_build_and_push_-_26gt_3B_Pages_repo" class="headerlink" title="Travis CI - build and push -&gt; Pages repo"></a>Travis CI - build and push -&gt; Pages repo</h4><p>Travis CI 的自动化构建完全依靠唯一的<code>.travis.yml</code>脚本文件。需要在此文件中添加构建环境、构建Hexo、生成博客及后续push到Pages repo的全部脚本。</p>
<h5 id="u751F_u6210SSH_Key"><a href="#u751F_u6210SSH_Key" class="headerlink" title="生成SSH Key"></a>生成SSH Key</h5><p>要做到Travis CI向Pages repo自动推送就必须用到Github SSH Key，这样做的目的是免去Hexo部署时候输入密码的步骤。生成SSH Key的操作参照GitHub的官网即可：<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">Github SSH Key</a>。</p>
<p>这样会得到<code>id_rsa.pub</code>和<code>id_rsa</code>两个秘钥，我们将<code>id_rsa.pub</code>添加到了github，下面要加密<code>id_rsa</code>这个私钥并且上传到Travis。</p>
<blockquote>
<p>注意：这个SSH key不应该是你账号的全局SSH Key，这样Travis CI就获得了你所有代码库的提交权限。仅仅只需要把SSH Key添加到当前repo的setting中的key下面即可。</p>
</blockquote>
<h5 id="Travis_CI__u73AF_u5883"><a href="#Travis_CI__u73AF_u5883" class="headerlink" title="Travis CI 环境"></a>Travis CI 环境</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cp ~/.ssh/id_rsa / <span class="comment">#将上一步得到的`id_rsa`复制到根目录下</span></span><br><span class="line">$ vim .travis.yml <span class="comment">#创建.travis.yml</span></span><br><span class="line">$ gem install travis <span class="comment">#安装Travis CI</span></span><br><span class="line">$ travis login --auto <span class="comment">#登录Travis CI，需要输入GitHub的账号密码</span></span><br><span class="line">$ travis encrypt-file ssh_key --add <span class="comment">#加密私钥并上传至Travis</span></span><br></pre></td></tr></table></figure>
<p>生成加密过得新秘钥<code>id_rsa.enc</code>, 并自动将branch blog中git的信息及解密秘钥的相关信息添加到<code>.travis.yml</code>中。然后手动删除私钥文件<code>id_rsa</code>， 以保证代码仓库的安全。</p>
<h5 id="SSH_u7684_u8BBE_u7F6E"><a href="#SSH_u7684_u8BBE_u7F6E" class="headerlink" title="SSH的设置"></a>SSH的设置</h5><p>在当前目录下新建文件<code>ssh_config</code>，内容为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  User git</span><br><span class="line">  StrictHostKeyChecking no</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure></p>
<p>修改<code>.travis.yml</code>中的命令，指定openssl解密后的生成位置，xxxxxxxxxx部分就是你的解密参数，不要去改动它。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- openssl aes-<span class="number">256</span>-cbc -K <span class="variable">$encrypted_xxxxxxxxxx_key</span> -iv <span class="variable">$encrypted_xxxxxxxxxx_iv</span></span><br><span class="line">  -in travis.enc -out ~/.ssh/id_rsa <span class="operator">-d</span></span><br></pre></td></tr></table></figure></p>
<h5 id="u4FEE_u6539_u76EE_u5F55_u6743_u9650"><a href="#u4FEE_u6539_u76EE_u5F55_u6743_u9650" class="headerlink" title="修改目录权限"></a>修改目录权限</h5><p>紧接着在<code>.travis.yml</code>中修改目录权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- chmod <span class="number">600</span> ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>
<h5 id="u5C06_u5BC6_u94A5_u52A0_u5165_u7CFB_u7EDF"><a href="#u5C06_u5BC6_u94A5_u52A0_u5165_u7CFB_u7EDF" class="headerlink" title="将密钥加入系统"></a>将密钥加入系统</h5><p>紧接着在<code>.travis.yml</code>中将密钥加入系统<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">eval</span> $(ssh-agent)</span><br><span class="line">- ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>
<h5 id="u4FEE_u6539git_u4FE1_u606F"><a href="#u4FEE_u6539git_u4FE1_u606F" class="headerlink" title="修改git信息"></a>修改git信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- cp ssh_config ~/.ssh/config</span><br><span class="line">- git config --global user.name <span class="string">"username"</span></span><br><span class="line">- git config --global user.email username@example.com</span><br></pre></td></tr></table></figure>
<h5 id="u6DFB_u52A0_u5206_u652F_u4FE1_u606F"><a href="#u6DFB_u52A0_u5206_u652F_u4FE1_u606F" class="headerlink" title="添加分支信息"></a>添加分支信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - blog</span><br></pre></td></tr></table></figure>
<h5 id="u914D_u7F6EHexo"><a href="#u914D_u7F6EHexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">install:</span><br><span class="line">- npm install hexo-cli -g</span><br><span class="line">- npm install hexo --save</span><br><span class="line">- npm install</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo d</span><br><span class="line">- hexo g</span><br></pre></td></tr></table></figure>
<p>这样就完成了<code>.travis.yml</code>的设置，这里是我的源文件<a href="https://github.com/Coryphaei/coryphaei.github.io/blob/blog/.travis.yml" target="_blank" rel="external">.travis.yml</a>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- <span class="string">'0.12'</span></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">  - blog</span><br><span class="line">before_install:</span><br><span class="line">- openssl aes-<span class="number">256</span>-cbc -K <span class="variable">$encrypted_b83a281ef741_key</span> -iv <span class="variable">$encrypted_b83a281ef741_iv</span></span><br><span class="line">  -in id_rsa.enc -out ~/.ssh/id_rsa <span class="operator">-d</span></span><br><span class="line">- chmod <span class="number">600</span> ~/.ssh/id_rsa</span><br><span class="line">- <span class="built_in">eval</span> $(ssh-agent)</span><br><span class="line">- ssh-add ~/.ssh/id_rsa</span><br><span class="line">- cp ssh_config ~/.ssh/config</span><br><span class="line">- git config --global user.name <span class="string">"叶帆"</span></span><br><span class="line">- git config --global user.email yeziahehe@gmail.com</span><br><span class="line">- git <span class="built_in">clone</span> -b master git@github.com:Coryphaei/coryphaei.github.io.git .deploy_git</span><br><span class="line">install:</span><br><span class="line">- npm install hexo-cli -g</span><br><span class="line">- npm install</span><br><span class="line">- npm install hexo-generator-feed --save</span><br><span class="line">- npm install hexo-deployer-git --save</span><br><span class="line">script:</span><br><span class="line">- hexo clean</span><br><span class="line">- hexo g</span><br><span class="line">- hexo g</span><br><span class="line">- hexo d</span><br></pre></td></tr></table></figure>
<p>这个时候应该将其push到blog分支。</p>
<blockquote>
<p>注意，要删除themes/next/.git文件，否则会导致主题传不上去，渲染后首页空白的问题。</p>
</blockquote>
<h4 id="View_the_pages"><a href="#View_the_pages" class="headerlink" title="View the pages"></a>View the pages</h4><p>打开首页，就能看到已经发布的最新博客。</p>
<h1 id="u95EE_u9898"><a href="#u95EE_u9898" class="headerlink" title="问题"></a>问题</h1><p>上述的所有步骤完成后，应该就已经成功了。我这边列举下我遇到的一些问题，希望能帮到大家。大家有任何问题也可以直接评论，我会第一时间回复。</p>
<ul>
<li><p><code>.travis.yml</code>中的注释问题<br><img src="http://7xp57v.com1.z0.glb.clouddn.com/coryphaei/travis_yml_comment.png" alt="travis_yml_comment"><br>一开始的时候我在<code>.travis.yml</code>中的注释用的是<code>//</code>，结果一直导致<code>missing config</code>。后来才知道YAML中注释应该用<code>#</code>。</p>
</li>
<li><p>首页无内容<br>一开始的时候我的首页一片空白，index.html中也是空的，原因就是因为主题Next是从GitHub上clone下来的，里面会存在<code>.git</code>文件，所以push到blog分支的时候千万要注意删除掉next文件夹中的<code>.git</code>文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog/themes/next <span class="comment">#到next主题文件夹下</span></span><br><span class="line">ls <span class="operator">-a</span> <span class="comment">#显示所有文件</span></span><br><span class="line">rm .git <span class="comment">#删除.git文件</span></span><br><span class="line">ls <span class="operator">-a</span> <span class="comment">#确认删除</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>next主题会导致首页只显示最新的文章<br>很多人遇到发布后首页只显示最新的一篇文章，next主题<a href="https://github.com/iissnan/hexo-theme-next/issues/535" target="_blank" rel="external">issue</a>中也有提到这个。</p>
</li>
</ul>
<p>解决办法就是<code>hexo g</code>命令做两遍，这个也是为什么我<code>.travis.yml</code>中的Hexo配置命令写了两遍的原因。被这个问题纠缠了很久，希望写出来能帮到大家，如果你没有问题就不需要在<code>.travis.yml</code>中写两遍命令。</p>
<h1 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h1><p>这个是我搭建这个博客写的第一篇文章，我也发现我这次解决问题回去弄个明白，回想之前写的博客，其实干货真的很少，知识也很肤浅，这次搭建博客-发现问题-解决问题给了我很好的体验，也让我学到了很多，我会尽可能的去写很多的干货去和大家分享！共勉！</p>
<p><strong>—- EOF —-</strong><br><strong>如无特殊说明，文章均为原创，转载需标明作者并与我联系。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>随着现在open source越来越火，更多的人开始注重技术知识的获取。不可否认，目前的信息传播速度非常]]>
    </summary>
    
      <category term="Travis CI" scheme="http://yeziahehe.com/tags/Travis-CI/"/>
    
      <category term="hexo" scheme="http://yeziahehe.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://yeziahehe.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客迁移]]></title>
    <link href="http://yeziahehe.com/2015/12/12/blog_trasfer/"/>
    <id>http://yeziahehe.com/2015/12/12/blog_trasfer/</id>
    <published>2015-12-12T15:45:56.000Z</published>
    <updated>2015-12-16T16:14:51.000Z</updated>
    <content type="html"><![CDATA[<h1 id="u7F18_u7531"><a href="#u7F18_u7531" class="headerlink" title="缘由"></a>缘由</h1><p>最近开始搭建公司的<a href="http://blog.coryphaei.com" target="_blank" rel="external">博客</a>，了解到了<a href="http://hexo.io" target="_blank" rel="external">Hexo</a>，一款非常优雅的静态博客。我之前的博客就是使用<code>jekyll</code>静态博客，但是jekyll的theme实在是不和我的胃口，自己也没有好好经营，再加上自己做了修改后Bug百出，所以催生了我转向Hexo的阵营。</p>
<h1 id="u5173_u4E8E_u535A_u5BA2"><a href="#u5173_u4E8E_u535A_u5BA2" class="headerlink" title="关于博客"></a>关于博客</h1><p>最近搭建完了公司的博客后，突然开始注重博客的质量，几个小伙伴一起写难免会认真起来。我花了很久写了<a href="http://yeziahehe.com/2015/12/13/2015-12-13-%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAHexo%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/">使用Travis CI自动构建Hexo静态博客</a>这篇博客，当我写完的时候我意识到这次写博客我确实参与其中，把这一系列的问题都搞得很透彻。在GitHub的Hexo和hexo-theme-next中提了issue，把可能出现的问题都发现了一遍，也都解决了一遍，这下我可以完全打包票，下次搭建Hexo的博客肯定能够兵来将挡，水来土掩。我很享受这个过程，也意识到写出好的博客才能体现博客的价值，否则就是在浪费时间。</p>
<h1 id="u53CD_u601D"><a href="#u53CD_u601D" class="headerlink" title="反思"></a>反思</h1><p>在这次博客的迁移和公司博客的搭建中，我清楚认识到几个问题：</p>
<ul>
<li>博客的质量很重要<br>博客首先的根本目的是解决问题，检验解决问题最关键就是你能不能把解决问题的过程说清楚。所以说博客的质量就反应了你对于问题的理解程度，我现在认识到一篇好的博客，一篇完整的博客可以给正在问题的人带来太多解惑的可能，也帮他们大量的节约了时间。</li>
<li>多思考，少而精<br>我以前写博客，也是从一个问题出发。但是以前我并没有去弄懂问题的原理，而是去参考别人的博客，采用了一种<code>很好的方式--堆砌</code>。然而写出的文章，没有灵魂，别人也不能从你的文章获取到一点有用的信息，都是老生常谈，并不是实践出真知的产物。我感触很深的是这次Hexo+Travis CI搭建的时候遇到了很多问题，但是我花了两个晚上持之以恒的在解决这些问题，一直在思考问题，然后用了一个下午的时间在图书馆把文章整理出来了。我收获很大，我觉得我顿悟了学习的本质。</li>
</ul>
<h1 id="u4EE5_u540E"><a href="#u4EE5_u540E" class="headerlink" title="以后"></a>以后</h1><p>这篇博客的是个分水岭，新的主题，也是新的开始。<br>之前的博客，我都不准备删掉，我觉得那个青涩的年纪写下的没有太多参考价值的文章，但是它却是我成长的见证。<br>从这篇博客以后，我肯定尽可能的去写有质量的文章，我希望自己能够做到，也欢迎大家监督。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u7F18_u7531"><a href="#u7F18_u7531" class="headerlink" title="缘由"></a>缘由</h1><p>最近开始搭建公司的<a href="http://blog.coryphaei.com" target=]]>
    </summary>
    
      <category term="随想" scheme="http://yeziahehe.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="blog" scheme="http://yeziahehe.com/categories/blog/"/>
    
      <category term="随想" scheme="http://yeziahehe.com/categories/blog/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS面试题整理]]></title>
    <link href="http://yeziahehe.com/2015/11/06/iOS_interview_arrange/"/>
    <id>http://yeziahehe.com/2015/11/06/iOS_interview_arrange/</id>
    <published>2015-11-06T15:34:44.000Z</published>
    <updated>2015-12-16T15:35:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="iOS_u9762_u8BD5_u9898_u6574_u7406"><a href="#iOS_u9762_u8BD5_u9898_u6574_u7406" class="headerlink" title="iOS面试题整理"></a>iOS面试题整理</h3><h4 id="1-__u98CE_u683C_u7EA0_u9519_u9898"><a href="#1-__u98CE_u683C_u7EA0_u9519_u9898" class="headerlink" title="1. 风格纠错题"></a>1. 风格纠错题</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span>&#123;</span><br><span class="line">    UserSex_Man,</span><br><span class="line">    UserSex_Woman</span><br><span class="line">&#125;UserSex;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UserModel</span> :<span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) UserSex sex;</span><br><span class="line"></span><br><span class="line">-(<span class="keyword">id</span>)initUserModelWithUserName: (<span class="built_in">NSString</span> *)name withAge:(<span class="keyword">int</span>)age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)doLogIn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>修改完的代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// .h文件</span></span><br><span class="line"><span class="comment">// http://weibo.com/luohanchenyilong/</span></span><br><span class="line"><span class="comment">// https://github.com/ChenYilong</span></span><br><span class="line"><span class="comment">// 修改完的代码，这是第一种修改方法，后面会给出第二种修改方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, CYLSex) &#123;</span><br><span class="line">    CYLSexMan,</span><br><span class="line">    CYLSexWoman</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CYLUser</span> : <span class="title">NSObject</span>&lt;<span class="title">NSCopying</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">assign</span>) CYLSex sex;</span><br><span class="line"></span><br><span class="line">- (instancetype)initWithName:(<span class="built_in">NSString</span> *)name age:(<span class="built_in">NSUInteger</span>)age sex:(CYLSex)sex;</span><br><span class="line">+ (instancetype)userWithName:(<span class="built_in">NSString</span> *)name age:(<span class="built_in">NSUInteger</span>)age sex:(CYLSex)sex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>[※]@property中有哪些属性关键字？</li>
</ul>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.sunnyxx.com/2015/07/04/ios-interview/" target="_blank" rel="external">招聘一个靠谱的 iOS </a></p>
<p><a href="https://github.com/ChenYilong/iOSInterviewQuestions" target="_blank" rel="external">iOSInterviewQuestions</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="iOS_u9762_u8BD5_u9898_u6574_u7406"><a href="#iOS_u9762_u8BD5_u9898_u6574_u7406" class="headerlink" title="iOS面试题整理"></a>iOS面试题整理</h3]]>
    </summary>
    
      <category term="iOS，面试题" scheme="http://yeziahehe.com/tags/iOS%EF%BC%8C%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自定义库封装思路和Cocoapods发布]]></title>
    <link href="http://yeziahehe.com/2015/10/22/own_framework_and_Cocoapods_release/"/>
    <id>http://yeziahehe.com/2015/10/22/own_framework_and_Cocoapods_release/</id>
    <published>2015-10-22T15:32:23.000Z</published>
    <updated>2015-12-16T15:34:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h2><p>近期自己封装了iOS客户端启动页的自定义库，在封装的过程中学习了很多，包括封装的思想以及Cocoapods发布。</p>
<h2 id="u539F_u56E0"><a href="#u539F_u56E0" class="headerlink" title="原因"></a>原因</h2><p>首先是因为千篇一律的使用图片进行启动页，在用户体验上确实引起了审美疲劳，然后是收到了Coding的启发，于是准备进行启动页的封装。</p>
<p>PS：不会设计的程序员不是好程序员！</p>
<h2 id="YFStartView"><a href="#YFStartView" class="headerlink" title="YFStartView"></a>YFStartView</h2><p>目前<a href="https://github.com/yeziahehe/YFStartView" target="_blank" rel="external">YFStartView</a>已经开源，效果图如下。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/github/YFStartViewbuttom.gif" alt="效果图1"></p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/github/YFStartViewcenter.gif" alt="效果图2"></p>
<p>几点说明：</p>
<ul>
<li><p>尽量不要使用三方库（后来发现Cocoapods中有的库是可以的，因为发布到Cocoapods可以添加依赖，那么就不存在问题），因为手动添加了三方库，可能导致重复添加。</p>
</li>
<li><p>尽可能的暴露出属性，让用户去选择使用的属性。</p>
</li>
</ul>
<h2 id="u4F7F_u7528Cocoapods"><a href="#u4F7F_u7528Cocoapods" class="headerlink" title="使用Cocoapods"></a>使用Cocoapods</h2><p>初始化一个Podspec文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create YFStartView</span><br></pre></td></tr></table></figure>
<p>要像github仓库中添加.podspec文件，代码内容如下</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  Be sure to run `pod spec lint YFStartView.podspec' to ensure this is a</span></span><br><span class="line"><span class="comment">#  valid spec and to remove all comments including this before submitting the spec.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  To learn more about Podspec attributes see http://docs.cocoapods.org/specification.html</span></span><br><span class="line"><span class="comment">#  To see working Podspecs in the CocoaPods repo see https://github.com/CocoaPods/Specs/</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Pod::Spec</span>.new <span class="keyword">do</span> |s|</span><br><span class="line"></span><br><span class="line">  <span class="comment"># ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  These will help people to find your library, and whilst it</span></span><br><span class="line">  <span class="comment">#  can feel like a chore to fill in it's definitely to your advantage. The</span></span><br><span class="line">  <span class="comment">#  summary should be tweet-length, and the description more in depth.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  s.name         = <span class="string">"YFStartView"</span></span><br><span class="line">  s.version      = <span class="string">"0.0.1"</span></span><br><span class="line">  s.summary      = <span class="string">"YFStartView is an custom view for start image."</span></span><br><span class="line"></span><br><span class="line">  s.homepage     = <span class="string">"https://github.com/yeziahehe/YFStartView"</span></span><br><span class="line">  <span class="comment"># s.screenshots  = "www.example.com/screenshots_1.gif", "www.example.com/screenshots_2.gif"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ―――  Spec License  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  Licensing your code is important. See http://choosealicense.com for more info.</span></span><br><span class="line">  <span class="comment">#  CocoaPods will detect a license file if there is a named LICENSE*</span></span><br><span class="line">  <span class="comment">#  Popular ones are 'MIT', 'BSD' and 'Apache License, Version 2.0'.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  s.license      = <span class="string">"MIT"</span></span><br><span class="line">  <span class="comment"># s.license      = &#123; :type =&gt; "MIT", :file =&gt; "FILE_LICENSE" &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Author Metadata  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  Specify the authors of the library, with email addresses. Email addresses</span></span><br><span class="line">  <span class="comment">#  of the authors are extracted from the SCM log. E.g. $ git log. CocoaPods also</span></span><br><span class="line">  <span class="comment">#  accepts just a name if you'd rather not provide an email address.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  Specify a social_media_url where others can refer to, for example a twitter</span></span><br><span class="line">  <span class="comment">#  profile URL.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  s.author             = &#123; <span class="string">"Ivan"</span> =&gt; <span class="string">"yeziahehe@gmail.com"</span> &#125;</span><br><span class="line">  <span class="comment"># Or just: s.author    = "Ivan"</span></span><br><span class="line">  <span class="comment"># s.authors            = &#123; "Ivan" =&gt; "yeziahehe<span class="doctag">@gmail</span>.com" &#125;</span></span><br><span class="line">  <span class="comment"># s.social_media_url   = "http://twitter.com/Ivan"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Platform Specifics ――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  If this Pod runs only on iOS or OS X, then specify the platform and</span></span><br><span class="line">  <span class="comment">#  the deployment target. You can optionally include the target after the platform.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.platform     = :ios</span></span><br><span class="line">  s.platform     = <span class="symbol">:ios</span>, <span class="string">"8.0"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#  When using multiple platforms</span></span><br><span class="line">  <span class="comment"># s.ios.deployment_target = "5.0"</span></span><br><span class="line">  <span class="comment"># s.osx.deployment_target = "10.7"</span></span><br><span class="line">  <span class="comment"># s.watchos.deployment_target = "2.0"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  Specify the location from where the source should be retrieved.</span></span><br><span class="line">  <span class="comment">#  Supports git, hg, bzr, svn and HTTP.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  s.source       = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"https://github.com/yeziahehe/YFStartView.git"</span>, <span class="symbol">:tag</span> =&gt; <span class="string">"0.0.1"</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Source Code ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  CocoaPods is smart about how it includes source code. For source files</span></span><br><span class="line">  <span class="comment">#  giving a folder will include any swift, h, m, mm, c &amp; cpp files.</span></span><br><span class="line">  <span class="comment">#  For header files it will include any header in the folder.</span></span><br><span class="line">  <span class="comment">#  Not including the public_header_files will make all headers public.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  s.source_files  = <span class="string">"YFStartView/*.&#123;h,m&#125;"</span></span><br><span class="line">  <span class="comment"># s.exclude_files = "Classes/Exclude"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.public_header_files = "Classes/**/*.h"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Resources ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  A list of resources included with the Pod. These are copied into the</span></span><br><span class="line">  <span class="comment">#  target bundle with a build phase script. Anything else will be cleaned.</span></span><br><span class="line">  <span class="comment">#  You can preserve files from being cleaned, please don't preserve</span></span><br><span class="line">  <span class="comment">#  non-essential files like tests, examples and documentation.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.resource  = "icon.png"</span></span><br><span class="line">  <span class="comment"># s.resources = "Resources/*.png"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.preserve_paths = "YFStartViewDemo"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Project Linking ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  Link your library with frameworks, or libraries. Libraries do not include</span></span><br><span class="line">  <span class="comment">#  the lib prefix of their name.</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.framework  = "SomeFramework"</span></span><br><span class="line">  <span class="comment"># s.frameworks = "SomeFramework", "AnotherFramework"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.library   = "iconv"</span></span><br><span class="line">  <span class="comment"># s.libraries = "iconv", "xml2"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># ――― Project Settings ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line">  <span class="comment">#  If your library depends on compiler flags you can set them in the xcconfig hash</span></span><br><span class="line">  <span class="comment">#  where they will only apply to your library. If you depend on other Podspecs</span></span><br><span class="line">  <span class="comment">#  you can include multiple dependencies to ensure it works.</span></span><br><span class="line"></span><br><span class="line">  s.requires_arc = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># s.xcconfig = &#123; "HEADER_SEARCH_PATHS" =&gt; "$(SDKROOT)/usr/include/libxml2" &#125;</span></span><br><span class="line">  <span class="comment"># s.dependency "JSONKit", "~&gt; 1.4"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="string">``</span></span><br><span class="line"></span><br><span class="line">接着要注意版本号的问题</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`bash</span><br><span class="line">  git tag -a 0.0.1 -m "Tag release 0.0.1"</span><br><span class="line">  git push —tags</span><br><span class="line">  git add YFStartView.podspec</span><br><span class="line">  git commit -m "add YFStartView.podspec file"</span><br><span class="line">  git push origin master</span></span><br></pre></td></tr></table></figure>
<p>接下来很多教程里面写的fork，目前的话Cocoapods已经不支持pull request，改为trunk服务。</p>
<p><img src="http://7xkvt5.com1.z0.glb.clouddn.com/github/YFStartViewcocoapods.jpg" alt="Cocoapods"></p>
<p>更新了用trunk之后，CocoaPods 需要0.33版本以上的，用 pod –version 查看，如果版本低，需要更新。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register yeziahehe@gmail.com <span class="string">'yeziahehe'</span>  --verbose</span><br></pre></td></tr></table></figure>
<p>接下来会收到一封邮件进行验证。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>
<p>会显示如下信息。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- Name:     yeziahehe</span><br><span class="line">- Email:    yeziahehe@gmail.com</span><br><span class="line">- Since:    October <span class="number">21</span>st, <span class="number">02</span>:<span class="number">55</span></span><br><span class="line">- Pods:     None</span><br><span class="line">- Sessions:</span><br><span class="line">- October <span class="number">21</span>st, <span class="number">02</span>:<span class="number">55</span> - February <span class="number">26</span>th, <span class="number">2016</span> <span class="number">02</span>:<span class="number">57</span>. IP:<span class="number">202.195</span>.<span class="number">129.246</span></span><br></pre></td></tr></table></figure>
<p>接下来进行提交</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push YFStartView.podspec</span><br></pre></td></tr></table></figure>
<p>大功告成，搜索一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search YFStartView</span><br></pre></td></tr></table></figure>
<p>已经发布成功！</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-&gt; YFStartView (<span class="number">0.0</span>.<span class="number">1</span>)</span><br><span class="line">   YFStartView is an custom view <span class="keyword">for</span> start image.</span><br><span class="line">   pod <span class="string">'YFStartView'</span>, <span class="string">'~&gt; 0.0.1'</span></span><br><span class="line">   - Homepage: https://github.com/yeziahehe/YFStartView</span><br><span class="line">   - Source:   https://github.com/yeziahehe/YFStartView.git</span><br><span class="line">   - Versions: <span class="number">0.0</span>.<span class="number">1</span> [master repo]</span><br></pre></td></tr></table></figure>
<h2 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h2><p><a href="http://iiiyu.com/2013/03/01/learning-ios-notes-sixteen/" target="_blank" rel="external">配置自己的CocoaPods库</a></p>
<p><a href="http://iiiyu.com/2013/12/19/learning-ios-notes-thirty-one/" target="_blank" rel="external">CocoaPods 手把手五分钟教你制作自己的podspec文件</a></p>
<p><a href="http://www.cnblogs.com/wengzilin/p/4742530.html" target="_blank" rel="external">iOS：手把手教你发布代码到CocoaPods(Trunk方式)</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h2><p>近期自己封装了iOS客户端启动页的自定义库，在封]]>
    </summary>
    
      <category term="iOS，Cocoapods" scheme="http://yeziahehe.com/tags/iOS%EF%BC%8CCocoapods/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Block学习]]></title>
    <link href="http://yeziahehe.com/2015/10/10/Block_learning/"/>
    <id>http://yeziahehe.com/2015/10/10/Block_learning/</id>
    <published>2015-10-10T15:31:24.000Z</published>
    <updated>2015-12-16T15:32:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h3><p>首先对大家的Block进行下测试，这边有<a href="http://blog.parse.com/learn/engineering/objective-c-blocks-quiz/" target="_blank" rel="external">5道题</a>。</p>
<h3 id="u4ECB_u7ECD"><a href="#u4ECB_u7ECD" class="headerlink" title="介绍"></a>介绍</h3><p>Block是Objective-C对于闭包的实现，有关闭包，我正在想一个通俗的方式给大家定义下。</p>
<blockquote>
<p>闭包：函数中的函数。</p>
</blockquote>
<h3 id="Block_u7684_u57FA_u672C_u7406_u89E3"><a href="#Block_u7684_u57FA_u672C_u7406_u89E3" class="headerlink" title="Block的基本理解"></a>Block的基本理解</h3><p>Block的两种使用方式：</p>
<ol>
<li>Block变量，这种就是相当于内联函数，很简单。</li>
<li>Block函数，这个就是Block强大的地方，block外的变量可以无缝地直接在block内部使用。</li>
</ol>
<p>Block在使用时是可以调用外部变量的，Block将使用到的、作用域附近到的变量的值建立一份快照拷贝到栈上。而在ARC下就可能会出现循环引用的情况，我们等下来讲。</p>
<h3 id="Block_u7684_u5185_u5B58_u7BA1_u7406"><a href="#Block_u7684_u5185_u5B58_u7BA1_u7406" class="headerlink" title="Block的内存管理"></a>Block的内存管理</h3><p>在 Objective-C 语言中，一共有 3 种类型的 block：</p>
<ol>
<li><p>NSConcreteGlobalBlock 全局的静态 block，不会访问任何外部变量。</p>
</li>
<li><p>NSConcreteStackBlock 保存在栈中的 block，当函数返回时会被销毁。</p>
</li>
<li><p>NSConcreteMallocBlock 保存在堆中的 block，当引用计数为 0 时会被销毁。</p>
</li>
</ol>
<blockquote>
<p>在ARC下，不使用第二种内存管理方式，所有的外部变量使用时都是第三种方式。</p>
</blockquote>
<h3 id="u5FAA_u73AF_u5F15_u7528_u7684_u95EE_u9898"><a href="#u5FAA_u73AF_u5F15_u7528_u7684_u95EE_u9898" class="headerlink" title="循环引用的问题"></a>循环引用的问题</h3><p><em>循环引用</em> （retain cycle）问题的根源在于ARC中Block和obj可能会互相强引用，互相retain对方，这样就导致了retain cycle，无法释放，造成内存泄露。</p>
<p>首先看下面的代码<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="built_in">NSObject</span>* _instanceObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSObject</span>* __globalObj = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>) init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _instanceObj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) test &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSObject</span>* __staticObj = <span class="literal">nil</span>;</span><br><span class="line">    __globalObj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    __staticObj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSObject</span>* localObj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    __block <span class="built_in">NSObject</span>* blockObj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">void</span> (^MyBlock)(<span class="keyword">void</span>) ;</span><br><span class="line">    MyBlock aBlock = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, __globalObj);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, __staticObj);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, _instanceObj);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, localObj);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, blockObj);</span><br><span class="line">    &#125;;</span><br><span class="line">    aBlock = [[aBlock <span class="keyword">copy</span>] autorelease];</span><br><span class="line">    aBlock();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [__globalObj retainCount]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [__staticObj retainCount]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [_instanceObj retainCount]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [localObj retainCount]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%d"</span>, [blockObj retainCount]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        MyClass* obj = [[[MyClass alloc] init] autorelease];</span><br><span class="line">        [obj test];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果为 <code>1 1 1 2 1</code></p>
<p>localObj在Block copy时，系统自动retain对象，增加其引用计数。</p>
<ul>
<li>非ObjC对象，如GCD队列dispatch_queue_t。Block copy时并不会自动增加他的引用计数 *</li>
</ul>
<h3 id="u89E3_u51B3_u529E_u6CD5_u4F7F_u7528_u5F31_u5F15_u7528__weak"><a href="#u89E3_u51B3_u529E_u6CD5_u4F7F_u7528_u5F31_u5F15_u7528__weak" class="headerlink" title="解决办法使用弱引用 _weak"></a>解决办法使用弱引用 _weak</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ClassA* objA = [[[ClassA alloc] init] autorelease];</span><br><span class="line"></span><br><span class="line">MyClass* weakSelf = <span class="keyword">self</span>;</span><br><span class="line">objA<span class="variable">.myBlock</span> = ^&#123;</span><br><span class="line">  [weakSelf doSomething];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">self</span><span class="variable">.objA</span> = objA;</span><br></pre></td></tr></table></figure>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/" target="_blank" rel="external">谈Objective-C Block的实现</a><br><a href="http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/" target="_blank" rel="external">正确使用Block避免Cycle Retain和Crash</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h3><p>首先对大家的Block进行下测试，这边有<a h]]>
    </summary>
    
      <category term="Block" scheme="http://yeziahehe.com/tags/Block/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[fork项目同步更新]]></title>
    <link href="http://yeziahehe.com/2015/10/06/fork_project_sync_update/"/>
    <id>http://yeziahehe.com/2015/10/06/fork_project_sync_update/</id>
    <published>2015-10-06T15:30:29.000Z</published>
    <updated>2015-12-16T15:30:50.000Z</updated>
    <content type="html"><![CDATA[<p>对Coding客户端进行Fork后做了注释和源码解析，<a href="https://coding.net/u/yefan/p/Coding-iOS/git" target="_blank" rel="external">Fork地址</a>。</p>
<h3 id="Fork__u540C_u6B65_u66F4_u65B0"><a href="#Fork__u540C_u6B65_u66F4_u65B0" class="headerlink" title="Fork 同步更新"></a>Fork 同步更新</h3><p>在对Coding代码学习的同时需要同步更新Coding的代码，方法如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/coryphaei_code/Coding-iOS</span><br><span class="line">$ git remote add upstream git@git.coding.net:coding/Coding-iOS.git</span><br><span class="line">$ git fetch upstream</span><br><span class="line"></span><br><span class="line">$ git pull</span><br><span class="line">$ git merge upstream/master master</span><br><span class="line"></span><br><span class="line">$ git rebase upstream/master</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>对Coding客户端进行Fork后做了注释和源码解析，<a href="https://coding.net/u/yefan/p/Coding-iOS/git" target="_blank" rel="external">Fork地址</a>。</p>
<h3 id="F]]>
    </summary>
    
      <category term="Coding源码" scheme="http://yeziahehe.com/tags/Coding%E6%BA%90%E7%A0%81/"/>
    
      <category term="git" scheme="http://yeziahehe.com/tags/git/"/>
    
      <category term="git" scheme="http://yeziahehe.com/categories/git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Coding iOS客户端学习--AppDelegate(持续更新，有关Core Data的内容未来更新)]]></title>
    <link href="http://yeziahehe.com/2015/10/06/Coding_iOS_client_learning--AppDelegate(update)/"/>
    <id>http://yeziahehe.com/2015/10/06/Coding_iOS_client_learning--AppDelegate(update)/</id>
    <published>2015-10-06T15:28:44.000Z</published>
    <updated>2015-12-16T15:29:48.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h3><p><a href="https://coding.net/u/coding/p/Coding-iOS/git" target="_blank" rel="external">Coding客户端</a></p>
<h3 id="AppDelegate"><a href="#AppDelegate" class="headerlink" title="AppDelegate"></a>AppDelegate</h3><ul>
<li>AppDelegate.h</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  AppDelegate.h</span></span><br><span class="line"><span class="comment">//  Coding_iOS</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 王 原闯 on 14-7-29.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Coding. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span> : <span class="title">UIResponder</span> &lt;<span class="title">UIApplicationDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIWindow</span> *window;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  Core Data</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSManagedObjectContext</span> *managedObjectContext;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSManagedObjectModel</span> *managedObjectModel;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSPersistentStoreCoordinator</span> *persistentStoreCoordinator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  存储Core Data中的managedObjectContext</span><br><span class="line">            一旦出现managedObjectContext change或者error</span><br><span class="line">            则使用abort()函数[abort()代码层面进行APP的终止，在开发时用于测试使用，线上程序不使用，回引起崩溃]</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)saveContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  Core Data中To access the Documents directory of your applications sandbox</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">NSURL</span> *)applicationDocumentsDirectory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  根据不同的情况设置TabBar主框架，登录界面，引导页为RootViewController</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)setupTabViewController;</span><br><span class="line">- (<span class="keyword">void</span>)setupLoginViewController;</span><br><span class="line">- (<span class="keyword">void</span>)setupIntroductionViewController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  注册推送</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)registerPush;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>AppDelegate.m</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  AppDelegate.m</span></span><br><span class="line"><span class="comment">//  Coding_iOS</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by 王 原闯 on 14-7-29.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Coding. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#define UMSYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v) ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</span></span><br><span class="line"><span class="preprocessor">#define _IPHONE80_ 80000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AppDelegate.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"RootTabViewController.h"</span>               //通用 TabBarViewController</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"LoginViewController.h"</span>                 //登录 VC</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AFNetworking.h"</span>                        //网络库</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"AFNetworkActivityIndicatorManager.h"</span>   //网络小菊花</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"Login.h"</span>                               //Login Model</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"UnReadManager.h"</span>                       //未读消息 Model，同时更新应用角标</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"XGPush.h"</span>                              //信鸽推送</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"EaseStartView.h"</span>                       //启动图</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"BaseNavigationController.h"</span>            //通用 NavigationController</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"PasswordViewController.h"</span>              //用户激活或者密码 VC</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"IntroductionViewController.h"</span>          //引导 VC</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"FunctionIntroManager.h"</span>                //引导 Model</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UMengSocial/UMSocial.h&gt;</span>                //友盟统计分析组件</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UMengSocial/UMSocialWechatHandler.h&gt;</span>   //友盟WeChat分享组件</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;UMengSocial/UMSocialQQHandler.h&gt;</span>       //友盟QQ分享组件</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;evernote-cloud-sdk-ios/ENSDK/ENSDK.h&gt;</span>  //印象笔记SDK</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"UMSocialSinaSSOHandler.h"</span>              //友盟Sina分享组件</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#import <span class="title">"Tweet.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"sys/utsname.h"</span>                         //Apple提供的获取设备硬件版本和系统版本</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AppDelegate</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> managedObjectContext = _managedObjectContext;</span><br><span class="line"><span class="keyword">@synthesize</span> managedObjectModel = _managedObjectModel;</span><br><span class="line"><span class="keyword">@synthesize</span> persistentStoreCoordinator = _persistentStoreCoordinator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  信鸽推送</span><br><span class="line">            区分 iOS 7, iOS 8, iOS 9 推送模式 (下个版本不支持iOS 7)</span><br><span class="line">            1. app在前台运行时，不弹出推送框，但是app通过代码可以获取到推送的消息。</span><br><span class="line">            2. app在后台运行或者杀死状态时，会弹出推送框并且可以通过代码获取到推送的消息。</span><br><span class="line">            3. app在前台和后台运行时，推送上报触发的是didReceiveRemoteNotification事件。</span><br><span class="line">            4. app在杀死状态时，推送上报触发的是didFinishLaunchingWithOptions事件。</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#pragma mark XGPush</span></span><br><span class="line">- (<span class="keyword">void</span>)registerPush&#123;</span><br><span class="line">    <span class="keyword">float</span> sysVer = [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue];</span><br><span class="line">    <span class="keyword">if</span>(sysVer &lt; <span class="number">8</span>)&#123;</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotificationTypes:(<span class="built_in">UIRemoteNotificationTypeAlert</span> | <span class="built_in">UIRemoteNotificationTypeBadge</span> | <span class="built_in">UIRemoteNotificationTypeSound</span>)];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="preprocessor">#if __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= _IPHONE80_</span></span><br><span class="line">        <span class="built_in">UIMutableUserNotificationCategory</span> *categorys = [[<span class="built_in">UIMutableUserNotificationCategory</span> alloc] init];</span><br><span class="line">        <span class="built_in">UIUserNotificationSettings</span> *userSettings = [<span class="built_in">UIUserNotificationSettings</span> settingsForTypes:<span class="built_in">UIUserNotificationTypeBadge</span>|<span class="built_in">UIUserNotificationTypeSound</span>|<span class="built_in">UIUserNotificationTypeAlert</span></span><br><span class="line">                                                                                     categories:[<span class="built_in">NSSet</span> setWithObject:categorys]];</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerUserNotificationSettings:userSettings];</span><br><span class="line">        [[<span class="built_in">UIApplication</span> sharedApplication] registerForRemoteNotifications];</span><br><span class="line"><span class="preprocessor">#endif</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  UserAgent 加入版本号到header中user agent</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#pragma mark UserAgent</span></span><br><span class="line">- (<span class="keyword">void</span>)registerUserAgent&#123;</span><br><span class="line">    <span class="keyword">struct</span> utsname systemInfo;</span><br><span class="line">    uname(&amp;systemInfo);</span><br><span class="line">    <span class="built_in">NSString</span> *deviceString = [<span class="built_in">NSString</span> stringWithCString:systemInfo<span class="variable">.machine</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *userAgent = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/%@ (%@; iOS %@; Scale/%0.2f)"</span>, [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:(__bridge <span class="built_in">NSString</span> *)k<span class="built_in">CFBundleExecutableKey</span>] ?: [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:(__bridge <span class="built_in">NSString</span> *)k<span class="built_in">CFBundleIdentifierKey</span>], (__bridge <span class="keyword">id</span>)<span class="built_in">CFBundleGetValueForInfoDictionaryKey</span>(<span class="built_in">CFBundleGetMainBundle</span>(), k<span class="built_in">CFBundleVersionKey</span>) ?: [[[<span class="built_in">NSBundle</span> mainBundle] infoDictionary] objectForKey:(__bridge <span class="built_in">NSString</span> *)k<span class="built_in">CFBundleVersionKey</span>], deviceString, [[<span class="built_in">UIDevice</span> currentDevice] systemVersion], ([[<span class="built_in">UIScreen</span> mainScreen] respondsToSelector:<span class="keyword">@selector</span>(scale)] ? [[<span class="built_in">UIScreen</span> mainScreen] scale] : <span class="number">1.0</span>f)];</span><br><span class="line">    <span class="built_in">NSDictionary</span> *dictionary = @&#123;<span class="string">@"UserAgent"</span> : userAgent&#125;;<span class="comment">//User-Agent</span></span><br><span class="line">    [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] registerDefaults:dictionary];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma lifeCycle</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.window</span> = [[<span class="built_in">UIWindow</span> alloc] initWithFrame:[[<span class="built_in">UIScreen</span> mainScreen] bounds]];</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.window</span><span class="variable">.backgroundColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//网络</span></span><br><span class="line">    [[AFNetworkActivityIndicatorManager sharedManager] setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [[AFNetworkReachabilityManager sharedManager] startMonitoring];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sd加载的数据类型</span></span><br><span class="line">    [[[SDWebImageManager sharedManager] imageDownloader] setValue:<span class="string">@"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span> forHTTPHeaderField:<span class="string">@"Accept"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置导航条样式</span></span><br><span class="line">    [<span class="keyword">self</span> customizeInterface];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] setStatusBarHidden:<span class="literal">NO</span> withAnimation:<span class="built_in">UIStatusBarAnimationFade</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//UIWebView 的 User-Agent</span></span><br><span class="line">    [<span class="keyword">self</span> registerUserAgent];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([Login isLogin]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setupTabViewController];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        [<span class="built_in">UIApplication</span> sharedApplication]<span class="variable">.applicationIconBadgeNumber</span> = <span class="number">0</span>;</span><br><span class="line">        [<span class="keyword">self</span> setupIntroductionViewController];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.window</span> makeKeyAndVisible];</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     *  @author 叶帆</span><br><span class="line">     *</span><br><span class="line">     *  @brief  特殊引导页，用来显示节日或者重要的引导信息，与引导页不同，引导页所做的是登录是引导界面</span><br><span class="line">     */</span></span><br><span class="line">    [FunctionIntroManager showIntroPage];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     *  @author 叶帆</span><br><span class="line">     *</span><br><span class="line">     *  @brief  欢迎页图片的显示动画</span><br><span class="line">     */</span></span><br><span class="line">    EaseStartView *startView = [EaseStartView startView];</span><br><span class="line">    @weakify(<span class="keyword">self</span>);</span><br><span class="line">    [startView startAnimationWithCompletionBlock:^(EaseStartView *easeStartView) &#123;</span><br><span class="line">        @strongify(<span class="keyword">self</span>);</span><br><span class="line">        [<span class="keyword">self</span> completionStartAnimationWithOptions:launchOptions];</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  处理消息推送，用于固定推送的页面跳转和消息的状态</span><br><span class="line">            加入友盟统计，社会化分享组件</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)completionStartAnimationWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions&#123;</span><br><span class="line">    <span class="keyword">if</span> ([Login isLogin]) &#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *remoteNotification = [launchOptions valueForKey:<span class="built_in">UIApplicationLaunchOptionsRemoteNotificationKey</span>];</span><br><span class="line">        <span class="keyword">if</span> (remoteNotification) &#123;</span><br><span class="line">            [BaseViewController handleNotificationInfo:remoteNotification applicationState:<span class="built_in">UIApplicationStateInactive</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    UMENG 统计</span></span><br><span class="line">    [MobClick startWithAppkey:kUmeng_AppKey reportPolicy:BATCH channelId:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    UMENG Social Account</span></span><br><span class="line">    [UMSocialData setAppKey:kUmeng_AppKey];</span><br><span class="line">    [UMSocialWechatHandler setWXAppId:kSocial_WX_ID appSecret:kSocial_WX_Secret url:[<span class="built_in">NSObject</span> baseURLStr]];</span><br><span class="line">    [UMSocialQQHandler setQQWithAppId:kSocial_QQ_ID appKey:kSocial_QQ_Secret url:[<span class="built_in">NSObject</span> baseURLStr]];</span><br><span class="line">    [E<span class="built_in">NSession</span> setSharedSessionConsumerKey:kSocial_EN_Key consumerSecret:kSocial_EN_Secret optionalHost:<span class="literal">nil</span>];</span><br><span class="line">    [UMSocialSinaSSOHandler openNewSinaSSOWithRedirectURL:kSocial_Sina_RedirectURL];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    UMENG Social Config</span></span><br><span class="line">    [UMSocialConfig setFollowWeiboUids:@&#123;UMShareToSina : kSocial_Sina_OfficailAccount&#125;];<span class="comment">//设置默认关注官方账号</span></span><br><span class="line">    [UMSocialConfig setFinishToastIsHidden:<span class="literal">YES</span> position:UMSocialiToastPositionCenter];</span><br><span class="line">    [UMSocialConfig setNavigationBarConfig:^(<span class="built_in">UINavigationBar</span> *bar, <span class="built_in">UIButton</span> *closeButton, <span class="built_in">UIButton</span> *backButton, <span class="built_in">UIButton</span> *postButton, <span class="built_in">UIButton</span> *refreshButton, <span class="built_in">UINavigationItem</span> *navigationItem) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bar) &#123;</span><br><span class="line">            [bar setBackgroundImage:[<span class="built_in">UIImage</span> imageWithColor:[<span class="built_in">UIColor</span> colorWithHexString:[<span class="built_in">NSObject</span> baseURLStrIsTest]? <span class="string">@"0x3bbd79"</span> : <span class="string">@"0x28303b"</span>]] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (navigationItem) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([[navigationItem titleView] isKindOfClass:[<span class="built_in">UILabel</span> class]]) &#123;</span><br><span class="line">                <span class="built_in">UILabel</span> *titleL = (<span class="built_in">UILabel</span> *)[navigationItem titleView];</span><br><span class="line">                titleL<span class="variable">.font</span> = [<span class="built_in">UIFont</span> boldSystemFontOfSize:kNavTitleFontSize];</span><br><span class="line">                titleL<span class="variable">.textColor</span> = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    信鸽推送</span></span><br><span class="line">    [XGPush startApp:kXGPush_Id appKey:kXGPush_Key];</span><br><span class="line">    [Login setXGAccountWithCurUser];</span><br><span class="line">    <span class="comment">//注销之后需要再次注册前的准备</span></span><br><span class="line">    @weakify(<span class="keyword">self</span>);</span><br><span class="line">    <span class="keyword">void</span> (^successCallback)(<span class="keyword">void</span>) = ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">        <span class="comment">//如果变成需要注册状态</span></span><br><span class="line">        <span class="keyword">if</span>(![XGPush isUnRegisterStatus] &amp;&amp; [Login isLogin])&#123;</span><br><span class="line">            @strongify(<span class="keyword">self</span>);</span><br><span class="line">            [<span class="keyword">self</span> registerPush];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    [XGPush initForReregister:successCallback];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//[XGPush registerPush];  //注册Push服务，注册后才能收到推送</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//推送反馈(app不在前台运行时，点击推送激活时。统计而已)</span></span><br><span class="line">    [XGPush handleLaunching:launchOptions];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillResignActive:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.</span></span><br><span class="line">    <span class="comment">// Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.</span></span><br><span class="line">    [[ImageSizeManager shareManager] save];</span><br><span class="line">    [[Tweet tweetForSend] saveSendData];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)applicationDidEnterBackground:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.</span></span><br><span class="line">    <span class="comment">// If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillEnterForeground:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  App Become Active 处理未读消息的操作</span><br><span class="line">            使用了clang push &amp; pop 用于保存和恢复编译器的状态，目的是消除当前的警告</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationDidBecomeActive:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.</span></span><br><span class="line">    <span class="keyword">if</span> ([Login isLogin]) &#123;</span><br><span class="line">        [[UnReadManager shareManager] updateUnRead];</span><br><span class="line">        <span class="built_in">UIViewController</span> *presentingVC = [BaseViewController presentingVC];</span><br><span class="line">        SEL selector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"refresh"</span>);</span><br><span class="line">        <span class="keyword">if</span> ([presentingVC isKindOfClass:<span class="built_in">NSClassFromString</span>(<span class="string">@"Message_RootViewController"</span>)]</span><br><span class="line">            &amp;&amp; [presentingVC respondsToSelector:selector]) &#123;</span><br><span class="line"><span class="preprocessor">#pragma clang diagnostic push</span></span><br><span class="line"><span class="preprocessor">#pragma clang diagnostic ignored <span class="title">"-Warc-performSelector-leaks"</span></span></span><br><span class="line">            [presentingVC performSelector:selector];</span><br><span class="line"><span class="preprocessor">#pragma clang diagnostic pop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  App终止程序是保存Core Data Context</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)applicationWillTerminate:(<span class="built_in">UIApplication</span> *)application</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Saves changes in the application's managed object context before the application terminates.</span></span><br><span class="line">    [<span class="keyword">self</span> saveContext];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  推送常用的函数处理</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#pragma mark - XGPush Message</span></span><br><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didRegisterForRemoteNotificationsWithDeviceToken:(<span class="built_in">NSData</span> *)deviceToken</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> * deviceTokenStr = [XGPush registerDevice:deviceToken];</span><br><span class="line">    DebugLog(<span class="string">@"deviceTokenStr : %@"</span>, deviceTokenStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)application:(<span class="built_in">UIApplication</span> *)application didReceiveRemoteNotification:(<span class="built_in">NSDictionary</span> *)userInfo</span><br><span class="line">&#123;</span><br><span class="line">    DebugLog(<span class="string">@"didReceiveRemoteNotification-userInfo:-----\n%@"</span>, userInfo);</span><br><span class="line">    [XGPush handleReceiveNotification:userInfo];</span><br><span class="line">    [BaseViewController handleNotificationInfo:userInfo applicationState:[application applicationState]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Methods Private</span></span><br><span class="line">- (<span class="keyword">void</span>)setupLoginViewController&#123;</span><br><span class="line">    LoginViewController *loginVC = [[LoginViewController alloc] init];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.window</span> setRootViewController:[[BaseNavigationController alloc] initWithRootViewController:loginVC]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupIntroductionViewController&#123;</span><br><span class="line">    IntroductionViewController *introductionVC = [[IntroductionViewController alloc] init];</span><br><span class="line"><span class="comment">//    [self.window setRootViewController:[[BaseNavigationController alloc] initWithRootViewController:introductionVC]];</span></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.window</span> setRootViewController:introductionVC];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setupTabViewController&#123;</span><br><span class="line">    RootTabViewController *rootVC = [[RootTabViewController alloc] init];</span><br><span class="line">    rootVC<span class="variable">.tabBar</span><span class="variable">.translucent</span> = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.window</span> setRootViewController:rootVC];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)customizeInterface &#123;</span><br><span class="line">    <span class="comment">//设置Nav的背景色和title色</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UINavigationBar</span> *navigationBarAppearance = [<span class="built_in">UINavigationBar</span> appearance];</span><br><span class="line">    [navigationBarAppearance setBackgroundImage:[<span class="built_in">UIImage</span> imageWithColor:[<span class="built_in">UIColor</span> colorWithHexString:[<span class="built_in">NSObject</span> baseURLStrIsTest]? <span class="string">@"0x3bbd79"</span> : <span class="string">@"0x28303b"</span>]] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">    [navigationBarAppearance setTintColor:[<span class="built_in">UIColor</span> whiteColor]];<span class="comment">//返回按钮的箭头颜色</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *textAttributes = @&#123;</span><br><span class="line">                                     <span class="built_in">NSFontAttributeName</span>: [<span class="built_in">UIFont</span> boldSystemFontOfSize:kNavTitleFontSize],</span><br><span class="line">                                     <span class="built_in">NSForegroundColorAttributeName</span>: [<span class="built_in">UIColor</span> whiteColor],</span><br><span class="line">                                     &#125;;</span><br><span class="line">    [navigationBarAppearance setTitleTextAttributes:textAttributes];</span><br><span class="line"></span><br><span class="line">    [[<span class="built_in">UITextField</span> appearance] setTintColor:[<span class="built_in">UIColor</span> colorWithHexString:<span class="string">@"0x3bbc79"</span>]];<span class="comment">//设置UITextField的光标颜色</span></span><br><span class="line">    [[<span class="built_in">UITextView</span> appearance] setTintColor:[<span class="built_in">UIColor</span> colorWithHexString:<span class="string">@"0x3bbc79"</span>]];<span class="comment">//设置UITextView的光标颜色</span></span><br><span class="line">    [[<span class="built_in">UISearchBar</span> appearance] setBackgroundImage:[<span class="built_in">UIImage</span> imageWithColor:kColorTableSectionBg] forBarPosition:<span class="number">0</span> barMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  URL 模块情况分析</span><br><span class="line">            1.如果是包含coding-net:的情况且不是登录注册的链接，就是正常解析?VC:WebView</span><br><span class="line">            2.如果是包含coding-net:的情况且是登录注册的链接，那么就是从邮箱跳到Coding客户端，一种是重置密码邮件，一种是账号激活邮件</span><br><span class="line">            3.如果是包含en-:的情况是跳到Evernote的客户端</span><br><span class="line">            4.跳转到友盟客户端</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#pragma mark URL Schemes</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application openURL:(<span class="built_in">NSURL</span> *)url sourceApplication:(<span class="built_in">NSString</span> *)sourceApplication annotation:(<span class="keyword">id</span>)annotation&#123;</span><br><span class="line">    DebugLog(<span class="string">@"path: %@, params: %@"</span>, [url path], [url queryParams]);</span><br><span class="line">    <span class="keyword">if</span> ([url<span class="variable">.absoluteString</span> hasPrefix:kCodingAppScheme]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (![<span class="keyword">self</span> showPasswordWithURL:url]) &#123;<span class="comment">//如果不是登录注册的链接，就是用正常的解析模式解析</span></span><br><span class="line">            [BaseViewController presentLinkStr:url<span class="variable">.absoluteString</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([url<span class="variable">.absoluteString</span> hasPrefix:<span class="string">@"en-:"</span>])&#123;</span><br><span class="line">        <span class="keyword">return</span> [[E<span class="built_in">NSession</span> sharedSession] handleOpenURL:url];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  [UMSocialSnsService handleOpenURL:url];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *  @author 叶帆</span><br><span class="line"> *</span><br><span class="line"> *  @brief  通过对URL中的关键词分析从而启动应用，并且使用GCD占据主线程弹出临时会话的VC</span><br><span class="line">            主要实现的是对重置密码和注册后账号激活，从邮箱App跳到Coding客户端的操作</span><br><span class="line">            成功自动销毁线程回到主线程，方法很赞！</span><br><span class="line"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)showPasswordWithURL:(<span class="built_in">NSURL</span> *)url&#123;</span><br><span class="line">    PasswordType type;</span><br><span class="line">    <span class="built_in">NSString</span> *email, *key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([[url lastPathComponent] isEqualToString:<span class="string">@"resetPassword"</span>]) &#123;</span><br><span class="line">        type = PasswordReset;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> ([[url lastPathComponent] isEqualToString:<span class="string">@"activate"</span>])&#123;</span><br><span class="line">        type = PasswordActivate;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    email = [[url queryParams] objectForKey:<span class="string">@"email"</span>];</span><br><span class="line">    key = [[url queryParams] objectForKey:<span class="string">@"key"</span>];</span><br><span class="line">    <span class="keyword">if</span> (email<span class="variable">.length</span> &lt;= <span class="number">0</span> || key<span class="variable">.length</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//弹出临时会话</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">0.3</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        PasswordViewController *vc = [PasswordViewController passwordVCWithType:type email:[email URLDecoding] andKey:key];</span><br><span class="line">        vc<span class="variable">.successBlock</span> = ^(PasswordViewController *presentVC, <span class="keyword">id</span> data)&#123;</span><br><span class="line">            [presentVC dismissViewControllerAnimated:<span class="literal">YES</span> completion:^&#123;</span><br><span class="line">                <span class="built_in">NSString</span> *tipStr;</span><br><span class="line">                <span class="keyword">switch</span> (presentVC<span class="variable">.type</span>) &#123;</span><br><span class="line">                    <span class="keyword">case</span> PasswordReset:</span><br><span class="line">                        tipStr = <span class="string">@"修改密码成功～"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> PasswordActivate:</span><br><span class="line">                        tipStr = <span class="string">@"账号激活成功～"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        tipStr = <span class="string">@"操作成功"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                kTipAlert(<span class="string">@"%@"</span>, tipStr);</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;;</span><br><span class="line">        [BaseViewController presentVC:vc];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Methods Core Data</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)saveContext</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSManagedObjectContext</span> *managedObjectContext = <span class="keyword">self</span><span class="variable">.managedObjectContext</span>;</span><br><span class="line">    <span class="keyword">if</span> (managedObjectContext != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([managedObjectContext hasChanges] &amp;&amp; ![managedObjectContext save:&amp;error]) &#123;</span><br><span class="line">             <span class="comment">// Replace this implementation with code to handle the error appropriately.</span></span><br><span class="line">             <span class="comment">// abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span></span><br><span class="line">            DebugLog(<span class="string">@"Unresolved error %@, %@"</span>, error, [error userInfo]);</span><br><span class="line">            abort();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Core Data stack</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the managed object context for the application.</span></span><br><span class="line"><span class="comment">// If the context doesn't already exist, it is created and bound to the persistent store coordinator for the application.</span></span><br><span class="line">- (<span class="built_in">NSManagedObjectContext</span> *)managedObjectContext</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_managedObjectContext != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _managedObjectContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSPersistentStoreCoordinator</span> *coordinator = [<span class="keyword">self</span> persistentStoreCoordinator];</span><br><span class="line">    <span class="keyword">if</span> (coordinator != <span class="literal">nil</span>) &#123;</span><br><span class="line">        _managedObjectContext = [[<span class="built_in">NSManagedObjectContext</span> alloc] init];</span><br><span class="line">        [_managedObjectContext setPersistentStoreCoordinator:coordinator];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _managedObjectContext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the managed object model for the application.</span></span><br><span class="line"><span class="comment">// If the model doesn't already exist, it is created from the application's model.</span></span><br><span class="line">- (<span class="built_in">NSManagedObjectModel</span> *)managedObjectModel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_managedObjectModel != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _managedObjectModel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSURL</span> *modelURL = [[<span class="built_in">NSBundle</span> mainBundle] URLForResource:<span class="string">@"Coding_iOS"</span> withExtension:<span class="string">@"momd"</span>];</span><br><span class="line">    _managedObjectModel = [[<span class="built_in">NSManagedObjectModel</span> alloc] initWithContentsOfURL:modelURL];</span><br><span class="line">    <span class="keyword">return</span> _managedObjectModel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the persistent store coordinator for the application.</span></span><br><span class="line"><span class="comment">// If the coordinator doesn't already exist, it is created and the application's store added to it.</span></span><br><span class="line">- (<span class="built_in">NSPersistentStoreCoordinator</span> *)persistentStoreCoordinator</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_persistentStoreCoordinator != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _persistentStoreCoordinator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSURL</span> *storeURL = [[<span class="keyword">self</span> applicationDocumentsDirectory] URLByAppendingPathComponent:<span class="string">@"Coding_iOS.sqlite"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line">    _persistentStoreCoordinator = [[<span class="built_in">NSPersistentStoreCoordinator</span> alloc] initWithManagedObjectModel:[<span class="keyword">self</span> managedObjectModel]];</span><br><span class="line">    <span class="keyword">if</span> (![_persistentStoreCoordinator addPersistentStoreWithType:<span class="built_in">NSSQLiteStoreType</span> configuration:<span class="literal">nil</span> URL:storeURL options:<span class="literal">nil</span> error:&amp;error]) &#123;</span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         Replace this implementation with code to handle the error appropriately.</span><br><span class="line"></span><br><span class="line">         abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.</span><br><span class="line"></span><br><span class="line">         Typical reasons for an error here include:</span><br><span class="line">         * The persistent store is not accessible;</span><br><span class="line">         * The schema for the persistent store is incompatible with current managed object model.</span><br><span class="line">         Check the error message to determine what the actual problem was.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         If the persistent store is not accessible, there is typically something wrong with the file path. Often, a file URL is pointing into the application's resources directory instead of a writeable directory.</span><br><span class="line"></span><br><span class="line">         If you encounter schema incompatibility errors during development, you can reduce their frequency by:</span><br><span class="line">         * Simply deleting the existing store:</span><br><span class="line">         [[NSFileManager defaultManager] removeItemAtURL:storeURL error:nil]</span><br><span class="line"></span><br><span class="line">         * Performing automatic lightweight migration by passing the following dictionary as the options parameter:</span><br><span class="line">         @&#123;NSMigratePersistentStoresAutomaticallyOption:@YES, NSInferMappingModelAutomaticallyOption:@YES&#125;</span><br><span class="line"></span><br><span class="line">         Lightweight migration will only work for a limited set of schema changes; consult "Core Data Model Versioning and Data Migration Programming Guide" for details.</span><br><span class="line"></span><br><span class="line">         */</span></span><br><span class="line">        DebugLog(<span class="string">@"Unresolved error %@, %@"</span>, error, [error userInfo]);</span><br><span class="line">        abort();</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _persistentStoreCoordinator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - Application's Documents directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the URL to the application's Documents directory.</span></span><br><span class="line">- (<span class="built_in">NSURL</span> *)applicationDocumentsDirectory</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="built_in">NSFileManager</span> defaultManager] URLsForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomains:<span class="built_in">NSUserDomainMask</span>] lastObject];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5199_u5728_u524D_u9762"><a href="#u5199_u5728_u524D_u9762" class="headerlink" title="写在前面"></a>写在前面</h3><p><a href="https://coding.]]>
    </summary>
    
      <category term="Coding源码" scheme="http://yeziahehe.com/tags/Coding%E6%BA%90%E7%A0%81/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objc中国学习--架构]]></title>
    <link href="http://yeziahehe.com/2015/09/27/Objc_learning--architecture/"/>
    <id>http://yeziahehe.com/2015/09/27/Objc_learning--architecture/</id>
    <published>2015-09-27T15:23:51.000Z</published>
    <updated>2015-12-16T15:27:18.000Z</updated>
    <content type="html"><![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="u67B6_u6784"><a href="#u67B6_u6784" class="headerlink" title="架构"></a>架构</h3><ul>
<li><p>MVVM 介绍</p>
</li>
<li><p>避免滥用单例</p>
</li>
<li><p>iOS 中的行为</p>
</li>
<li><p>子类</p>
</li>
<li><p>使用 VIPER 构建 iOS 应用</p>
</li>
</ul>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><blockquote>
<p>mvvm是Model-View-ViewModel，将 Model 数据转换为 View 可以呈现的东西的事情。</p>
<p>通俗的讲，为<strong>胖的数值层，瘦的对象层</strong>。</p>
</blockquote>
<p>通过结合<a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">ReactiveCocoa</a>便利性，这个模式提供了一个很好的代替MVC的方案，它保证了让视图控制器的轻量性。</p>
<p>View-Model 作为一个表现视图显示自身所需数据的静态模型；但它也有收集，解释和转换那些数据的责任。这留给了 view (controller) 一个更加清晰明确的任务：呈现由 view-model 提供的数据。</p>
<p>现在视图控制器仅关注于用 view-model 的数据配置和管理各种各样的视图，并在先关用户输入时让 view-model 获知并需要向上游修改数据. 视图控制器不需要了解关于网络服务调用，Core Data，模型对象等。</p>
<p>我们一般认为可以这样来处理：</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                   -<span class="ruby"> <span class="constant">View</span></span><br><span class="line"></span>Foundation - UIKit - Controller</span><br><span class="line">           -<span class="ruby"> <span class="constant">Other</span> - <span class="constant">Network</span>     -</span><br><span class="line"></span>                   -<span class="ruby"> <span class="constant">Bussiness</span>   - <span class="constant">View</span> <span class="constant">Model</span></span><br><span class="line"></span>                   -<span class="ruby"> <span class="constant">Persistence</span> -</span></span><br></pre></td></tr></table></figure>
<p>MVVM模式中的三部分比MVC更加简洁，下面是一些严格的限制</p>
<ol>
<li>View引用了ViewModel，但反过来不行。</li>
<li>ViewModel引用了Model，但反过来不行。</li>
</ol>
<p>如果我们破坏了这些规则，便无法正确地使用MVVM。</p>
<h3 id="ReactiveCocoa"><a href="#ReactiveCocoa" class="headerlink" title="ReactiveCocoa"></a>ReactiveCocoa</h3><p>在编写iOS代码时，我们的大部分代码都是在响应一些事件：按钮点击、接收网络消息、属性变化等等。但是这些事件在代码中的表现形式却不一样：(我在某一张提到过)如target-action、Delegate、KVO、Block等。ReactiveCocoa的目的就是定义一个统一的事件处理接口，这样它们可以非常简单地进行链接、过滤和组合。ReactiveCocoa被当成是函数响应编程(Functional Reactive Programming，FRP)框架。</p>
<h4 id="RACSignal__uFF08_u4FE1_u53F7_uFF09"><a href="#RACSignal__uFF08_u4FE1_u53F7_uFF09" class="headerlink" title="RACSignal （信号）"></a>RACSignal （信号）</h4><p>RACSignal (信号)就 RAC 来说是构造单元。 它代表我们最终将要收到的信息。当你能将未来某时刻收到的消息具体表示出来时， 你可以开始预先(陈述性)运用逻辑并构建你的信息流,而不是必须等到事件发生(命令式)。</p>
<p>信号类(RACSiganl)，只是表示当数据改变时，信号内部会发出数据，它本身不具备发送信号的能力，而是交给内部一个订阅者去发出。</p>
<p>默认一个信号都是冷信号，也就是值改变了，也不会触发，只有订阅了这个信号，这个信号才会变为热信号，值改变了才会触发。</p>
<p>如何订阅信号：调用信号RACSignal的subscribeNext就能订阅。</p>
<p>采用block的形式将信号发送一个事件流到它们的订阅者中。我们需要知道三种类型的事件：next，error和completed。一个信号可能由于error事件或completed事件而终止，在此之前它会发送很多个next事件。在这一部分中，我们将重点关注next事件。</p>
<p>ReactiveCocoa的核心是信号，它是一个事件流。使用ReactiveCocoa时，对于同一个问题，可能会有多种不同的方法来解决。ReactiveCocoa的目的就是为了简化我们的代码并更容易理解。</p>
<p>用 <code>@weakify/@strongify</code> 宏切换 strong 和 weak。这在创建所有这些 block 时非常重要。在 RAC 的 block 中使用 self 时将会被捕获为强引用并得到保留环， 除非你尤其意识到要破除保留环。</p>
<p>View 与 View Model 绑定</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RACSignal使用步骤：</span></span><br><span class="line">    <span class="comment">// 1.创建信号 + (RACSignal *)createSignal:(RACDisposable * (^)(id&lt;RACSubscriber&gt; subscriber))didSubscribe</span></span><br><span class="line">    <span class="comment">// 2.发送信号 - (void)sendNext:(id)value</span></span><br><span class="line">    <span class="comment">// 3.订阅信号,才会激活信号. - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RACSignal底层实现：</span></span><br><span class="line">    <span class="comment">// 1.创建信号，首先把didSubscribe保存到信号中，还不会触发。</span></span><br><span class="line">    <span class="comment">// 2.当信号被订阅，也就是调用signal的subscribeNext:nextBlock</span></span><br><span class="line">    <span class="comment">// 2.2 subscribeNext内部会创建订阅者subscriber，并且把nextBlock保存到subscriber中。</span></span><br><span class="line">    <span class="comment">// 2.1 subscribeNext内部会调用siganl的didSubscribe</span></span><br><span class="line">    <span class="comment">// 3.siganl的didSubscribe中调用[subscriber sendNext:@1];</span></span><br><span class="line">    <span class="comment">// 3.1 sendNext底层其实就是执行subscriber的nextBlock</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建信号</span></span><br><span class="line">    RACSignal *siganl = [RACSignal createSignal:^RACDisposable * (<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// block调用时刻：每当有订阅者订阅信号，就会调用block。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.发送信号</span></span><br><span class="line">        [subscriber sendNext:@<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不在发送数据，最好发送信号完成，内部会自动调用[RACDisposable disposable]取消订阅信号。</span></span><br><span class="line">        [subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [RACDisposable disposableWithBlock:^&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// block调用时刻：当信号发送完成或者发送错误，就会自动执行这个block,取消订阅信号。</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行完Block后，当前信号就不在被订阅了。</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"信号被销毁"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.订阅信号,才会激活信号.</span></span><br><span class="line">    [siganl subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="comment">// block调用时刻：每当有信号发出数据，就会调用block.</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"接收到数据:%@"</span>,x);</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<h4 id="RACReplaySubject"><a href="#RACReplaySubject" class="headerlink" title="RACReplaySubject"></a>RACReplaySubject</h4><p>RACReplaySubject:重复提供信号者，RACSubject的子类。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RACSubject使用步骤</span></span><br><span class="line">    <span class="comment">// 1.创建信号 [RACSubject subject]，跟RACSiganl不一样，创建信号时没有block。</span></span><br><span class="line">    <span class="comment">// 2.订阅信号 - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock</span></span><br><span class="line">    <span class="comment">// 3.发送信号 sendNext:(id)value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RACSubject:底层实现和RACSignal不一样。</span></span><br><span class="line">    <span class="comment">// 1.调用subscribeNext订阅信号，只是把订阅者保存起来，并且订阅者的nextBlock已经赋值了。</span></span><br><span class="line">    <span class="comment">// 2.调用sendNext发送信号，遍历刚刚保存的所有订阅者，一个一个调用订阅者的nextBlock。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建信号</span></span><br><span class="line">    RACSubject *subject = [RACSubject subject];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.订阅信号</span></span><br><span class="line">    [subject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="comment">// block调用时刻：当信号发出新值，就会调用.</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"第一个订阅者%@"</span>,x);</span><br><span class="line">    &#125;];</span><br><span class="line">    [subject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="comment">// block调用时刻：当信号发出新值，就会调用.</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"第二个订阅者%@"</span>,x);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.发送信号</span></span><br><span class="line">    [subject sendNext:<span class="string">@"1"</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RACReplaySubject使用步骤:</span></span><br><span class="line">    <span class="comment">// 1.创建信号 [RACSubject subject]，跟RACSiganl不一样，创建信号时没有block。</span></span><br><span class="line">    <span class="comment">// 2.可以先订阅信号，也可以先发送信号。</span></span><br><span class="line">    <span class="comment">// 2.1 订阅信号 - (RACDisposable *)subscribeNext:(void (^)(id x))nextBlock</span></span><br><span class="line">    <span class="comment">// 2.2 发送信号 sendNext:(id)value</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// RACReplaySubject:底层实现和RACSubject不一样。</span></span><br><span class="line">    <span class="comment">// 1.调用sendNext发送信号，把值保存起来，然后遍历刚刚保存的所有订阅者，一个一个调用订阅者的nextBlock。</span></span><br><span class="line">    <span class="comment">// 2.调用subscribeNext订阅信号，遍历保存的所有值，一个一个调用订阅者的nextBlock</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果想当一个信号被订阅，就重复播放之前所有值，需要先发送信号，在订阅信号。</span></span><br><span class="line">    <span class="comment">// 也就是先保存值，在订阅值。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.创建信号</span></span><br><span class="line">    RACReplaySubject *replaySubject = [RACReplaySubject subject];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.发送信号</span></span><br><span class="line">    [replaySubject sendNext:@<span class="number">1</span>];</span><br><span class="line">    [replaySubject sendNext:@<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.订阅信号</span></span><br><span class="line">    [replaySubject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"第一个订阅者接收到的数据%@"</span>,x);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅信号</span></span><br><span class="line">    [replaySubject subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"第二个订阅者接收到的数据%@"</span>,x);</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<h4 id="RACCommand"><a href="#RACCommand" class="headerlink" title="RACCommand"></a>RACCommand</h4><p>RACCommand:RAC中用于处理事件的类，可以把事件如何处理,事件中的数据如何传递，包装到这个类中，他可以很方便的监控事件的执行过程。</p>
<p>使用场景:监听按钮点击，网络请求</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一、RACCommand使用步骤:</span></span><br><span class="line">   <span class="comment">// 1.创建命令 initWithSignalBlock:(RACSignal * (^)(id input))signalBlock</span></span><br><span class="line">   <span class="comment">// 2.在signalBlock中，创建RACSignal，并且作为signalBlock的返回值</span></span><br><span class="line">   <span class="comment">// 3.执行命令 - (RACSignal *)execute:(id)input</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 二、RACCommand使用注意:</span></span><br><span class="line">   <span class="comment">// 1.signalBlock必须要返回一个信号，不能传nil.</span></span><br><span class="line">   <span class="comment">// 2.如果不想要传递信号，直接创建空的信号[RACSignal empty];</span></span><br><span class="line">   <span class="comment">// 3.RACCommand中信号如果数据传递完，必须调用[subscriber sendCompleted]，这时命令才会执行完毕，否则永远处于执行中。</span></span><br><span class="line">   <span class="comment">// 4.RACCommand需要被强引用，否则接收不到RACCommand中的信号，因此RACCommand中的信号是延迟发送的。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 三、RACCommand设计思想：内部signalBlock为什么要返回一个信号，这个信号有什么用。</span></span><br><span class="line">   <span class="comment">// 1.在RAC开发中，通常会把网络请求封装到RACCommand，直接执行某个RACCommand就能发送请求。</span></span><br><span class="line">   <span class="comment">// 2.当RACCommand内部请求到数据的时候，需要把请求的数据传递给外界，这时候就需要通过signalBlock返回的信号传递了。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 四、如何拿到RACCommand中返回信号发出的数据。</span></span><br><span class="line">   <span class="comment">// 1.RACCommand有个执行信号源executionSignals，这个是signal of signals(信号的信号),意思是信号发出的数据是信号，不是普通的类型。</span></span><br><span class="line">   <span class="comment">// 2.订阅executionSignals就能拿到RACCommand中返回的信号，然后订阅signalBlock返回的信号，就能获取发出的值。</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 五、监听当前命令是否正在执行executing</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 六、使用场景,监听按钮点击，网络请求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 1.创建命令</span></span><br><span class="line">   RACCommand *command = [[RACCommand alloc] initWithSignalBlock:^RACSignal*(<span class="keyword">id</span> input) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"执行命令"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建空信号,必须返回信号</span></span><br><span class="line">       <span class="comment">//        return [RACSignal empty];</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.创建信号,用来传递数据</span></span><br><span class="line">       <span class="keyword">return</span> [RACSignal createSignal:^RACDisposable*(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"></span><br><span class="line">           [subscriber sendNext:<span class="string">@"请求数据"</span>];</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 注意：数据传递完，最好调用sendCompleted，这时命令才执行完毕。</span></span><br><span class="line">           [subscriber sendCompleted];</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">       &#125;];</span><br><span class="line"></span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 强引用命令，不要被销毁，否则接收不到数据</span></span><br><span class="line">   _conmmand = command;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3.执行命令</span></span><br><span class="line">   [<span class="keyword">self</span><span class="variable">.conmmand</span> execute:@<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 4.订阅RACCommand中的信号</span></span><br><span class="line">   [command<span class="variable">.executionSignals</span> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">       [x subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</span><br><span class="line">       &#125;];</span><br><span class="line"></span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// RAC高级用法</span></span><br><span class="line">   <span class="comment">// switchToLatest:用于signal of signals，获取signal of signals发出的最新信号,也就是可以直接拿到RACCommand中的信号</span></span><br><span class="line">   [command<span class="variable">.executionSignals</span><span class="variable">.switchToLatest</span> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 5.监听命令是否执行完毕,默认会来一次，可以直接跳过，skip表示跳过第一次信号。</span></span><br><span class="line">   [[command<span class="variable">.executing</span> skip:<span class="number">1</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> ([x boolValue] == <span class="literal">YES</span>) &#123;</span><br><span class="line">           <span class="comment">// 正在执行</span></span><br><span class="line">           <span class="built_in">NSLog</span>(<span class="string">@"正在执行"</span>);</span><br><span class="line"></span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">// 执行完成</span></span><br><span class="line">           <span class="built_in">NSLog</span>(<span class="string">@"执行完成"</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure>
<h4 id="u5BF9_u4E8E_u6D88_u606F_u673A_u5236_u7684_u5C01_u88C5"><a href="#u5BF9_u4E8E_u6D88_u606F_u673A_u5236_u7684_u5C01_u88C5" class="headerlink" title="对于消息机制的封装"></a>对于消息机制的封装</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// KVO</span></span><br><span class="line">[RACObserve(<span class="keyword">self</span>, username) subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@" 成员变量 username 被修改成了：%@"</span>, x);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// target-action</span></span><br><span class="line"><span class="keyword">self</span><span class="variable">.button</span><span class="variable">.rac_command</span> = [[RACCommand alloc] initWithSignalBlock:^RACSignal*(<span class="keyword">id</span> input) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@" 按钮被点击 "</span>);</span><br><span class="line">    <span class="keyword">return</span> [RACSignal empty];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Notification</span></span><br><span class="line">[[[<span class="built_in">NSNotificationCenter</span> defaultCenter]</span><br><span class="line">    rac_addObserverForName:<span class="built_in">UIKeyboardDidChangeFrameNotification</span></span><br><span class="line">                    object:<span class="literal">nil</span>]</span><br><span class="line">    subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@" 键盘 Frame 改变 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delegate</span></span><br><span class="line">[[<span class="keyword">self</span> rac_signalForSelector:<span class="keyword">@selector</span>(viewWillAppear:)] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">    debugLog(<span class="string">@"viewWillAppear 方法被调用 %@"</span>, x);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h4 id="u5E38_u89C1_u7684_u65B9_u6CD5"><a href="#u5E38_u89C1_u7684_u65B9_u6CD5" class="headerlink" title="常见的方法"></a>常见的方法</h4><ol>
<li><p>代替代理:<br>rac_signalForSelector：用于替代代理。</p>
</li>
<li><p>代替KVO :<br>rac_valuesAndChangesForKeyPath：用于监听某个对象的属性改变。</p>
</li>
<li><p>监听事件:<br>rac_signalForControlEvents：用于监听某个事件。</p>
</li>
<li><p>代替通知:<br>rac_addObserverForName:用于监听某个通知。</p>
</li>
<li><p>监听文本框文字改变:<br>rac_textSignal:只要文本框发出改变就会发出这个信号。</p>
</li>
<li><p>处理当界面有多次请求时，需要都获取到数据时，才能展示界面<br>rac_liftSelector:withSignalsFromArray:Signals:当传入的Signals(信号数组)，每一个signal都至少sendNext过一次，就会去触发第一个selector参数的方法。<br> 使用注意：几个信号，参数一的方法就几个参数，每个参数对应信号发出的数据。</p>
</li>
</ol>
<p>Demo<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.代替代理</span></span><br><span class="line">   <span class="comment">// 需求：自定义redView,监听红色view中按钮点击</span></span><br><span class="line">   <span class="comment">// 之前都是需要通过代理监听，给红色View添加一个代理属性，点击按钮的时候，通知代理做事情</span></span><br><span class="line">   <span class="comment">// rac_signalForSelector:把调用某个对象的方法的信息转换成信号，就要调用这个方法，就会发送信号。</span></span><br><span class="line">   <span class="comment">// 这里表示只要redV调用btnClick:,就会发出信号，订阅就好了。</span></span><br><span class="line">   [[redV rac_signalForSelector:<span class="keyword">@selector</span>(btnClick:)] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"点击红色按钮"</span>);</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.KVO</span></span><br><span class="line">   <span class="comment">// 把监听redV的center属性改变转换成信号，只要值改变就会发送信号</span></span><br><span class="line">   <span class="comment">// observer:可以传入nil</span></span><br><span class="line">   [[redV rac_valuesAndChangesForKeyPath:<span class="string">@"center"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> observer:<span class="literal">nil</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</span><br><span class="line"></span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3.监听事件</span></span><br><span class="line">   <span class="comment">// 把按钮点击事件转换为信号，点击按钮，就会发送信号</span></span><br><span class="line">   [[<span class="keyword">self</span><span class="variable">.btn</span> rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"按钮被点击了"</span>);</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 4.代替通知</span></span><br><span class="line">   <span class="comment">// 把监听到的通知转换信号</span></span><br><span class="line">   [[[<span class="built_in">NSNotificationCenter</span> defaultCenter] rac_addObserverForName:<span class="built_in">UIKeyboardWillShowNotification</span> object:<span class="literal">nil</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line">       <span class="built_in">NSLog</span>(<span class="string">@"键盘弹出"</span>);</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 5.监听文本框的文字改变</span></span><br><span class="line">  [_textField<span class="variable">.rac_textSignal</span> subscribeNext:^(<span class="keyword">id</span> x) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">NSLog</span>(<span class="string">@"文字改变了%@"</span>,x);</span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6.处理多个请求，都返回结果的时候，统一做处理.</span></span><br><span class="line">   RACSignal *request1 = [RACSignal createSignal:^RACDisposable*(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 发送请求1</span></span><br><span class="line">       [subscriber sendNext:<span class="string">@"发送请求1"</span>];</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   RACSignal *request2 = [RACSignal createSignal:^RACDisposable*(<span class="keyword">id</span>&lt;RACSubscriber&gt; subscriber) &#123;</span><br><span class="line">       <span class="comment">// 发送请求2</span></span><br><span class="line">       [subscriber sendNext:<span class="string">@"发送请求2"</span>];</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">   &#125;];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 使用注意：几个信号，参数一的方法就几个参数，每个参数对应信号发出的数据。</span></span><br><span class="line">   [<span class="keyword">self</span> rac_liftSelector:<span class="keyword">@selector</span>(update<span class="built_in">UIWithR1</span>:r2:) withSignalsFromArray:@[request1,request2]];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新UI</span></span><br><span class="line">- (<span class="keyword">void</span>)update<span class="built_in">UIWithR1</span>:(<span class="keyword">id</span>)data r2:(<span class="keyword">id</span>)data1</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"更新UI%@  %@"</span>,data,data1);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="u5355_u4F8B_u6A21_u5F0F"><a href="#u5355_u4F8B_u6A21_u5F0F" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote>
<p>单例设计模式确切的说就是一个类只有一个实例，有一个全局的接口来访问这个实例。当第一次载入的时候，它通常使用延时加载的方法创建单一实例。</p>
</blockquote>
<h3 id="VIPER"><a href="#VIPER" class="headerlink" title="VIPER"></a>VIPER</h3><blockquote>
<p>VIPER 可以是视图 (View)，交互器 (Interactor)，展示器 (Presenter)，实体 (Entity) 以及路由 (Routing) 的首字母缩写。简明架构将一个应用程序的逻辑结构划分为不同的责任层。这使得它更容易隔离依赖项 (如数据库)，也更容易测试各层间的边界处的交互。</p>
</blockquote>
<p>VIPER 的主要部分是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">视图：根据展示器的要求显示界面，并将用户输入反馈给展示器。</span><br><span class="line">交互器：包含由用例指定的业务逻辑。</span><br><span class="line">展示器：包含为显示（从交互器接受的内容）做的准备工作的相关视图逻辑，并对用户输入进行反馈（从交互器获取新数据）。</span><br><span class="line">实体：包含交互器要使用的基本模型对象。</span><br><span class="line">路由：包含用来描述屏幕显示和显示顺序的导航逻辑。</span><br></pre></td></tr></table></figure>
<h4 id="u4EA4_u4E92_u5668"><a href="#u4EA4_u4E92_u5668" class="headerlink" title="交互器"></a>交互器</h4><p>交互器在应用中代表着一个独立的用例。它具有业务逻辑以操纵模型对象（实体）执行特定的任务。交互器中的工作应当独立与任何用户界面。</p>
<h4 id="u5B9E_u4F53"><a href="#u5B9E_u4F53" class="headerlink" title="实体"></a>实体</h4><p>实体是被交互器操作的模型对象，并且它们只被交互器所操作。交互器永远不会传输实体至表现层 (比如说展示器)。</p>
<h4 id="u5C55_u793A_u5668"><a href="#u5C55_u793A_u5668" class="headerlink" title="展示器"></a>展示器</h4><p>展示器是一个主要包含了驱动用户界面的逻辑的 PONSO，它总是知道何时呈现用户界面。基于其收集来自用户交互的输入功能，它可以在合适的时候更新用户界面并向交互器发送请求。</p>
<h4 id="u89C6_u56FE"><a href="#u89C6_u56FE" class="headerlink" title="视图"></a>视图</h4><p>视图一般是被动的，它通常等待展示器下发需要显示的内容，而不会向其索取数据。视图（例如登录界面的登录视图控件）所定义的方法应该允许展示器在高度抽象的层次与之交流。展示器通过内容进行表达，而不关心那些内容所显示的样子。展示器不知道 UILabel，UIButton 等的存在，它只知道其中包含的内容以及何时需要显示。内容如何被显示是由视图来进行控制的。</p>
<h4 id="u8DEF_u7531"><a href="#u8DEF_u7531" class="headerlink" title="路由"></a>路由</h4><p>屏幕间的路径会在交互设计师创建的线框 (wireframes) 里进行定义。在 VIPER 中，路由是由两个部分来负责的：展示器和线框。一个线框对象包括 UIWindow，UINavigationController，UIViewController 等部分，它负责创建视图/视图控制器并将其装配到窗口中。</p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.objcio.cn/issue-13/" target="_blank" rel="external">#13 架构</a></p>
<p><a href="http://southpeak.github.io/blog/2014/08/02/reactivecocoazhi-nan-%5B%3F%5D-:xin-hao/" target="_blank" rel="external">ReactiveCocoa指南一：信号</a></p>
<p><a href="http://southpeak.github.io/blog/2014/08/02/reactivecocoazhi-nan-er-:twittersou-suo-shi-li/" target="_blank" rel="external">ReactiveCocoa指南二：Twitter搜索实例</a></p>
<p><a href="http://yulingtianxia.com/blog/2015/05/21/ReactiveCocoa-and-MVVM-an-Introduction/" target="_blank" rel="external">ReactiveCocoa-and-MVVM-an-Introduction</a></p>
<p><a href="http://southpeak.github.io/blog/2014/08/08/mvvmzhi-nan-yi-:flickrsou-suo-shi-li/" target="_blank" rel="external">MVVM指南一：Flickr搜索实例</a></p>
<p><a href="http://blog.devtang.com/blog/2014/02/11/reactivecocoa-introduction/" target="_blank" rel="external">ReactiveCocoa - iOS开发的新框架</a></p>
<p><a href="http://blog.csdn.net/abc649395594/article/details/46123379" target="_blank" rel="external">ReactiveCocoa框架菜鸟入门（三）——信号（Signal）与订阅者（Subscriber）</a></p>
<p><a href="http://www.superqq.com/blog/2015/06/13/ios-she-ji-mo-shi-xi-lie-:singleton-dan-li-mo-shi/" target="_blank" rel="external">iOS 设计模式系列：Singleton – 单例模式</a></p>
<p><a href="http://www.jianshu.com/p/87ef6720a096" target="_blank" rel="external">最快让你上手ReactiveCocoa之基础篇</a></p>
<p><a href="http://www.jianshu.com/p/e10e5ca413b7" target="_blank" rel="external">最快让你上手ReactiveCocoa之进阶篇</a></p>
<p><a href="http://yulingtianxia.com/blog/2014/07/29/reactivecocoa/" target="_blank" rel="external">ReactiveCocoa学习笔记</a></p>
<p><a href="http://limboy.me/ios/2013/12/27/reactivecocoa-2.html" target="_blank" rel="external">说说ReactiveCocoa 2</a></p>
<p><a href="http://supermao.cn/zhe-yang-hao-yong-de-reactivecocoagen-ben-ting-bu-xia-lai/" target="_blank" rel="external">这样好用的ReactiveCocoa，根本停不下来</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="u67B6_u6784"><a href="#u67B6_u6784" class="]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/tags/objc%E4%B8%AD%E5%9B%BD/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/categories/objc%E4%B8%AD%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objc中国学习--Views]]></title>
    <link href="http://yeziahehe.com/2015/09/24/Objc_learning--Views/"/>
    <id>http://yeziahehe.com/2015/09/24/Objc_learning--Views/</id>
    <published>2015-09-24T15:23:26.000Z</published>
    <updated>2015-12-16T15:23:39.000Z</updated>
    <content type="html"><![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h3><ul>
<li><p>卷首语</p>
</li>
<li><p>绘制像素到屏幕上</p>
</li>
<li><p>理解 Scroll Views</p>
</li>
<li><p>自定义 Collection View 布局</p>
</li>
<li><p>自定义控件</p>
</li>
<li><p>先进的自动布局工具箱</p>
</li>
</ul>
<h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><p>每个视图都有一个 <code>bounds</code> 和 <code>frame</code>。当布局一个界面时，我们需要处理视图的 <code>frame</code>。这允许我们放置并设置视图的大小。视图的 <code>frame</code> 和 <code>bounds</code> 的大小总是一样的，但是他们的 <code>origin</code> 有可能不同。</p>
<p>视图只关心一件事就是绘制它自己的 <code>content</code>。这个绘制发生在每个视图的 <code>drawRect:</code> 方法中。</p>
<p>在 <code>drawRect:</code> 方法被调用前，会为视图创建一个空白的图片来绘制 <code>content</code>。这个图片的坐标系统是视图的 <code>bounds</code>。几乎每个视图 <code>bounds</code> 的 <code>origin</code> 都是 {0，0}。</p>
<p>scroll view 的 <code>content size</code> 并不会改变其 <code>bounds</code> 的任何东西，所以这并不会影响 scroll view 如何组合自己的子视图。反而，<code>content size</code> 定义了可滚动区域。scroll view 的默认 <code>content size</code> 为 {w:0, h:0}。既然没有可滚动区域，用户是不可以滚动的，但是 scroll view 仍然会显示其 <code>bounds</code> 范围内所有的子视图。<br>当 <code>content size</code> 设置为比 <code>bounds</code> 大的时候，用户就可以滚动视图了。</p>
<p>contentInset 属性可以改变 content offset 的最大和最小值，这样便可以滚动出可滚动区域。</p>
<h3 id="Collection_View"><a href="#Collection_View" class="headerlink" title="Collection View"></a>Collection View</h3><p><code>layoutAttributesForElementsInRect</code>，collection view 调用这个方法并传递一个自身坐标系统中的矩形过去。</p>
<p>除了 cell，collection view 额外管理着两种视图：<code>supplementary views</code> 和 <code>decoration views</code>。</p>
<p>collection view 中的 <code>Supplementary views</code> 相当于 table view 的 section header 和 footer views。</p>
<h3 id="u81EA_u5B9A_u4E49_u63A7_u4EF6"><a href="#u81EA_u5B9A_u4E49_u63A7_u4EF6" class="headerlink" title="自定义控件"></a>自定义控件</h3><p>如果你真的选择了重写 <code>drawRect:</code>，确保检查内容模式。默认的模式是将内容缩放以填充视图的范围，这在当视图的 frame 改变时并不会重新绘制。</p>
<h4 id="u4EA4_u4E92_u6A21_u5F0F__28_u5F85_u66F4_u65B0_29"><a href="#u4EA4_u4E92_u6A21_u5F0F__28_u5F85_u66F4_u65B0_29" class="headerlink" title="交互模式 (待更新)"></a>交互模式 (待更新)</h4><ul>
<li>使用 Target-Action</li>
<li>使用 Delegate</li>
<li>使用 Block</li>
<li>使用 KVO</li>
<li>使用 Notification</li>
</ul>
<h3 id="u81EA_u52A8_u5E03_u5C40"><a href="#u81EA_u52A8_u5E03_u5C40" class="headerlink" title="自动布局"></a>自动布局</h3><p>更新约束 (updating constraints) 和布局视图 (laying out views)。</p>
<p>更新约束：这些布局将在实际设置视图的 frame 时被传递过去并被使用。你可以通过调用 <code>setNeedsUpdateConstraints</code> 来触发这个操作，同时，你对约束条件系统做出的任何改变都将自动触发这个方法。</p>
<p>你可以调用 <code>layoutIfNeeded</code> 来强制系统立即更新视图树的布局。</p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.objcio.cn/issue-3/" target="_blank" rel="external">#3 Views</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="Views"><a href="#Views" class="headerlink" ]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/tags/objc%E4%B8%AD%E5%9B%BD/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/categories/objc%E4%B8%AD%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Coding iOS客户端学习--项目框架(持续更新)]]></title>
    <link href="http://yeziahehe.com/2015/09/23/Coding_iOS_client_learning--project_framework(update)/"/>
    <id>http://yeziahehe.com/2015/09/23/Coding_iOS_client_learning--project_framework(update)/</id>
    <published>2015-09-23T15:22:51.000Z</published>
    <updated>2015-12-16T15:23:11.000Z</updated>
    <content type="html"><![CDATA[<p>最近发现Android组同事都使用的Coding作为git合作，下载把玩后发现<a href="https://coding.net/u/coding/p/Coding-iOS/git" target="_blank" rel="external">Coding客户端</a>代码开源，准备做一次源码学习分析。</p>
<h3 id="u9879_u76EE_u67B6_u6784"><a href="#u9879_u76EE_u67B6_u6784" class="headerlink" title="项目架构"></a>项目架构</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">├── Coding_iOS</span><br><span class="line">│   ├── AppDelegate：入口类</span><br><span class="line">│   ├── Models：数据类</span><br><span class="line">│   ├── Views：视图类</span><br><span class="line">│   │   ├── CCell：所有的CollectionViewCell都在这里</span><br><span class="line">│   │   ├── Cell：所有的TableViewCell都在这里</span><br><span class="line">│   │   └── XXX：ListView（项目、动态、任务、讨论、文档、代码）和InputView（用于聊天和评论的输入框）</span><br><span class="line">│   ├── Controllers：控制器，对应app中的各个页面</span><br><span class="line">│   │   ├── Login：登录页面</span><br><span class="line">│   │   ├── RootControllers：登录后的根页面</span><br><span class="line">│   │   ├── MeSetting：设置信息页面</span><br><span class="line">│   │   └── XXX：其它页面</span><br><span class="line">│   ├── Images：app中用到的所有的图片都在这里</span><br><span class="line">│   ├── Resources：资源文件</span><br><span class="line">│   ├── Util：一些常用控件和Category、Manager之类</span><br><span class="line">│   │   ├── Common</span><br><span class="line">│   │   ├── Manager</span><br><span class="line">│   │   ├── OC_Category</span><br><span class="line">│   │   └── ObjcRuntime</span><br><span class="line">│   └── Vendor：用到的一些第三方类库，一般都有改动</span><br><span class="line">│       ├── AFNetworking</span><br><span class="line">│       ├── AGEmojiKeyboard</span><br><span class="line">│       ├── ASProgressPopUpView</span><br><span class="line">│       ├── ActionSheetPicker</span><br><span class="line">│       ├── FontAwesome+iOS</span><br><span class="line">│       ├── MJPhotoBrowser</span><br><span class="line">│       ├── MLEmojiLabel</span><br><span class="line">│       ├── NSDate+Helper</span><br><span class="line">│       ├── NSStringEmojize</span><br><span class="line">│       ├── PPiAwesomeButton</span><br><span class="line">│       ├── QBImagePickerController</span><br><span class="line">│       ├── RDVTabBarController</span><br><span class="line">│       ├── SMPageControl</span><br><span class="line">│       ├── SVPullToRefresh</span><br><span class="line">│       ├── SWTableViewCell</span><br><span class="line">│       ├── UMENG</span><br><span class="line">│       ├── UMessage<span class="emphasis">_Sdk_</span>1.1.0</span><br><span class="line">│       ├── XGPush</span><br><span class="line">│       ├── XTSegmentControl</span><br><span class="line">│       └── iCarousel</span><br><span class="line">└── Pods：项目使用了[<span class="link_label">CocoaPods</span>](<span class="link_url">http://code4app.com/article/cocoapods-install-usage</span>)这个类库管理工具</span><br></pre></td></tr></table></figure>
<h3 id="u67B6_u6784_u89E3_u91CA"><a href="#u67B6_u6784_u89E3_u91CA" class="headerlink" title="架构解释"></a>架构解释</h3><p>不断更新</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近发现Android组同事都使用的Coding作为git合作，下载把玩后发现<a href="https://coding.net/u/coding/p/Coding-iOS/git" target="_blank" rel="external">Coding客户端</a]]>
    </summary>
    
      <category term="Coding源码" scheme="http://yeziahehe.com/tags/Coding%E6%BA%90%E7%A0%81/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="iOS" scheme="http://yeziahehe.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objc中国学习--并发编程]]></title>
    <link href="http://yeziahehe.com/2015/09/19/Objc_learning--Concurrent%20Programming/"/>
    <id>http://yeziahehe.com/2015/09/19/Objc_learning--Concurrent Programming/</id>
    <published>2015-09-19T15:21:37.000Z</published>
    <updated>2015-12-16T15:22:34.000Z</updated>
    <content type="html"><![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="u5E76_u53D1_u7F16_u7A0B"><a href="#u5E76_u53D1_u7F16_u7A0B" class="headerlink" title="并发编程"></a>并发编程</h3><ul>
<li><p>卷首语</p>
</li>
<li><p>并发编程：API 及挑战</p>
</li>
<li><p>常见的后台实践</p>
</li>
<li><p>底层并发 API</p>
</li>
<li><p>线程安全类的设计</p>
</li>
<li><p>测试并发程序</p>
</li>
</ul>
<h3 id="u7EBF_u7A0B"><a href="#u7EBF_u7A0B" class="headerlink" title="线程"></a>线程</h3><p>线程（thread）是组成进程的子单元，操作系统的调度器可以对线程进行单独的调度。实际上，所有的并发编程 API 都是构建于线程之上的 —— 包括 GCD 和操作队列（operation queues）。</p>
<p>直接使用线程可能会引发的一个问题是，如果你的代码和所基于的框架代码都创建自己的线程时，那么活动的线程数量有可能以指数级增长。这在大型工程中是一个常见问题。</p>
<p>接下来，我们将介绍两个基于队列的并发编程 API ：GCD 和 operation queue 。它们通过集中管理一个被大家协同使用的线程池，来解决上面遇到的问题。</p>
<h3 id="Grand_Central_Dispatch"><a href="#Grand_Central_Dispatch" class="headerlink" title="Grand Central Dispatch"></a>Grand Central Dispatch</h3><p>通过 GCD，开发者不用再直接跟线程打交道了，只需要向队列中添加代码块即可，GCD 在后端管理着一个线程池。GCD 不仅决定着你的代码块将在哪个线程被执行，它还根据可用的系统资源对这些线程进行管理。这样可以将开发者从线程管理的工作中解放出来，通过集中的管理线程，来缓解大量线程被创建的问题。</p>
<p>GCD 带来的另一个重要改变是，作为开发者可以将工作考虑为一个队列，而不是一堆线程，这种并行的抽象模型更容易掌握和使用。</p>
<p>GCD 公开有 5 个不同的队列：运行在主线程中的 main queue，3 个不同优先级的后台队列，以及一个优先级更低的后台队列（用于 I/O）。<br>另外，开发者可以创建自定义队列：串行或者并行队列。自定义队列非常强大，在自定义队列中被调度的所有 block 最终都将被放入到系统的全局队列中和线程池中。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">      <span class="comment">//单例模式，GCD应用的最多的模式</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Operation_Queues"><a href="#Operation_Queues" class="headerlink" title="Operation Queues"></a>Operation Queues</h3><p>操作队列（operation queue）是由 GCD 提供的一个队列模型的 Cocoa 抽象。GCD 提供了更加底层的控制，而操作队列则在 GCD 之上实现了一些方便的功能，这些功能对于 app 的开发者来说通常是最好最安全的选择。</p>
<p>NSOperationQueue 有两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。在两种类型中，这些队列所处理的任务都使用 NSOperation 的子类来表述。</p>
<h3 id="Run_Loops"><a href="#Run_Loops" class="headerlink" title="Run Loops"></a>Run Loops</h3><p>Run loop并不像 GCD 或者操作队列那样是一种并发机制，因为它并不能并行执行任务。不过在主 dispatch/operation 队列中， run loop 将直接配合任务的执行，它提供了一种异步执行代码的机制。</p>
<p>Run loop 比起操作队列或者 GCD 来说容易使用得多，因为通过 run loop ，你不必处理并发中的复杂情况，就能异步地执行任务。</p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.objcio.cn/issue-2/" target="_blank" rel="external">#2 并发编程</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>从今天开始学习<a href="http://objccn.io" target="_blank" rel="external">objc中国</a>的所有博客。</p>
<h3 id="u5E76_u53D1_u7F16_u7A0B"><a href="#u5E76_u5]]>
    </summary>
    
      <category term="iOS" scheme="http://yeziahehe.com/tags/iOS/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/tags/objc%E4%B8%AD%E5%9B%BD/"/>
    
      <category term="objc中国" scheme="http://yeziahehe.com/categories/objc%E4%B8%AD%E5%9B%BD/"/>
    
  </entry>
  
</feed>
